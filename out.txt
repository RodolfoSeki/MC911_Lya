/* some tests for syntax analysis */

p1:proc ();
  dcl x int = 3;
end;
p1();


type vector = array [1:3] int;
dcl x1 vector;
do
  for i = 1 to 3;
    x1[i] = i;
od;
x1[i] += x1[j];


p2:proc () returns (int);
  dcl x int = 3;
  return x;
end;
dcl y1 int = p1();
print(y1, p2());


type vector = array [1:3] int;
dcl v vector;
do
  for i in int(1:3);
    v[i] = i;
od;


dcl s chars[8] = "setembro";
dcl b bool;
if b then
  print(s);
else
  print("agosto");
fi;


type ptr = ref int;
dcl x, y int, p ptr = ->x;
q: proc () returns (int loc);
  dcl z ref int;
  z = ->y;
  return z->;
end;
x = 10;
y = 20;
print (p->);
p = ->q();
print (p->);
q() = x;


dcl bb, c, d bool;
dcl xx, yy, zz, ww int;

xx = if bb then yy else zz fi;
ww = if bb then xx elsif c then yy else zz fi;
print (if d then xx elsif c then yy elsif b then zz else ww fi);

New scope for Program
Name p1 with type [none] was added to scope 2
New scope for ProcedureDefinition
Name x with type [int] was added to scope 3
End scope
Name vector with type [int, array] was added to scope 2
Name x1 with type [int, array] was added to scope 2
New scope for DoAction
New scope for ControlPart
Error, i used but not declared
Error, loop counter i must be of type int
End scope
Error, index i should be int
Error, can't assign [none] to [int]
End scope
Error, j used but not declared
Error, index j should be int
Error, index i should be int
Name p2 with type [int] was added to scope 2
New scope for ProcedureDefinition
Name x with type [int] was added to scope 3
End scope
Error, P1() is not INT
Name y1 with type [int] was added to scope 2
Error, vector already exists
Name vector with type [int, array] was added to scope 2
Name v with type [int, array] was added to scope 2
New scope for DoAction
New scope for ControlPart
End scope
Error, index i should be int
Error, can't assign [none] to [int]
End scope
Name s with type [char, string] was added to scope 2
Name b with type [bool] was added to scope 2
New scope for ThenClause
End scope
New scope for ElseClause
End scope
Name ptr with type [int, addr] was added to scope 2
Name x with type [int] was added to scope 2
Name y with type [int] was added to scope 2
Name p with type [int, addr] was added to scope 2
Name q with type [int] was added to scope 2
New scope for ProcedureDefinition
Name z with type [int, addr] was added to scope 3
End scope
Name bb with type [bool] was added to scope 2
Name c with type [bool] was added to scope 2
Name d with type [bool] was added to scope 2
Name xx with type [int] was added to scope 2
Name yy with type [int] was added to scope 2
Name zz with type [int] was added to scope 2
Name ww with type [int] was added to scope 2
Error, condition control zz must be of type bool
Error, condition control zz must be of type bool
Error, condition control ww must be of type bool
Program: 
  ProcedureStatement: 
    Identifier: name=p1
    ProcedureDefinition:    [91mtype=[00mnone "[92mPROC ()[00m"
      DeclarationStatement: 
        Declaration: 
          Identifier: name=x
          Mode:    [91mtype=[00m[int] "[92mINT[00m"
            DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
              IntegerMode: name=int
          Expression:    [91mtype=[00m[int] "[92m3[00m"
            PrimitiveValue:    [91mtype=[00m[int] "[92m3[00m"
              IntegerLiteral: const=3
  ActionStatement: 
    Action:    [91mtype=[00m[none] "[92mP1()[00m"
      CallAction:    [91mtype=[00m[none] "[92mP1()[00m"
        ProcedureCall:    [91mtype=[00m[none] "[92mP1()[00m"
          Identifier: name=p1
  NewModeStatement: 
    ModeDefinition: 
      Identifier: name=vector
      Mode:    [91mtype=[00m[int, array] "[92mARRAY [1:3] INT[00m"
        ArrayMode:    [91mtype=[00m[int, array] "[92mARRAY [1:3] INT[00m"
          LiteralRange:    [91mtype=[00m[int] "[92m1:3[00m"
            Expression:    [91mtype=[00m[int] "[92m1[00m"
              PrimitiveValue:    [91mtype=[00m[int] "[92m1[00m"
                IntegerLiteral: const=1
            Expression:    [91mtype=[00m[int] "[92m3[00m"
              PrimitiveValue:    [91mtype=[00m[int] "[92m3[00m"
                IntegerLiteral: const=3
          Mode:    [91mtype=[00m[int] "[92mINT[00m"
            DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
              IntegerMode: name=int
  DeclarationStatement: 
    Declaration: 
      Identifier: name=x1
      Mode:    [91mtype=[00m[int, array] "[92mvector[00m"
        Identifier: name=vector
  ActionStatement: 
    Action: 
      BracketedAction: 
        DoAction: 
          ControlPart: 
            ForControl: 
              Iteration: 
                StepEnumeration: decreasing=False
                  Identifier: name=i
                  Expression:    [91mtype=[00m[int] "[92m1[00m"
                    PrimitiveValue:    [91mtype=[00m[int] "[92m1[00m"
                      IntegerLiteral: const=1
                  Expression:    [91mtype=[00m[int] "[92m3[00m"
                    PrimitiveValue:    [91mtype=[00m[int] "[92m3[00m"
                      IntegerLiteral: const=3
          ActionStatement: 
            Action: 
              AssignmentAction: 
                Location:    [91mtype=[00m[int] "[92mx1[i][00m"
                  ArrayElement:    [91mtype=[00m[int] "[92mx1[i][00m"
                    Location:    [91mtype=[00m[int, array] "[92mx1[00m"
                      Identifier: name=x1
                    Expression:    [91mtype=[00m[none] "[92mi[00m"
                      Location:    [91mtype=[00m[none] "[92mi[00m"
                        Identifier: name=i
                AssigningOperator: op==
                Expression:    [91mtype=[00m[none] "[92mi[00m"
                  Location:    [91mtype=[00m[none] "[92mi[00m"
                    Identifier: name=i
  ActionStatement: 
    Action: 
      AssignmentAction: 
        Location:    [91mtype=[00m[int] "[92mx1[i][00m"
          ArrayElement:    [91mtype=[00m[int] "[92mx1[i][00m"
            Location:    [91mtype=[00m[int, array] "[92mx1[00m"
              Identifier: name=x1
            Expression:    [91mtype=[00m[none] "[92mi[00m"
              Location:    [91mtype=[00m[none] "[92mi[00m"
                Identifier: name=i
        AssigningOperator: op=+=
        Expression:    [91mtype=[00m[int] "[92mx1[j][00m"
          Location:    [91mtype=[00m[int] "[92mx1[j][00m"
            ArrayElement:    [91mtype=[00m[int] "[92mx1[j][00m"
              Location:    [91mtype=[00m[int, array] "[92mx1[00m"
                Identifier: name=x1
              Expression:    [91mtype=[00m[none] "[92mj[00m"
                Location:    [91mtype=[00m[none] "[92mj[00m"
                  Identifier: name=j
  ProcedureStatement: 
    Identifier: name=p2
    ProcedureDefinition:    [91mtype=[00m[int] "[92mPROC ()[00m"
      ResultSpec: loc=False
        Mode:    [91mtype=[00m[int] "[92mINT[00m"
          DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
            IntegerMode: name=int
      DeclarationStatement: 
        Declaration: 
          Identifier: name=x
          Mode:    [91mtype=[00m[int] "[92mINT[00m"
            DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
              IntegerMode: name=int
          Expression:    [91mtype=[00m[int] "[92m3[00m"
            PrimitiveValue:    [91mtype=[00m[int] "[92m3[00m"
              IntegerLiteral: const=3
      ActionStatement: 
        Action:    [91mtype=[00m[int] "[92mx[00m"
          ReturnAction:    [91mtype=[00m[int] "[92mx[00m"
            Expression:    [91mtype=[00m[int] "[92mx[00m"
              Location:    [91mtype=[00m[int] "[92mx[00m"
                Identifier: name=x
  DeclarationStatement: 
    Declaration: 
      Identifier: name=y1
      Mode:    [91mtype=[00m[int] "[92mINT[00m"
        DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
          IntegerMode: name=int
      Expression:    [91mtype=[00m[none] "[92mP1()[00m"
        Location:    [91mtype=[00m[none] "[92mP1()[00m"
          CallAction:    [91mtype=[00m[none] "[92mP1()[00m"
            ProcedureCall:    [91mtype=[00m[none] "[92mP1()[00m"
              Identifier: name=p1
  ActionStatement: 
    Action:    [91mtype=[00m[int] "[92mPRINT(y1, P2())[00m"
      CallAction:    [91mtype=[00m[int] "[92mPRINT(y1, P2())[00m"
        BuiltInCall: name=print
          Expression:    [91mtype=[00m[int] "[92my1[00m"
            Location:    [91mtype=[00m[int] "[92my1[00m"
              Identifier: name=y1
          Expression:    [91mtype=[00m[int] "[92mP2()[00m"
            Location:    [91mtype=[00m[int] "[92mP2()[00m"
              CallAction:    [91mtype=[00m[int] "[92mP2()[00m"
                ProcedureCall:    [91mtype=[00m[int] "[92mP2()[00m"
                  Identifier: name=p2
  NewModeStatement: 
    ModeDefinition: 
      Identifier: name=vector
      Mode:    [91mtype=[00m[int, array] "[92mARRAY [1:3] INT[00m"
        ArrayMode:    [91mtype=[00m[int, array] "[92mARRAY [1:3] INT[00m"
          LiteralRange:    [91mtype=[00m[int] "[92m1:3[00m"
            Expression:    [91mtype=[00m[int] "[92m1[00m"
              PrimitiveValue:    [91mtype=[00m[int] "[92m1[00m"
                IntegerLiteral: const=1
            Expression:    [91mtype=[00m[int] "[92m3[00m"
              PrimitiveValue:    [91mtype=[00m[int] "[92m3[00m"
                IntegerLiteral: const=3
          Mode:    [91mtype=[00m[int] "[92mINT[00m"
            DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
              IntegerMode: name=int
  DeclarationStatement: 
    Declaration: 
      Identifier: name=v
      Mode:    [91mtype=[00m[int, array] "[92mvector[00m"
        Identifier: name=vector
  ActionStatement: 
    Action: 
      BracketedAction: 
        DoAction: 
          ControlPart: 
            ForControl: 
              Iteration: 
                RangeEnumeration: decreasing=False
                  Identifier: name=i
                  DiscreteMode:    [91mtype=[00m[int] "[92mINT(1:3)[00m"
                    DiscreteRangeMode:    [91mtype=[00m[int] "[92mINT(1:3)[00m"
                      DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
                        IntegerMode: name=int
                      LiteralRange:    [91mtype=[00m[int] "[92m1:3[00m"
                        Expression:    [91mtype=[00m[int] "[92m1[00m"
                          PrimitiveValue:    [91mtype=[00m[int] "[92m1[00m"
                            IntegerLiteral: const=1
                        Expression:    [91mtype=[00m[int] "[92m3[00m"
                          PrimitiveValue:    [91mtype=[00m[int] "[92m3[00m"
                            IntegerLiteral: const=3
          ActionStatement: 
            Action: 
              AssignmentAction: 
                Location:    [91mtype=[00m[int] "[92mv[i][00m"
                  ArrayElement:    [91mtype=[00m[int] "[92mv[i][00m"
                    Location:    [91mtype=[00m[int, array] "[92mv[00m"
                      Identifier: name=v
                    Expression:    [91mtype=[00m[none] "[92mi[00m"
                      Location:    [91mtype=[00m[none] "[92mi[00m"
                        Identifier: name=i
                AssigningOperator: op==
                Expression:    [91mtype=[00m[none] "[92mi[00m"
                  Location:    [91mtype=[00m[none] "[92mi[00m"
                    Identifier: name=i
  DeclarationStatement: 
    Declaration: 
      Identifier: name=s
      Mode:    [91mtype=[00m[char, string] "[92mCHARS [8][00m"
        StringMode:    [91mtype=[00m[char, string] "[92mCHARS [8][00m"
          IntegerLiteral: const=8
      Expression:    [91mtype=[00m[char, string] "[92m"setembro"[00m"
        PrimitiveValue:    [91mtype=[00m[char, string] "[92m"setembro"[00m"
          CharacterStringLiteral: string="setembro"
  DeclarationStatement: 
    Declaration: 
      Identifier: name=b
      Mode:    [91mtype=[00m[bool] "[92mBOOL[00m"
        DiscreteMode:    [91mtype=[00m[bool] "[92mBOOL[00m"
          BooleanMode: name=bool
  ActionStatement: 
    Action:    [91mtype=[00m[bool] "[92mIfAction[00m"
      BracketedAction:    [91mtype=[00m[bool] "[92mIfAction[00m"
        IfAction:    [91mtype=[00m[bool] "[92mIfAction[00m"
          BooleanExpression:    [91mtype=[00m[bool] "[92mb[00m"
            Expression:    [91mtype=[00m[bool] "[92mb[00m"
              Location:    [91mtype=[00m[bool] "[92mb[00m"
                Identifier: name=b
          ThenClause: 
            ActionStatement: 
              Action:    [91mtype=[00m[int] "[92mPRINT(s)[00m"
                CallAction:    [91mtype=[00m[int] "[92mPRINT(s)[00m"
                  BuiltInCall: name=print
                    Expression:    [91mtype=[00m[char, string] "[92ms[00m"
                      Location:    [91mtype=[00m[char, string] "[92ms[00m"
                        Identifier: name=s
          ElseClause: 
            ActionStatement: 
              Action:    [91mtype=[00m[int] "[92mPRINT("agosto")[00m"
                CallAction:    [91mtype=[00m[int] "[92mPRINT("agosto")[00m"
                  BuiltInCall: name=print
                    Expression:    [91mtype=[00m[char, string] "[92m"agosto"[00m"
                      PrimitiveValue:    [91mtype=[00m[char, string] "[92m"agosto"[00m"
                        CharacterStringLiteral: string="agosto"
  NewModeStatement: 
    ModeDefinition: 
      Identifier: name=ptr
      Mode:    [91mtype=[00m[int, addr] "[92mREF INT[00m"
        ReferenceMode:    [91mtype=[00m[int, addr] "[92mREF INT[00m"
          Mode:    [91mtype=[00m[int] "[92mINT[00m"
            DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
              IntegerMode: name=int
  DeclarationStatement: 
    Declaration: 
      Identifier: name=x
      Identifier: name=y
      Mode:    [91mtype=[00m[int] "[92mINT[00m"
        DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
          IntegerMode: name=int
    Declaration: 
      Identifier: name=p
      Mode:    [91mtype=[00m[int, addr] "[92mptr[00m"
        Identifier: name=ptr
      Expression:    [91mtype=[00m[int, addr] "[92m->x[00m"
        ReferencedLocation:    [91mtype=[00m[int, addr] "[92m->x[00m"
          Location:    [91mtype=[00m[int] "[92mx[00m"
            Identifier: name=x
  ProcedureStatement: 
    Identifier: name=q
    ProcedureDefinition:    [91mtype=[00m[int] "[92mPROC ()[00m"
      ResultSpec: loc=True
        Mode:    [91mtype=[00m[int] "[92mINT[00m"
          DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
            IntegerMode: name=int
      DeclarationStatement: 
        Declaration: 
          Identifier: name=z
          Mode:    [91mtype=[00m[int, addr] "[92mREF INT[00m"
            ReferenceMode:    [91mtype=[00m[int, addr] "[92mREF INT[00m"
              Mode:    [91mtype=[00m[int] "[92mINT[00m"
                DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
                  IntegerMode: name=int
      ActionStatement: 
        Action: 
          AssignmentAction: 
            Location:    [91mtype=[00m[int, addr] "[92mz[00m"
              Identifier: name=z
            AssigningOperator: op==
            Expression:    [91mtype=[00m[int, addr] "[92m->y[00m"
              ReferencedLocation:    [91mtype=[00m[int, addr] "[92m->y[00m"
                Location:    [91mtype=[00m[int] "[92my[00m"
                  Identifier: name=y
      ActionStatement: 
        Action:    [91mtype=[00m[int] "[92mz->[00m"
          ReturnAction:    [91mtype=[00m[int] "[92mz->[00m"
            Expression:    [91mtype=[00m[int] "[92mz->[00m"
              Location:    [91mtype=[00m[int] "[92mz->[00m"
                DereferencedReference:    [91mtype=[00m[int] "[92mz->[00m"
                  Location:    [91mtype=[00m[int, addr] "[92mz[00m"
                    Identifier: name=z
  ActionStatement: 
    Action: 
      AssignmentAction: 
        Location:    [91mtype=[00m[int] "[92mx[00m"
          Identifier: name=x
        AssigningOperator: op==
        Expression:    [91mtype=[00m[int] "[92m10[00m"
          PrimitiveValue:    [91mtype=[00m[int] "[92m10[00m"
            IntegerLiteral: const=10
  ActionStatement: 
    Action: 
      AssignmentAction: 
        Location:    [91mtype=[00m[int] "[92my[00m"
          Identifier: name=y
        AssigningOperator: op==
        Expression:    [91mtype=[00m[int] "[92m20[00m"
          PrimitiveValue:    [91mtype=[00m[int] "[92m20[00m"
            IntegerLiteral: const=20
  ActionStatement: 
    Action:    [91mtype=[00m[int] "[92mPRINT(p->)[00m"
      CallAction:    [91mtype=[00m[int] "[92mPRINT(p->)[00m"
        BuiltInCall: name=print
          Expression:    [91mtype=[00m[int] "[92mp->[00m"
            Location:    [91mtype=[00m[int] "[92mp->[00m"
              DereferencedReference:    [91mtype=[00m[int] "[92mp->[00m"
                Location:    [91mtype=[00m[int, addr] "[92mp[00m"
                  Identifier: name=p
  ActionStatement: 
    Action: 
      AssignmentAction: 
        Location:    [91mtype=[00m[int, addr] "[92mp[00m"
          Identifier: name=p
        AssigningOperator: op==
        Expression:    [91mtype=[00m[int, addr] "[92m->Q()[00m"
          ReferencedLocation:    [91mtype=[00m[int, addr] "[92m->Q()[00m"
            Location:    [91mtype=[00m[int] "[92mQ()[00m"
              CallAction:    [91mtype=[00m[int] "[92mQ()[00m"
                ProcedureCall:    [91mtype=[00m[int] "[92mQ()[00m"
                  Identifier: name=q
  ActionStatement: 
    Action:    [91mtype=[00m[int] "[92mPRINT(p->)[00m"
      CallAction:    [91mtype=[00m[int] "[92mPRINT(p->)[00m"
        BuiltInCall: name=print
          Expression:    [91mtype=[00m[int] "[92mp->[00m"
            Location:    [91mtype=[00m[int] "[92mp->[00m"
              DereferencedReference:    [91mtype=[00m[int] "[92mp->[00m"
                Location:    [91mtype=[00m[int, addr] "[92mp[00m"
                  Identifier: name=p
  ActionStatement: 
    Action: 
      AssignmentAction: 
        Location:    [91mtype=[00m[int] "[92mQ()[00m"
          CallAction:    [91mtype=[00m[int] "[92mQ()[00m"
            ProcedureCall:    [91mtype=[00m[int] "[92mQ()[00m"
              Identifier: name=q
        AssigningOperator: op==
        Expression:    [91mtype=[00m[int] "[92mx[00m"
          Location:    [91mtype=[00m[int] "[92mx[00m"
            Identifier: name=x
  DeclarationStatement: 
    Declaration: 
      Identifier: name=bb
      Identifier: name=c
      Identifier: name=d
      Mode:    [91mtype=[00m[bool] "[92mBOOL[00m"
        DiscreteMode:    [91mtype=[00m[bool] "[92mBOOL[00m"
          BooleanMode: name=bool
  DeclarationStatement: 
    Declaration: 
      Identifier: name=xx
      Identifier: name=yy
      Identifier: name=zz
      Identifier: name=ww
      Mode:    [91mtype=[00m[int] "[92mINT[00m"
        DiscreteMode:    [91mtype=[00m[int] "[92mINT[00m"
          IntegerMode: name=int
  ActionStatement: 
    Action: 
      AssignmentAction: 
        Location:    [91mtype=[00m[int] "[92mxx[00m"
          Identifier: name=xx
        AssigningOperator: op==
        Expression:    [91mtype=[00m[int] "[92mConditional Expression[00m"
          ConditionalExpression:    [91mtype=[00m[int] "[92mConditional Expression[00m"
            BooleanExpression:    [91mtype=[00m[bool] "[92mbb[00m"
              Expression:    [91mtype=[00m[bool] "[92mbb[00m"
                Location:    [91mtype=[00m[bool] "[92mbb[00m"
                  Identifier: name=bb
            ThenExpression:    [91mtype=[00m[int] "[92myy[00m"
              Expression:    [91mtype=[00m[int] "[92myy[00m"
                Location:    [91mtype=[00m[int] "[92myy[00m"
                  Identifier: name=yy
            ElseExpression:    [91mtype=[00m[int] "[92mzz[00m"
              Expression:    [91mtype=[00m[int] "[92mzz[00m"
                Location:    [91mtype=[00m[int] "[92mzz[00m"
                  Identifier: name=zz
  ActionStatement: 
    Action: 
      AssignmentAction: 
        Location:    [91mtype=[00m[int] "[92mww[00m"
          Identifier: name=ww
        AssigningOperator: op==
        Expression:    [91mtype=[00m[int] "[92mConditional Expression[00m"
          ConditionalExpression:    [91mtype=[00m[int] "[92mConditional Expression[00m"
            BooleanExpression:    [91mtype=[00m[bool] "[92mbb[00m"
              Expression:    [91mtype=[00m[bool] "[92mbb[00m"
                Location:    [91mtype=[00m[bool] "[92mbb[00m"
                  Identifier: name=bb
            ThenExpression:    [91mtype=[00m[int] "[92mxx[00m"
              Expression:    [91mtype=[00m[int] "[92mxx[00m"
                Location:    [91mtype=[00m[int] "[92mxx[00m"
                  Identifier: name=xx
            ElseExpression:    [91mtype=[00m[int] "[92mzz[00m"
              Expression:    [91mtype=[00m[int] "[92mzz[00m"
                Location:    [91mtype=[00m[int] "[92mzz[00m"
                  Identifier: name=zz
            ElsifExpression:    [91mtype=[00m[int] "[92mElsif Expression[00m"
              BooleanExpression:    [91mtype=[00m[bool] "[92mc[00m"
                Expression:    [91mtype=[00m[bool] "[92mc[00m"
                  Location:    [91mtype=[00m[bool] "[92mc[00m"
                    Identifier: name=c
              ThenExpression:    [91mtype=[00m[int] "[92myy[00m"
                Expression:    [91mtype=[00m[int] "[92myy[00m"
                  Location:    [91mtype=[00m[int] "[92myy[00m"
                    Identifier: name=yy
  ActionStatement: 
    Action:    [91mtype=[00m[int] "[92mPRINT(Conditional Expression)[00m"
      CallAction:    [91mtype=[00m[int] "[92mPRINT(Conditional Expression)[00m"
        BuiltInCall: name=print
          Expression:    [91mtype=[00m[int] "[92mConditional Expression[00m"
            ConditionalExpression:    [91mtype=[00m[int] "[92mConditional Expression[00m"
              BooleanExpression:    [91mtype=[00m[bool] "[92md[00m"
                Expression:    [91mtype=[00m[bool] "[92md[00m"
                  Location:    [91mtype=[00m[bool] "[92md[00m"
                    Identifier: name=d
              ThenExpression:    [91mtype=[00m[int] "[92mxx[00m"
                Expression:    [91mtype=[00m[int] "[92mxx[00m"
                  Location:    [91mtype=[00m[int] "[92mxx[00m"
                    Identifier: name=xx
              ElseExpression:    [91mtype=[00m[int] "[92mww[00m"
                Expression:    [91mtype=[00m[int] "[92mww[00m"
                  Location:    [91mtype=[00m[int] "[92mww[00m"
                    Identifier: name=ww
              ElsifExpression:    [91mtype=[00m[int] "[92mElsif Expression[00m"
                BooleanExpression:    [91mtype=[00m[bool] "[92mb[00m"
                  Expression:    [91mtype=[00m[bool] "[92mb[00m"
                    Location:    [91mtype=[00m[bool] "[92mb[00m"
                      Identifier: name=b
                ThenExpression:    [91mtype=[00m[int] "[92mzz[00m"
                  Expression:    [91mtype=[00m[int] "[92mzz[00m"
                    Location:    [91mtype=[00m[int] "[92mzz[00m"
                      Identifier: name=zz
                ElsifExpression:    [91mtype=[00m[int] "[92mElsif Expression[00m"
                  BooleanExpression:    [91mtype=[00m[bool] "[92mc[00m"
                    Expression:    [91mtype=[00m[bool] "[92mc[00m"
                      Location:    [91mtype=[00m[bool] "[92mc[00m"
                        Identifier: name=c
                  ThenExpression:    [91mtype=[00m[int] "[92myy[00m"
                    Expression:    [91mtype=[00m[int] "[92myy[00m"
                      Location:    [91mtype=[00m[int] "[92myy[00m"
                        Identifier: name=yy
None
