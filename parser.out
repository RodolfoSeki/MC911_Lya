Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMI
Rule 10    declaration_list -> declaration
Rule 11    declaration_list -> declaration_list COMMA declaration
Rule 12    declaration -> identifier_list mode
Rule 13    declaration -> identifier_list mode initialization
Rule 14    initialization -> EQUALS expression
Rule 15    identifier_list -> identifier
Rule 16    identifier_list -> identifier_list COMMA identifier
Rule 17    identifier -> ID
Rule 18    synonym_statement -> SYN synonym_list SEMI
Rule 19    synonym_list -> synonym_definition
Rule 20    synonym_list -> synonym_list COMMA synonym_definition
Rule 21    synonym_definition -> identifier_list mode EQUALS constant_expression
Rule 22    synonym_definition -> identifier_list EQUALS constant_expression
Rule 23    constant_expression -> expression
Rule 24    newmode_statement -> TYPE newmode_list SEMI
Rule 25    newmode_list -> mode_definition
Rule 26    newmode_list -> newmode_list COMMA mode_definition
Rule 27    mode_definition -> identifier_list EQUALS mode
Rule 28    mode -> identifier
Rule 29    mode -> discrete_mode
Rule 30    mode -> reference_mode
Rule 31    mode -> composite_mode
Rule 32    discrete_mode -> integer_mode
Rule 33    discrete_mode -> boolean_mode
Rule 34    discrete_mode -> character_mode
Rule 35    discrete_mode -> discrete_range_mode
Rule 36    integer_mode -> INT
Rule 37    boolean_mode -> BOOL
Rule 38    character_mode -> CHAR
Rule 39    discrete_range_mode -> identifier LPAREN literal_range RPAREN
Rule 40    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 41    literal_range -> expression COLON expression
Rule 42    reference_mode -> REF mode
Rule 43    composite_mode -> string_mode
Rule 44    composite_mode -> array_mode
Rule 45    string_mode -> CHARS LBRACKET literal RBRACKET
Rule 46    array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode
Rule 47    list_index_mode -> index_mode
Rule 48    list_index_mode -> list_index_mode COMMA index_mode
Rule 49    index_mode -> discrete_mode
Rule 50    index_mode -> literal_range
Rule 51    location -> identifier
Rule 52    location -> dereferenced_reference
Rule 53    location -> array_element
Rule 54    location -> array_slice
Rule 55    location -> call_action
Rule 56    location -> string_slice
Rule 57    location -> string_element
Rule 58    dereferenced_reference -> location ARROW
Rule 59    string_element -> identifier LBRACKET start_element RBRACKET
Rule 60    start_element -> expression
Rule 61    string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET
Rule 62    left_element -> expression
Rule 63    right_element -> expression
Rule 64    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 65    expression_list -> expression
Rule 66    expression_list -> expression_list COMMA expression
Rule 67    array_slice -> array_location LBRACKET expression COLON expression RBRACKET
Rule 68    array_location -> location
Rule 69    primitive_value -> literal
Rule 70    primitive_value -> value_array_element
Rule 71    primitive_value -> value_array_slice
Rule 72    primitive_value -> parenthesized_expression
Rule 73    literal -> integer_literal
Rule 74    literal -> boolean_literal
Rule 75    literal -> character_literal
Rule 76    literal -> empty_literal
Rule 77    literal -> character_string_literal
Rule 78    integer_literal -> ICONST
Rule 79    boolean_literal -> FALSE
Rule 80    boolean_literal -> TRUE
Rule 81    character_literal -> CCONST
Rule 82    empty_literal -> NULL
Rule 83    character_string_literal -> SCONST
Rule 84    value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET
Rule 85    value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET
Rule 86    array_primitive_value -> primitive_value
Rule 87    parenthesized_expression -> LPAREN expression RPAREN
Rule 88    expression -> operand0
Rule 89    expression -> conditional_expression
Rule 90    conditional_expression -> IF boolean_expression then_expression else_expression FI
Rule 91    conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI
Rule 92    boolean_expression -> expression
Rule 93    then_expression -> THEN expression
Rule 94    else_expression -> ELSE expression
Rule 95    elsif_expression -> ELSIF boolean_expression then_expression
Rule 96    elsif_expression -> elsif_expression ELSIF boolean_expression then_expression
Rule 97    operand0 -> operand1
Rule 98    operand0 -> operand0 operator1 operand1
Rule 99    operator1 -> relational_operator
Rule 100   operator1 -> membership_operator
Rule 101   relational_operator -> AND
Rule 102   relational_operator -> OR
Rule 103   relational_operator -> EQ
Rule 104   relational_operator -> NE
Rule 105   relational_operator -> GT
Rule 106   relational_operator -> GEQ
Rule 107   relational_operator -> LT
Rule 108   relational_operator -> LEQ
Rule 109   membership_operator -> IN
Rule 110   operand1 -> operand2
Rule 111   operand1 -> operand1 arithmetic_additive_operator operand2
Rule 112   operand1 -> operand1 string_concatenation_operator operand2
Rule 113   arithmetic_additive_operator -> PLUS
Rule 114   arithmetic_additive_operator -> MINUS
Rule 115   string_concatenation_operator -> LAND
Rule 116   operand2 -> operand3
Rule 117   operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 118   arithmetic_multiplicative_operator -> TIMES
Rule 119   arithmetic_multiplicative_operator -> DIVIDE
Rule 120   arithmetic_multiplicative_operator -> MODULO
Rule 121   operand3 -> operand4
Rule 122   operand3 -> monadic_operator operand4
Rule 123   monadic_operator -> MINUS
Rule 124   monadic_operator -> NOT
Rule 125   operand4 -> location
Rule 126   operand4 -> referenced_location
Rule 127   operand4 -> primitive_value
Rule 128   referenced_location -> ARROW location
Rule 129   action_statement -> action SEMI
Rule 130   action_statement -> identifier COLON action SEMI
Rule 131   action -> bracketed_action
Rule 132   action -> assignment_action
Rule 133   action -> call_action
Rule 134   action -> exit_action
Rule 135   action -> return_action
Rule 136   action -> result_action
Rule 137   bracketed_action -> if_action
Rule 138   bracketed_action -> do_action
Rule 139   assignment_action -> location assigning_operator expression
Rule 140   assigning_operator -> EQUALS
Rule 141   assigning_operator -> PLUS EQUALS
Rule 142   assigning_operator -> MINUS EQUALS
Rule 143   assigning_operator -> TIMES EQUALS
Rule 144   assigning_operator -> DIVIDE EQUALS
Rule 145   assigning_operator -> MODULO EQUALS
Rule 146   assigning_operator -> LAND EQUALS
Rule 147   if_action -> IF boolean_expression then_clause FI
Rule 148   if_action -> IF boolean_expression then_clause else_clause FI
Rule 149   then_clause -> THEN action_statement_list
Rule 150   action_statement_list -> action_statement
Rule 151   action_statement_list -> action_statement_list action_statement
Rule 152   else_clause -> ELSE action_statement_list
Rule 153   else_clause -> ELSIF boolean_expression then_clause
Rule 154   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 155   do_action -> DO action_statement_list OD
Rule 156   do_action -> DO control_part SEMI action_statement_list OD
Rule 157   control_part -> for_control
Rule 158   control_part -> for_control while_control
Rule 159   control_part -> while_control
Rule 160   for_control -> FOR iteration
Rule 161   iteration -> step_enumeration
Rule 162   iteration -> range_enumeration
Rule 163   step_enumeration -> identifier EQUALS start_value end_value
Rule 164   step_enumeration -> identifier EQUALS start_value step_value end_value
Rule 165   step_enumeration -> identifier EQUALS start_value DOWN end_value
Rule 166   step_enumeration -> identifier EQUALS start_value step_value DOWN end_value
Rule 167   start_value -> expression
Rule 168   step_value -> BY expression
Rule 169   end_value -> TO expression
Rule 170   range_enumeration -> identifier IN discrete_mode
Rule 171   range_enumeration -> identifier DOWN IN discrete_mode
Rule 172   while_control -> WHILE boolean_expression
Rule 173   call_action -> procedure_call
Rule 174   call_action -> builtin_call
Rule 175   procedure_call -> identifier LPAREN RPAREN
Rule 176   procedure_call -> identifier LPAREN parameter_list RPAREN
Rule 177   parameter_list -> parameter
Rule 178   parameter_list -> parameter_list COMMA parameter
Rule 179   parameter -> expression
Rule 180   exit_action -> EXIT identifier
Rule 181   return_action -> RETURN
Rule 182   return_action -> RETURN result
Rule 183   result_action -> RESULT result
Rule 184   result -> expression
Rule 185   builtin_call -> builtin_name LPAREN RPAREN
Rule 186   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 187   builtin_name -> ABS
Rule 188   builtin_name -> ASC
Rule 189   builtin_name -> NUM
Rule 190   builtin_name -> UPPER
Rule 191   builtin_name -> LOWER
Rule 192   builtin_name -> LENGTH
Rule 193   builtin_name -> READ
Rule 194   builtin_name -> PRINT
Rule 195   procedure_statement -> identifier COLON procedure_definition SEMI
Rule 196   procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END
Rule 197   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END
Rule 198   procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END
Rule 199   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END
Rule 200   formal_parameter_list -> formal_parameter
Rule 201   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 202   formal_parameter -> identifier_list parameter_spec
Rule 203   parameter_spec -> mode
Rule 204   parameter_spec -> mode LOC
Rule 205   result_spec -> RETURNS LPAREN mode RPAREN
Rule 206   result_spec -> RETURNS LPAREN mode LOC RPAREN

Terminals, with rules where they appear

ABS                  : 187
AND                  : 101
ARRAY                : 46
ARROW                : 58 128
ASC                  : 188
BOOL                 : 37
BY                   : 168
CCONST               : 81
CHAR                 : 38
CHARS                : 45
COLON                : 41 61 67 85 130 195
COMMA                : 11 16 20 26 48 66 178 201
DCL                  : 9
DIVIDE               : 119 144
DO                   : 155 156
DOWN                 : 165 166 171
ELSE                 : 94 152
ELSIF                : 95 96 153 154
END                  : 196 197 198 199
EQ                   : 103
EQUALS               : 14 21 22 27 140 141 142 143 144 145 146 163 164 165 166
EXIT                 : 180
FALSE                : 79
FI                   : 90 91 147 148
FOR                  : 160
GEQ                  : 106
GT                   : 105
ICONST               : 78
ID                   : 17
IF                   : 90 91 147 148
IN                   : 109 170 171
INT                  : 36
LAND                 : 115 146
LBRACKET             : 45 46 59 61 64 67 84 85
LENGTH               : 192
LEQ                  : 108
LOC                  : 204 206
LOWER                : 191
LPAREN               : 39 40 87 175 176 185 186 196 197 198 199 205 206
LT                   : 107
MINUS                : 114 123 142
MODULO               : 120 145
NE                   : 104
NOT                  : 124
NULL                 : 82
NUM                  : 189
OD                   : 155 156
OR                   : 102
PLUS                 : 113 141
PRINT                : 194
PROC                 : 196 197 198 199
RBRACKET             : 45 46 59 61 64 67 84 85
READ                 : 193
REF                  : 42
RESULT               : 183
RETURN               : 181 182
RETURNS              : 205 206
RPAREN               : 39 40 87 175 176 185 186 196 197 198 199 205 206
SCONST               : 83
SEMI                 : 9 18 24 129 130 156 195 196 197 198 199
SYN                  : 18
THEN                 : 93 149
TIMES                : 118 143
TO                   : 169
TRUE                 : 80
TYPE                 : 24
UPPER                : 190
WHILE                : 172
error                : 

Nonterminals, with rules where they appear

action               : 129 130
action_statement     : 8 150 151
action_statement_list : 149 151 152 155 156
arithmetic_additive_operator : 111
arithmetic_multiplicative_operator : 117
array_element        : 53
array_location       : 64 67
array_mode           : 44
array_primitive_value : 84 85
array_slice          : 54
assigning_operator   : 139
assignment_action    : 132
boolean_expression   : 90 91 95 96 147 148 153 154 172
boolean_literal      : 74
boolean_mode         : 33
bracketed_action     : 131
builtin_call         : 174
builtin_name         : 185 186
call_action          : 55 133
character_literal    : 75
character_mode       : 34
character_string_literal : 77
composite_mode       : 31
conditional_expression : 89
constant_expression  : 21 22
control_part         : 156
declaration          : 10 11
declaration_list     : 9 11
declaration_statement : 4
dereferenced_reference : 52
discrete_mode        : 29 40 49 170 171
discrete_range_mode  : 35
do_action            : 138
else_clause          : 148 154
else_expression      : 90 91
elsif_expression     : 91 96
empty_literal        : 76
end_value            : 163 164 165 166
exit_action          : 134
expression           : 14 23 41 41 60 62 63 65 66 67 67 85 85 87 92 93 94 139 167 168 169 179 184
expression_list      : 64 66 84
for_control          : 157 158
formal_parameter     : 200 201
formal_parameter_list : 197 199 201
identifier           : 15 16 28 39 51 59 61 130 163 164 165 166 170 171 175 176 180 195
identifier_list      : 12 13 16 21 22 27 202
if_action            : 137
index_mode           : 47 48
initialization       : 13
integer_literal      : 73
integer_mode         : 32
iteration            : 160
left_element         : 61
list_index_mode      : 46 48
literal              : 45 69
literal_range        : 39 40 50
location             : 58 68 125 128 139
membership_operator  : 100
mode                 : 12 13 21 27 42 46 203 204 205 206
mode_definition      : 25 26
monadic_operator     : 122
newmode_list         : 24 26
newmode_statement    : 6
operand0             : 88 98
operand1             : 97 98 111 112
operand2             : 110 111 112 117
operand3             : 116 117
operand4             : 121 122
operator1            : 98
parameter            : 177 178
parameter_list       : 176 178 186
parameter_spec       : 202
parenthesized_expression : 72
primitive_value      : 86 127
procedure_call       : 173
procedure_definition : 195
procedure_statement  : 7
program              : 0
range_enumeration    : 162
reference_mode       : 30
referenced_location  : 126
relational_operator  : 99
result               : 182 183
result_action        : 136
result_spec          : 198 199
return_action        : 135
right_element        : 61
start_element        : 59
start_value          : 163 164 165 166
statement            : 2 3
statement_list       : 1 3 196 197 198 199
step_enumeration     : 161
step_value           : 164 166
string_concatenation_operator : 112
string_element       : 57
string_mode          : 43
string_slice         : 56
synonym_definition   : 19 20
synonym_list         : 18 20
synonym_statement    : 5
then_clause          : 147 148 153 154
then_expression      : 90 91 95 96
value_array_element  : 70
value_array_slice    : 71
while_control        : 158 159

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    program                        shift and go to state 14
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 1

    (139) assignment_action -> location . assigning_operator expression
    (58) dereferenced_reference -> location . ARROW
    (68) array_location -> location .
    (140) assigning_operator -> . EQUALS
    (141) assigning_operator -> . PLUS EQUALS
    (142) assigning_operator -> . MINUS EQUALS
    (143) assigning_operator -> . TIMES EQUALS
    (144) assigning_operator -> . DIVIDE EQUALS
    (145) assigning_operator -> . MODULO EQUALS
    (146) assigning_operator -> . LAND EQUALS

    ARROW           shift and go to state 49
    LBRACKET        reduce using rule 68 (array_location -> location .)
    EQUALS          shift and go to state 46
    PLUS            shift and go to state 48
    MINUS           shift and go to state 51
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 54
    LAND            shift and go to state 52

    assigning_operator             shift and go to state 53

state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement                      shift and go to state 55
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 3

    (2) statement_list -> statement .

    END             reduce using rule 2 (statement_list -> statement .)
    DCL             reduce using rule 2 (statement_list -> statement .)
    SYN             reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    EXIT            reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    RESULT          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    DO              reduce using rule 2 (statement_list -> statement .)
    ABS             reduce using rule 2 (statement_list -> statement .)
    ASC             reduce using rule 2 (statement_list -> statement .)
    NUM             reduce using rule 2 (statement_list -> statement .)
    UPPER           reduce using rule 2 (statement_list -> statement .)
    LOWER           reduce using rule 2 (statement_list -> statement .)
    LENGTH          reduce using rule 2 (statement_list -> statement .)
    READ            reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 4

    (185) builtin_call -> builtin_name . LPAREN RPAREN
    (186) builtin_call -> builtin_name . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 56


state 5

    (187) builtin_name -> ABS .

    LPAREN          reduce using rule 187 (builtin_name -> ABS .)


state 6

    (192) builtin_name -> LENGTH .

    LPAREN          reduce using rule 192 (builtin_name -> LENGTH .)


state 7

    (53) location -> array_element .

    ARROW           reduce using rule 53 (location -> array_element .)
    TIMES           reduce using rule 53 (location -> array_element .)
    DIVIDE          reduce using rule 53 (location -> array_element .)
    MODULO          reduce using rule 53 (location -> array_element .)
    PLUS            reduce using rule 53 (location -> array_element .)
    MINUS           reduce using rule 53 (location -> array_element .)
    LAND            reduce using rule 53 (location -> array_element .)
    AND             reduce using rule 53 (location -> array_element .)
    OR              reduce using rule 53 (location -> array_element .)
    EQ              reduce using rule 53 (location -> array_element .)
    NE              reduce using rule 53 (location -> array_element .)
    GT              reduce using rule 53 (location -> array_element .)
    GEQ             reduce using rule 53 (location -> array_element .)
    LT              reduce using rule 53 (location -> array_element .)
    LEQ             reduce using rule 53 (location -> array_element .)
    IN              reduce using rule 53 (location -> array_element .)
    RPAREN          reduce using rule 53 (location -> array_element .)
    COMMA           reduce using rule 53 (location -> array_element .)
    LBRACKET        reduce using rule 53 (location -> array_element .)
    THEN            reduce using rule 53 (location -> array_element .)
    SEMI            reduce using rule 53 (location -> array_element .)
    COLON           reduce using rule 53 (location -> array_element .)
    RBRACKET        reduce using rule 53 (location -> array_element .)
    DOWN            reduce using rule 53 (location -> array_element .)
    TO              reduce using rule 53 (location -> array_element .)
    BY              reduce using rule 53 (location -> array_element .)
    ELSE            reduce using rule 53 (location -> array_element .)
    ELSIF           reduce using rule 53 (location -> array_element .)
    FI              reduce using rule 53 (location -> array_element .)
    WHILE           reduce using rule 53 (location -> array_element .)
    EQUALS          reduce using rule 53 (location -> array_element .)


state 8

    (135) action -> return_action .

    SEMI            reduce using rule 135 (action -> return_action .)


state 9

    (17) identifier -> ID .

    COLON           reduce using rule 17 (identifier -> ID .)
    LPAREN          reduce using rule 17 (identifier -> ID .)
    LBRACKET        reduce using rule 17 (identifier -> ID .)
    ARROW           reduce using rule 17 (identifier -> ID .)
    EQUALS          reduce using rule 17 (identifier -> ID .)
    PLUS            reduce using rule 17 (identifier -> ID .)
    MINUS           reduce using rule 17 (identifier -> ID .)
    TIMES           reduce using rule 17 (identifier -> ID .)
    DIVIDE          reduce using rule 17 (identifier -> ID .)
    MODULO          reduce using rule 17 (identifier -> ID .)
    LAND            reduce using rule 17 (identifier -> ID .)
    AND             reduce using rule 17 (identifier -> ID .)
    OR              reduce using rule 17 (identifier -> ID .)
    EQ              reduce using rule 17 (identifier -> ID .)
    NE              reduce using rule 17 (identifier -> ID .)
    GT              reduce using rule 17 (identifier -> ID .)
    GEQ             reduce using rule 17 (identifier -> ID .)
    LT              reduce using rule 17 (identifier -> ID .)
    LEQ             reduce using rule 17 (identifier -> ID .)
    IN              reduce using rule 17 (identifier -> ID .)
    FI              reduce using rule 17 (identifier -> ID .)
    THEN            reduce using rule 17 (identifier -> ID .)
    SEMI            reduce using rule 17 (identifier -> ID .)
    RPAREN          reduce using rule 17 (identifier -> ID .)
    COMMA           reduce using rule 17 (identifier -> ID .)
    RBRACKET        reduce using rule 17 (identifier -> ID .)
    DOWN            reduce using rule 17 (identifier -> ID .)
    TO              reduce using rule 17 (identifier -> ID .)
    BY              reduce using rule 17 (identifier -> ID .)
    ELSE            reduce using rule 17 (identifier -> ID .)
    ELSIF           reduce using rule 17 (identifier -> ID .)
    WHILE           reduce using rule 17 (identifier -> ID .)
    ID              reduce using rule 17 (identifier -> ID .)
    REF             reduce using rule 17 (identifier -> ID .)
    INT             reduce using rule 17 (identifier -> ID .)
    BOOL            reduce using rule 17 (identifier -> ID .)
    CHAR            reduce using rule 17 (identifier -> ID .)
    CHARS           reduce using rule 17 (identifier -> ID .)
    ARRAY           reduce using rule 17 (identifier -> ID .)
    LOC             reduce using rule 17 (identifier -> ID .)


state 10

    (155) do_action -> DO . action_statement_list OD
    (156) do_action -> DO . control_part SEMI action_statement_list OD
    (150) action_statement_list -> . action_statement
    (151) action_statement_list -> . action_statement_list action_statement
    (157) control_part -> . for_control
    (158) control_part -> . for_control while_control
    (159) control_part -> . while_control
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (160) for_control -> . FOR iteration
    (172) while_control -> . WHILE boolean_expression
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    FOR             shift and go to state 59
    WHILE           shift and go to state 62
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    while_control                  shift and go to state 57
    location                       shift and go to state 1
    action_statement_list          shift and go to state 58
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    for_control                    shift and go to state 60
    return_action                  shift and go to state 8
    array_element                  shift and go to state 7
    if_action                      shift and go to state 35
    action_statement               shift and go to state 61
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    identifier                     shift and go to state 64
    bracketed_action               shift and go to state 43
    control_part                   shift and go to state 63

state 11

    (8) statement -> action_statement .

    END             reduce using rule 8 (statement -> action_statement .)
    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    ABS             reduce using rule 8 (statement -> action_statement .)
    ASC             reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)


state 12

    (174) call_action -> builtin_call .

    ARROW           reduce using rule 174 (call_action -> builtin_call .)
    TIMES           reduce using rule 174 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 174 (call_action -> builtin_call .)
    MODULO          reduce using rule 174 (call_action -> builtin_call .)
    PLUS            reduce using rule 174 (call_action -> builtin_call .)
    MINUS           reduce using rule 174 (call_action -> builtin_call .)
    LAND            reduce using rule 174 (call_action -> builtin_call .)
    AND             reduce using rule 174 (call_action -> builtin_call .)
    OR              reduce using rule 174 (call_action -> builtin_call .)
    EQ              reduce using rule 174 (call_action -> builtin_call .)
    NE              reduce using rule 174 (call_action -> builtin_call .)
    GT              reduce using rule 174 (call_action -> builtin_call .)
    GEQ             reduce using rule 174 (call_action -> builtin_call .)
    LT              reduce using rule 174 (call_action -> builtin_call .)
    LEQ             reduce using rule 174 (call_action -> builtin_call .)
    IN              reduce using rule 174 (call_action -> builtin_call .)
    WHILE           reduce using rule 174 (call_action -> builtin_call .)
    SEMI            reduce using rule 174 (call_action -> builtin_call .)
    LBRACKET        reduce using rule 174 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 174 (call_action -> builtin_call .)
    EQUALS          reduce using rule 174 (call_action -> builtin_call .)
    THEN            reduce using rule 174 (call_action -> builtin_call .)
    RPAREN          reduce using rule 174 (call_action -> builtin_call .)
    COMMA           reduce using rule 174 (call_action -> builtin_call .)
    COLON           reduce using rule 174 (call_action -> builtin_call .)
    DOWN            reduce using rule 174 (call_action -> builtin_call .)
    TO              reduce using rule 174 (call_action -> builtin_call .)
    BY              reduce using rule 174 (call_action -> builtin_call .)
    ELSE            reduce using rule 174 (call_action -> builtin_call .)
    ELSIF           reduce using rule 174 (call_action -> builtin_call .)
    FI              reduce using rule 174 (call_action -> builtin_call .)


state 13

    (7) statement -> procedure_statement .

    END             reduce using rule 7 (statement -> procedure_statement .)
    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    RETURN          reduce using rule 7 (statement -> procedure_statement .)
    RESULT          reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    DO              reduce using rule 7 (statement -> procedure_statement .)
    ABS             reduce using rule 7 (statement -> procedure_statement .)
    ASC             reduce using rule 7 (statement -> procedure_statement .)
    NUM             reduce using rule 7 (statement -> procedure_statement .)
    UPPER           reduce using rule 7 (statement -> procedure_statement .)
    LOWER           reduce using rule 7 (statement -> procedure_statement .)
    LENGTH          reduce using rule 7 (statement -> procedure_statement .)
    READ            reduce using rule 7 (statement -> procedure_statement .)
    PRINT           reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)


state 14

    (0) S' -> program .



state 15

    (193) builtin_name -> READ .

    LPAREN          reduce using rule 193 (builtin_name -> READ .)


state 16

    (134) action -> exit_action .

    SEMI            reduce using rule 134 (action -> exit_action .)


state 17

    (129) action_statement -> action . SEMI

    SEMI            shift and go to state 65


state 18

    (52) location -> dereferenced_reference .

    ARROW           reduce using rule 52 (location -> dereferenced_reference .)
    TIMES           reduce using rule 52 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 52 (location -> dereferenced_reference .)
    MODULO          reduce using rule 52 (location -> dereferenced_reference .)
    PLUS            reduce using rule 52 (location -> dereferenced_reference .)
    MINUS           reduce using rule 52 (location -> dereferenced_reference .)
    LAND            reduce using rule 52 (location -> dereferenced_reference .)
    AND             reduce using rule 52 (location -> dereferenced_reference .)
    OR              reduce using rule 52 (location -> dereferenced_reference .)
    EQ              reduce using rule 52 (location -> dereferenced_reference .)
    NE              reduce using rule 52 (location -> dereferenced_reference .)
    GT              reduce using rule 52 (location -> dereferenced_reference .)
    GEQ             reduce using rule 52 (location -> dereferenced_reference .)
    LT              reduce using rule 52 (location -> dereferenced_reference .)
    LEQ             reduce using rule 52 (location -> dereferenced_reference .)
    IN              reduce using rule 52 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 52 (location -> dereferenced_reference .)
    COMMA           reduce using rule 52 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 52 (location -> dereferenced_reference .)
    THEN            reduce using rule 52 (location -> dereferenced_reference .)
    SEMI            reduce using rule 52 (location -> dereferenced_reference .)
    COLON           reduce using rule 52 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 52 (location -> dereferenced_reference .)
    DOWN            reduce using rule 52 (location -> dereferenced_reference .)
    TO              reduce using rule 52 (location -> dereferenced_reference .)
    BY              reduce using rule 52 (location -> dereferenced_reference .)
    ELSE            reduce using rule 52 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 52 (location -> dereferenced_reference .)
    FI              reduce using rule 52 (location -> dereferenced_reference .)
    WHILE           reduce using rule 52 (location -> dereferenced_reference .)
    EQUALS          reduce using rule 52 (location -> dereferenced_reference .)


state 19

    (5) statement -> synonym_statement .

    END             reduce using rule 5 (statement -> synonym_statement .)
    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    RETURN          reduce using rule 5 (statement -> synonym_statement .)
    RESULT          reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    DO              reduce using rule 5 (statement -> synonym_statement .)
    ABS             reduce using rule 5 (statement -> synonym_statement .)
    ASC             reduce using rule 5 (statement -> synonym_statement .)
    NUM             reduce using rule 5 (statement -> synonym_statement .)
    UPPER           reduce using rule 5 (statement -> synonym_statement .)
    LOWER           reduce using rule 5 (statement -> synonym_statement .)
    LENGTH          reduce using rule 5 (statement -> synonym_statement .)
    READ            reduce using rule 5 (statement -> synonym_statement .)
    PRINT           reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)


state 20

    (173) call_action -> procedure_call .

    ARROW           reduce using rule 173 (call_action -> procedure_call .)
    TIMES           reduce using rule 173 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 173 (call_action -> procedure_call .)
    MODULO          reduce using rule 173 (call_action -> procedure_call .)
    PLUS            reduce using rule 173 (call_action -> procedure_call .)
    MINUS           reduce using rule 173 (call_action -> procedure_call .)
    LAND            reduce using rule 173 (call_action -> procedure_call .)
    AND             reduce using rule 173 (call_action -> procedure_call .)
    OR              reduce using rule 173 (call_action -> procedure_call .)
    EQ              reduce using rule 173 (call_action -> procedure_call .)
    NE              reduce using rule 173 (call_action -> procedure_call .)
    GT              reduce using rule 173 (call_action -> procedure_call .)
    GEQ             reduce using rule 173 (call_action -> procedure_call .)
    LT              reduce using rule 173 (call_action -> procedure_call .)
    LEQ             reduce using rule 173 (call_action -> procedure_call .)
    IN              reduce using rule 173 (call_action -> procedure_call .)
    WHILE           reduce using rule 173 (call_action -> procedure_call .)
    SEMI            reduce using rule 173 (call_action -> procedure_call .)
    LBRACKET        reduce using rule 173 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 173 (call_action -> procedure_call .)
    EQUALS          reduce using rule 173 (call_action -> procedure_call .)
    THEN            reduce using rule 173 (call_action -> procedure_call .)
    RPAREN          reduce using rule 173 (call_action -> procedure_call .)
    COMMA           reduce using rule 173 (call_action -> procedure_call .)
    COLON           reduce using rule 173 (call_action -> procedure_call .)
    DOWN            reduce using rule 173 (call_action -> procedure_call .)
    TO              reduce using rule 173 (call_action -> procedure_call .)
    BY              reduce using rule 173 (call_action -> procedure_call .)
    ELSE            reduce using rule 173 (call_action -> procedure_call .)
    ELSIF           reduce using rule 173 (call_action -> procedure_call .)
    FI              reduce using rule 173 (call_action -> procedure_call .)


state 21

    (4) statement -> declaration_statement .

    END             reduce using rule 4 (statement -> declaration_statement .)
    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    RETURN          reduce using rule 4 (statement -> declaration_statement .)
    RESULT          reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    DO              reduce using rule 4 (statement -> declaration_statement .)
    ABS             reduce using rule 4 (statement -> declaration_statement .)
    ASC             reduce using rule 4 (statement -> declaration_statement .)
    NUM             reduce using rule 4 (statement -> declaration_statement .)
    UPPER           reduce using rule 4 (statement -> declaration_statement .)
    LOWER           reduce using rule 4 (statement -> declaration_statement .)
    LENGTH          reduce using rule 4 (statement -> declaration_statement .)
    READ            reduce using rule 4 (statement -> declaration_statement .)
    PRINT           reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 22

    (138) bracketed_action -> do_action .

    SEMI            reduce using rule 138 (bracketed_action -> do_action .)


state 23

    (18) synonym_statement -> SYN . synonym_list SEMI
    (19) synonym_list -> . synonym_definition
    (20) synonym_list -> . synonym_list COMMA synonym_definition
    (21) synonym_definition -> . identifier_list mode EQUALS constant_expression
    (22) synonym_definition -> . identifier_list EQUALS constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 9

    identifier_list                shift and go to state 66
    synonym_list                   shift and go to state 67
    synonym_definition             shift and go to state 68
    identifier                     shift and go to state 69

state 24

    (57) location -> string_element .

    ARROW           reduce using rule 57 (location -> string_element .)
    TIMES           reduce using rule 57 (location -> string_element .)
    DIVIDE          reduce using rule 57 (location -> string_element .)
    MODULO          reduce using rule 57 (location -> string_element .)
    PLUS            reduce using rule 57 (location -> string_element .)
    MINUS           reduce using rule 57 (location -> string_element .)
    LAND            reduce using rule 57 (location -> string_element .)
    AND             reduce using rule 57 (location -> string_element .)
    OR              reduce using rule 57 (location -> string_element .)
    EQ              reduce using rule 57 (location -> string_element .)
    NE              reduce using rule 57 (location -> string_element .)
    GT              reduce using rule 57 (location -> string_element .)
    GEQ             reduce using rule 57 (location -> string_element .)
    LT              reduce using rule 57 (location -> string_element .)
    LEQ             reduce using rule 57 (location -> string_element .)
    IN              reduce using rule 57 (location -> string_element .)
    RPAREN          reduce using rule 57 (location -> string_element .)
    COMMA           reduce using rule 57 (location -> string_element .)
    LBRACKET        reduce using rule 57 (location -> string_element .)
    THEN            reduce using rule 57 (location -> string_element .)
    SEMI            reduce using rule 57 (location -> string_element .)
    COLON           reduce using rule 57 (location -> string_element .)
    RBRACKET        reduce using rule 57 (location -> string_element .)
    DOWN            reduce using rule 57 (location -> string_element .)
    TO              reduce using rule 57 (location -> string_element .)
    BY              reduce using rule 57 (location -> string_element .)
    ELSE            reduce using rule 57 (location -> string_element .)
    ELSIF           reduce using rule 57 (location -> string_element .)
    FI              reduce using rule 57 (location -> string_element .)
    WHILE           reduce using rule 57 (location -> string_element .)
    EQUALS          reduce using rule 57 (location -> string_element .)


state 25

    (180) exit_action -> EXIT . identifier
    (17) identifier -> . ID

    ID              shift and go to state 9

    identifier                     shift and go to state 70

state 26

    (64) array_element -> array_location . LBRACKET expression_list RBRACKET
    (67) array_slice -> array_location . LBRACKET expression COLON expression RBRACKET

    LBRACKET        shift and go to state 71


state 27

    (136) action -> result_action .

    SEMI            reduce using rule 136 (action -> result_action .)


state 28

    (133) action -> call_action .
    (55) location -> call_action .

    SEMI            reduce using rule 133 (action -> call_action .)
    ARROW           reduce using rule 55 (location -> call_action .)
    EQUALS          reduce using rule 55 (location -> call_action .)
    PLUS            reduce using rule 55 (location -> call_action .)
    MINUS           reduce using rule 55 (location -> call_action .)
    TIMES           reduce using rule 55 (location -> call_action .)
    DIVIDE          reduce using rule 55 (location -> call_action .)
    MODULO          reduce using rule 55 (location -> call_action .)
    LAND            reduce using rule 55 (location -> call_action .)
    LBRACKET        reduce using rule 55 (location -> call_action .)


state 29

    (189) builtin_name -> NUM .

    LPAREN          reduce using rule 189 (builtin_name -> NUM .)


state 30

    (56) location -> string_slice .

    ARROW           reduce using rule 56 (location -> string_slice .)
    TIMES           reduce using rule 56 (location -> string_slice .)
    DIVIDE          reduce using rule 56 (location -> string_slice .)
    MODULO          reduce using rule 56 (location -> string_slice .)
    PLUS            reduce using rule 56 (location -> string_slice .)
    MINUS           reduce using rule 56 (location -> string_slice .)
    LAND            reduce using rule 56 (location -> string_slice .)
    AND             reduce using rule 56 (location -> string_slice .)
    OR              reduce using rule 56 (location -> string_slice .)
    EQ              reduce using rule 56 (location -> string_slice .)
    NE              reduce using rule 56 (location -> string_slice .)
    GT              reduce using rule 56 (location -> string_slice .)
    GEQ             reduce using rule 56 (location -> string_slice .)
    LT              reduce using rule 56 (location -> string_slice .)
    LEQ             reduce using rule 56 (location -> string_slice .)
    IN              reduce using rule 56 (location -> string_slice .)
    RPAREN          reduce using rule 56 (location -> string_slice .)
    COMMA           reduce using rule 56 (location -> string_slice .)
    LBRACKET        reduce using rule 56 (location -> string_slice .)
    THEN            reduce using rule 56 (location -> string_slice .)
    SEMI            reduce using rule 56 (location -> string_slice .)
    COLON           reduce using rule 56 (location -> string_slice .)
    RBRACKET        reduce using rule 56 (location -> string_slice .)
    DOWN            reduce using rule 56 (location -> string_slice .)
    TO              reduce using rule 56 (location -> string_slice .)
    BY              reduce using rule 56 (location -> string_slice .)
    ELSE            reduce using rule 56 (location -> string_slice .)
    ELSIF           reduce using rule 56 (location -> string_slice .)
    FI              reduce using rule 56 (location -> string_slice .)
    WHILE           reduce using rule 56 (location -> string_slice .)
    EQUALS          reduce using rule 56 (location -> string_slice .)


state 31

    (9) declaration_statement -> DCL . declaration_list SEMI
    (10) declaration_list -> . declaration
    (11) declaration_list -> . declaration_list COMMA declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 9

    identifier_list                shift and go to state 72
    declaration                    shift and go to state 74
    declaration_list               shift and go to state 73
    identifier                     shift and go to state 69

state 32

    (147) if_action -> IF . boolean_expression then_clause FI
    (148) if_action -> IF . boolean_expression then_clause else_clause FI
    (92) boolean_expression -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    boolean_expression             shift and go to state 80
    operand0                       shift and go to state 81
    array_primitive_value          shift and go to state 82
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 103
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 33

    (132) action -> assignment_action .

    SEMI            reduce using rule 132 (action -> assignment_action .)


state 34

    (191) builtin_name -> LOWER .

    LPAREN          reduce using rule 191 (builtin_name -> LOWER .)


state 35

    (137) bracketed_action -> if_action .

    SEMI            reduce using rule 137 (bracketed_action -> if_action .)


state 36

    (181) return_action -> RETURN .
    (182) return_action -> RETURN . result
    (184) result -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    SEMI            reduce using rule 181 (return_action -> RETURN .)
    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    result                         shift and go to state 110
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    value_array_element            shift and go to state 85
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 111
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 37

    (194) builtin_name -> PRINT .

    LPAREN          reduce using rule 194 (builtin_name -> PRINT .)


state 38

    (6) statement -> newmode_statement .

    END             reduce using rule 6 (statement -> newmode_statement .)
    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    RETURN          reduce using rule 6 (statement -> newmode_statement .)
    RESULT          reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    DO              reduce using rule 6 (statement -> newmode_statement .)
    ABS             reduce using rule 6 (statement -> newmode_statement .)
    ASC             reduce using rule 6 (statement -> newmode_statement .)
    NUM             reduce using rule 6 (statement -> newmode_statement .)
    UPPER           reduce using rule 6 (statement -> newmode_statement .)
    LOWER           reduce using rule 6 (statement -> newmode_statement .)
    LENGTH          reduce using rule 6 (statement -> newmode_statement .)
    READ            reduce using rule 6 (statement -> newmode_statement .)
    PRINT           reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)


state 39

    (54) location -> array_slice .

    ARROW           reduce using rule 54 (location -> array_slice .)
    TIMES           reduce using rule 54 (location -> array_slice .)
    DIVIDE          reduce using rule 54 (location -> array_slice .)
    MODULO          reduce using rule 54 (location -> array_slice .)
    PLUS            reduce using rule 54 (location -> array_slice .)
    MINUS           reduce using rule 54 (location -> array_slice .)
    LAND            reduce using rule 54 (location -> array_slice .)
    AND             reduce using rule 54 (location -> array_slice .)
    OR              reduce using rule 54 (location -> array_slice .)
    EQ              reduce using rule 54 (location -> array_slice .)
    NE              reduce using rule 54 (location -> array_slice .)
    GT              reduce using rule 54 (location -> array_slice .)
    GEQ             reduce using rule 54 (location -> array_slice .)
    LT              reduce using rule 54 (location -> array_slice .)
    LEQ             reduce using rule 54 (location -> array_slice .)
    IN              reduce using rule 54 (location -> array_slice .)
    RPAREN          reduce using rule 54 (location -> array_slice .)
    COMMA           reduce using rule 54 (location -> array_slice .)
    LBRACKET        reduce using rule 54 (location -> array_slice .)
    THEN            reduce using rule 54 (location -> array_slice .)
    SEMI            reduce using rule 54 (location -> array_slice .)
    COLON           reduce using rule 54 (location -> array_slice .)
    RBRACKET        reduce using rule 54 (location -> array_slice .)
    DOWN            reduce using rule 54 (location -> array_slice .)
    TO              reduce using rule 54 (location -> array_slice .)
    BY              reduce using rule 54 (location -> array_slice .)
    ELSE            reduce using rule 54 (location -> array_slice .)
    ELSIF           reduce using rule 54 (location -> array_slice .)
    FI              reduce using rule 54 (location -> array_slice .)
    WHILE           reduce using rule 54 (location -> array_slice .)
    EQUALS          reduce using rule 54 (location -> array_slice .)


state 40

    (24) newmode_statement -> TYPE . newmode_list SEMI
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . newmode_list COMMA mode_definition
    (27) mode_definition -> . identifier_list EQUALS mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 9

    mode_definition                shift and go to state 113
    identifier                     shift and go to state 69
    identifier_list                shift and go to state 112
    newmode_list                   shift and go to state 114

state 41

    (183) result_action -> RESULT . result
    (184) result -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    result                         shift and go to state 115
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    value_array_element            shift and go to state 85
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 111
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 42

    (190) builtin_name -> UPPER .

    LPAREN          reduce using rule 190 (builtin_name -> UPPER .)


state 43

    (131) action -> bracketed_action .

    SEMI            reduce using rule 131 (action -> bracketed_action .)


state 44

    (188) builtin_name -> ASC .

    LPAREN          reduce using rule 188 (builtin_name -> ASC .)


state 45

    (195) procedure_statement -> identifier . COLON procedure_definition SEMI
    (130) action_statement -> identifier . COLON action SEMI
    (51) location -> identifier .
    (175) procedure_call -> identifier . LPAREN RPAREN
    (176) procedure_call -> identifier . LPAREN parameter_list RPAREN
    (61) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> identifier . LBRACKET start_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           shift and go to state 117
    ARROW           reduce using rule 51 (location -> identifier .)
    EQUALS          reduce using rule 51 (location -> identifier .)
    PLUS            reduce using rule 51 (location -> identifier .)
    MINUS           reduce using rule 51 (location -> identifier .)
    TIMES           reduce using rule 51 (location -> identifier .)
    DIVIDE          reduce using rule 51 (location -> identifier .)
    MODULO          reduce using rule 51 (location -> identifier .)
    LAND            reduce using rule 51 (location -> identifier .)
    LPAREN          shift and go to state 118
    LBRACKET        shift and go to state 116

  ! LBRACKET        [ reduce using rule 51 (location -> identifier .) ]


state 46

    (140) assigning_operator -> EQUALS .

    IF              reduce using rule 140 (assigning_operator -> EQUALS .)
    MINUS           reduce using rule 140 (assigning_operator -> EQUALS .)
    NOT             reduce using rule 140 (assigning_operator -> EQUALS .)
    ARROW           reduce using rule 140 (assigning_operator -> EQUALS .)
    ID              reduce using rule 140 (assigning_operator -> EQUALS .)
    LPAREN          reduce using rule 140 (assigning_operator -> EQUALS .)
    ICONST          reduce using rule 140 (assigning_operator -> EQUALS .)
    FALSE           reduce using rule 140 (assigning_operator -> EQUALS .)
    TRUE            reduce using rule 140 (assigning_operator -> EQUALS .)
    CCONST          reduce using rule 140 (assigning_operator -> EQUALS .)
    NULL            reduce using rule 140 (assigning_operator -> EQUALS .)
    SCONST          reduce using rule 140 (assigning_operator -> EQUALS .)
    ABS             reduce using rule 140 (assigning_operator -> EQUALS .)
    ASC             reduce using rule 140 (assigning_operator -> EQUALS .)
    NUM             reduce using rule 140 (assigning_operator -> EQUALS .)
    UPPER           reduce using rule 140 (assigning_operator -> EQUALS .)
    LOWER           reduce using rule 140 (assigning_operator -> EQUALS .)
    LENGTH          reduce using rule 140 (assigning_operator -> EQUALS .)
    READ            reduce using rule 140 (assigning_operator -> EQUALS .)
    PRINT           reduce using rule 140 (assigning_operator -> EQUALS .)


state 47

    (143) assigning_operator -> TIMES . EQUALS

    EQUALS          shift and go to state 119


state 48

    (141) assigning_operator -> PLUS . EQUALS

    EQUALS          shift and go to state 120


state 49

    (58) dereferenced_reference -> location ARROW .

    ARROW           reduce using rule 58 (dereferenced_reference -> location ARROW .)
    EQUALS          reduce using rule 58 (dereferenced_reference -> location ARROW .)
    PLUS            reduce using rule 58 (dereferenced_reference -> location ARROW .)
    MINUS           reduce using rule 58 (dereferenced_reference -> location ARROW .)
    TIMES           reduce using rule 58 (dereferenced_reference -> location ARROW .)
    DIVIDE          reduce using rule 58 (dereferenced_reference -> location ARROW .)
    MODULO          reduce using rule 58 (dereferenced_reference -> location ARROW .)
    LAND            reduce using rule 58 (dereferenced_reference -> location ARROW .)
    LBRACKET        reduce using rule 58 (dereferenced_reference -> location ARROW .)
    AND             reduce using rule 58 (dereferenced_reference -> location ARROW .)
    OR              reduce using rule 58 (dereferenced_reference -> location ARROW .)
    EQ              reduce using rule 58 (dereferenced_reference -> location ARROW .)
    NE              reduce using rule 58 (dereferenced_reference -> location ARROW .)
    GT              reduce using rule 58 (dereferenced_reference -> location ARROW .)
    GEQ             reduce using rule 58 (dereferenced_reference -> location ARROW .)
    LT              reduce using rule 58 (dereferenced_reference -> location ARROW .)
    LEQ             reduce using rule 58 (dereferenced_reference -> location ARROW .)
    IN              reduce using rule 58 (dereferenced_reference -> location ARROW .)
    SEMI            reduce using rule 58 (dereferenced_reference -> location ARROW .)
    COMMA           reduce using rule 58 (dereferenced_reference -> location ARROW .)
    RPAREN          reduce using rule 58 (dereferenced_reference -> location ARROW .)
    THEN            reduce using rule 58 (dereferenced_reference -> location ARROW .)
    COLON           reduce using rule 58 (dereferenced_reference -> location ARROW .)
    RBRACKET        reduce using rule 58 (dereferenced_reference -> location ARROW .)
    DOWN            reduce using rule 58 (dereferenced_reference -> location ARROW .)
    TO              reduce using rule 58 (dereferenced_reference -> location ARROW .)
    BY              reduce using rule 58 (dereferenced_reference -> location ARROW .)
    ELSE            reduce using rule 58 (dereferenced_reference -> location ARROW .)
    ELSIF           reduce using rule 58 (dereferenced_reference -> location ARROW .)
    FI              reduce using rule 58 (dereferenced_reference -> location ARROW .)
    WHILE           reduce using rule 58 (dereferenced_reference -> location ARROW .)


state 50

    (144) assigning_operator -> DIVIDE . EQUALS

    EQUALS          shift and go to state 121


state 51

    (142) assigning_operator -> MINUS . EQUALS

    EQUALS          shift and go to state 122


state 52

    (146) assigning_operator -> LAND . EQUALS

    EQUALS          shift and go to state 123


state 53

    (139) assignment_action -> location assigning_operator . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 124
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 54

    (145) assigning_operator -> MODULO . EQUALS

    EQUALS          shift and go to state 125


state 55

    (3) statement_list -> statement_list statement .

    END             reduce using rule 3 (statement_list -> statement_list statement .)
    DCL             reduce using rule 3 (statement_list -> statement_list statement .)
    SYN             reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    RESULT          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    DO              reduce using rule 3 (statement_list -> statement_list statement .)
    ABS             reduce using rule 3 (statement_list -> statement_list statement .)
    ASC             reduce using rule 3 (statement_list -> statement_list statement .)
    NUM             reduce using rule 3 (statement_list -> statement_list statement .)
    UPPER           reduce using rule 3 (statement_list -> statement_list statement .)
    LOWER           reduce using rule 3 (statement_list -> statement_list statement .)
    LENGTH          reduce using rule 3 (statement_list -> statement_list statement .)
    READ            reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 56

    (185) builtin_call -> builtin_name LPAREN . RPAREN
    (186) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (177) parameter_list -> . parameter
    (178) parameter_list -> . parameter_list COMMA parameter
    (179) parameter -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    RPAREN          shift and go to state 128
    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    builtin_name                   shift and go to state 4
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    literal                        shift and go to state 84
    value_array_element            shift and go to state 85
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    parameter_list                 shift and go to state 127
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    array_location                 shift and go to state 26
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    character_literal              shift and go to state 96
    operand4                       shift and go to state 102
    expression                     shift and go to state 129
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    parameter                      shift and go to state 126
    identifier                     shift and go to state 109

state 57

    (159) control_part -> while_control .

    SEMI            reduce using rule 159 (control_part -> while_control .)


state 58

    (155) do_action -> DO action_statement_list . OD
    (151) action_statement_list -> action_statement_list . action_statement
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    OD              shift and go to state 131
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 1
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    if_action                      shift and go to state 35
    action_statement               shift and go to state 130
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    bracketed_action               shift and go to state 43
    identifier                     shift and go to state 64

state 59

    (160) for_control -> FOR . iteration
    (161) iteration -> . step_enumeration
    (162) iteration -> . range_enumeration
    (163) step_enumeration -> . identifier EQUALS start_value end_value
    (164) step_enumeration -> . identifier EQUALS start_value step_value end_value
    (165) step_enumeration -> . identifier EQUALS start_value DOWN end_value
    (166) step_enumeration -> . identifier EQUALS start_value step_value DOWN end_value
    (170) range_enumeration -> . identifier IN discrete_mode
    (171) range_enumeration -> . identifier DOWN IN discrete_mode
    (17) identifier -> . ID

    ID              shift and go to state 9

    step_enumeration               shift and go to state 134
    iteration                      shift and go to state 133
    range_enumeration              shift and go to state 132
    identifier                     shift and go to state 135

state 60

    (157) control_part -> for_control .
    (158) control_part -> for_control . while_control
    (172) while_control -> . WHILE boolean_expression

    SEMI            reduce using rule 157 (control_part -> for_control .)
    WHILE           shift and go to state 62

    while_control                  shift and go to state 136

state 61

    (150) action_statement_list -> action_statement .

    OD              reduce using rule 150 (action_statement_list -> action_statement .)
    ID              reduce using rule 150 (action_statement_list -> action_statement .)
    EXIT            reduce using rule 150 (action_statement_list -> action_statement .)
    RETURN          reduce using rule 150 (action_statement_list -> action_statement .)
    RESULT          reduce using rule 150 (action_statement_list -> action_statement .)
    IF              reduce using rule 150 (action_statement_list -> action_statement .)
    DO              reduce using rule 150 (action_statement_list -> action_statement .)
    ABS             reduce using rule 150 (action_statement_list -> action_statement .)
    ASC             reduce using rule 150 (action_statement_list -> action_statement .)
    NUM             reduce using rule 150 (action_statement_list -> action_statement .)
    UPPER           reduce using rule 150 (action_statement_list -> action_statement .)
    LOWER           reduce using rule 150 (action_statement_list -> action_statement .)
    LENGTH          reduce using rule 150 (action_statement_list -> action_statement .)
    READ            reduce using rule 150 (action_statement_list -> action_statement .)
    PRINT           reduce using rule 150 (action_statement_list -> action_statement .)
    FI              reduce using rule 150 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 150 (action_statement_list -> action_statement .)
    ELSIF           reduce using rule 150 (action_statement_list -> action_statement .)


state 62

    (172) while_control -> WHILE . boolean_expression
    (92) boolean_expression -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    boolean_expression             shift and go to state 137
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 103
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 63

    (156) do_action -> DO control_part . SEMI action_statement_list OD

    SEMI            shift and go to state 138


state 64

    (130) action_statement -> identifier . COLON action SEMI
    (51) location -> identifier .
    (175) procedure_call -> identifier . LPAREN RPAREN
    (176) procedure_call -> identifier . LPAREN parameter_list RPAREN
    (61) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> identifier . LBRACKET start_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           shift and go to state 139
    ARROW           reduce using rule 51 (location -> identifier .)
    EQUALS          reduce using rule 51 (location -> identifier .)
    PLUS            reduce using rule 51 (location -> identifier .)
    MINUS           reduce using rule 51 (location -> identifier .)
    TIMES           reduce using rule 51 (location -> identifier .)
    DIVIDE          reduce using rule 51 (location -> identifier .)
    MODULO          reduce using rule 51 (location -> identifier .)
    LAND            reduce using rule 51 (location -> identifier .)
    LPAREN          shift and go to state 118
    LBRACKET        shift and go to state 116

  ! LBRACKET        [ reduce using rule 51 (location -> identifier .) ]


state 65

    (129) action_statement -> action SEMI .

    ID              reduce using rule 129 (action_statement -> action SEMI .)
    EXIT            reduce using rule 129 (action_statement -> action SEMI .)
    RETURN          reduce using rule 129 (action_statement -> action SEMI .)
    RESULT          reduce using rule 129 (action_statement -> action SEMI .)
    IF              reduce using rule 129 (action_statement -> action SEMI .)
    DO              reduce using rule 129 (action_statement -> action SEMI .)
    ABS             reduce using rule 129 (action_statement -> action SEMI .)
    ASC             reduce using rule 129 (action_statement -> action SEMI .)
    NUM             reduce using rule 129 (action_statement -> action SEMI .)
    UPPER           reduce using rule 129 (action_statement -> action SEMI .)
    LOWER           reduce using rule 129 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 129 (action_statement -> action SEMI .)
    READ            reduce using rule 129 (action_statement -> action SEMI .)
    PRINT           reduce using rule 129 (action_statement -> action SEMI .)
    FI              reduce using rule 129 (action_statement -> action SEMI .)
    ELSE            reduce using rule 129 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 129 (action_statement -> action SEMI .)
    DCL             reduce using rule 129 (action_statement -> action SEMI .)
    SYN             reduce using rule 129 (action_statement -> action SEMI .)
    TYPE            reduce using rule 129 (action_statement -> action SEMI .)
    $end            reduce using rule 129 (action_statement -> action SEMI .)
    END             reduce using rule 129 (action_statement -> action SEMI .)
    OD              reduce using rule 129 (action_statement -> action SEMI .)


state 66

    (21) synonym_definition -> identifier_list . mode EQUALS constant_expression
    (22) synonym_definition -> identifier_list . EQUALS constant_expression
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    EQUALS          shift and go to state 143
    COMMA           shift and go to state 147
    ID              shift and go to state 9
    REF             shift and go to state 152
    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    CHARS           shift and go to state 150
    ARRAY           shift and go to state 157

    discrete_range_mode            shift and go to state 140
    array_mode                     shift and go to state 141
    composite_mode                 shift and go to state 148
    boolean_mode                   shift and go to state 142
    discrete_mode                  shift and go to state 144
    string_mode                    shift and go to state 145
    character_mode                 shift and go to state 154
    mode                           shift and go to state 146
    integer_mode                   shift and go to state 151
    identifier                     shift and go to state 158
    reference_mode                 shift and go to state 156

state 67

    (18) synonym_statement -> SYN synonym_list . SEMI
    (20) synonym_list -> synonym_list . COMMA synonym_definition

    SEMI            shift and go to state 160
    COMMA           shift and go to state 159


state 68

    (19) synonym_list -> synonym_definition .

    SEMI            reduce using rule 19 (synonym_list -> synonym_definition .)
    COMMA           reduce using rule 19 (synonym_list -> synonym_definition .)


state 69

    (15) identifier_list -> identifier .

    COMMA           reduce using rule 15 (identifier_list -> identifier .)
    ID              reduce using rule 15 (identifier_list -> identifier .)
    REF             reduce using rule 15 (identifier_list -> identifier .)
    INT             reduce using rule 15 (identifier_list -> identifier .)
    BOOL            reduce using rule 15 (identifier_list -> identifier .)
    CHAR            reduce using rule 15 (identifier_list -> identifier .)
    CHARS           reduce using rule 15 (identifier_list -> identifier .)
    ARRAY           reduce using rule 15 (identifier_list -> identifier .)
    EQUALS          reduce using rule 15 (identifier_list -> identifier .)


state 70

    (180) exit_action -> EXIT identifier .

    SEMI            reduce using rule 180 (exit_action -> EXIT identifier .)


state 71

    (64) array_element -> array_location LBRACKET . expression_list RBRACKET
    (67) array_slice -> array_location LBRACKET . expression COLON expression RBRACKET
    (65) expression_list -> . expression
    (66) expression_list -> . expression_list COMMA expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression_list                shift and go to state 162
    expression                     shift and go to state 161
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 72

    (12) declaration -> identifier_list . mode
    (13) declaration -> identifier_list . mode initialization
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    COMMA           shift and go to state 147
    ID              shift and go to state 9
    REF             shift and go to state 152
    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    CHARS           shift and go to state 150
    ARRAY           shift and go to state 157

    discrete_range_mode            shift and go to state 140
    array_mode                     shift and go to state 141
    boolean_mode                   shift and go to state 142
    composite_mode                 shift and go to state 148
    discrete_mode                  shift and go to state 144
    string_mode                    shift and go to state 145
    character_mode                 shift and go to state 154
    mode                           shift and go to state 163
    integer_mode                   shift and go to state 151
    identifier                     shift and go to state 158
    reference_mode                 shift and go to state 156

state 73

    (9) declaration_statement -> DCL declaration_list . SEMI
    (11) declaration_list -> declaration_list . COMMA declaration

    SEMI            shift and go to state 165
    COMMA           shift and go to state 164


state 74

    (10) declaration_list -> declaration .

    SEMI            reduce using rule 10 (declaration_list -> declaration .)
    COMMA           reduce using rule 10 (declaration_list -> declaration .)


state 75

    (116) operand2 -> operand3 .

    TIMES           reduce using rule 116 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 116 (operand2 -> operand3 .)
    MODULO          reduce using rule 116 (operand2 -> operand3 .)
    PLUS            reduce using rule 116 (operand2 -> operand3 .)
    MINUS           reduce using rule 116 (operand2 -> operand3 .)
    LAND            reduce using rule 116 (operand2 -> operand3 .)
    AND             reduce using rule 116 (operand2 -> operand3 .)
    OR              reduce using rule 116 (operand2 -> operand3 .)
    EQ              reduce using rule 116 (operand2 -> operand3 .)
    NE              reduce using rule 116 (operand2 -> operand3 .)
    GT              reduce using rule 116 (operand2 -> operand3 .)
    GEQ             reduce using rule 116 (operand2 -> operand3 .)
    LT              reduce using rule 116 (operand2 -> operand3 .)
    LEQ             reduce using rule 116 (operand2 -> operand3 .)
    IN              reduce using rule 116 (operand2 -> operand3 .)
    COLON           reduce using rule 116 (operand2 -> operand3 .)
    RPAREN          reduce using rule 116 (operand2 -> operand3 .)
    COMMA           reduce using rule 116 (operand2 -> operand3 .)
    SEMI            reduce using rule 116 (operand2 -> operand3 .)
    THEN            reduce using rule 116 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 116 (operand2 -> operand3 .)
    DOWN            reduce using rule 116 (operand2 -> operand3 .)
    TO              reduce using rule 116 (operand2 -> operand3 .)
    BY              reduce using rule 116 (operand2 -> operand3 .)
    ELSE            reduce using rule 116 (operand2 -> operand3 .)
    ELSIF           reduce using rule 116 (operand2 -> operand3 .)
    FI              reduce using rule 116 (operand2 -> operand3 .)
    WHILE           reduce using rule 116 (operand2 -> operand3 .)


state 76

    (125) operand4 -> location .
    (58) dereferenced_reference -> location . ARROW
    (68) array_location -> location .

    TIMES           reduce using rule 125 (operand4 -> location .)
    DIVIDE          reduce using rule 125 (operand4 -> location .)
    MODULO          reduce using rule 125 (operand4 -> location .)
    PLUS            reduce using rule 125 (operand4 -> location .)
    MINUS           reduce using rule 125 (operand4 -> location .)
    LAND            reduce using rule 125 (operand4 -> location .)
    AND             reduce using rule 125 (operand4 -> location .)
    OR              reduce using rule 125 (operand4 -> location .)
    EQ              reduce using rule 125 (operand4 -> location .)
    NE              reduce using rule 125 (operand4 -> location .)
    GT              reduce using rule 125 (operand4 -> location .)
    GEQ             reduce using rule 125 (operand4 -> location .)
    LT              reduce using rule 125 (operand4 -> location .)
    LEQ             reduce using rule 125 (operand4 -> location .)
    IN              reduce using rule 125 (operand4 -> location .)
    SEMI            reduce using rule 125 (operand4 -> location .)
    COMMA           reduce using rule 125 (operand4 -> location .)
    RPAREN          reduce using rule 125 (operand4 -> location .)
    THEN            reduce using rule 125 (operand4 -> location .)
    COLON           reduce using rule 125 (operand4 -> location .)
    RBRACKET        reduce using rule 125 (operand4 -> location .)
    DOWN            reduce using rule 125 (operand4 -> location .)
    TO              reduce using rule 125 (operand4 -> location .)
    BY              reduce using rule 125 (operand4 -> location .)
    ELSE            reduce using rule 125 (operand4 -> location .)
    ELSIF           reduce using rule 125 (operand4 -> location .)
    FI              reduce using rule 125 (operand4 -> location .)
    WHILE           reduce using rule 125 (operand4 -> location .)
    ARROW           shift and go to state 49
    LBRACKET        reduce using rule 68 (array_location -> location .)


state 77

    (89) expression -> conditional_expression .

    DOWN            reduce using rule 89 (expression -> conditional_expression .)
    TO              reduce using rule 89 (expression -> conditional_expression .)
    BY              reduce using rule 89 (expression -> conditional_expression .)
    RPAREN          reduce using rule 89 (expression -> conditional_expression .)
    COMMA           reduce using rule 89 (expression -> conditional_expression .)
    COLON           reduce using rule 89 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 89 (expression -> conditional_expression .)
    SEMI            reduce using rule 89 (expression -> conditional_expression .)
    FI              reduce using rule 89 (expression -> conditional_expression .)
    THEN            reduce using rule 89 (expression -> conditional_expression .)
    WHILE           reduce using rule 89 (expression -> conditional_expression .)
    ELSE            reduce using rule 89 (expression -> conditional_expression .)
    ELSIF           reduce using rule 89 (expression -> conditional_expression .)


state 78

    (74) literal -> boolean_literal .

    TIMES           reduce using rule 74 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 74 (literal -> boolean_literal .)
    MODULO          reduce using rule 74 (literal -> boolean_literal .)
    PLUS            reduce using rule 74 (literal -> boolean_literal .)
    MINUS           reduce using rule 74 (literal -> boolean_literal .)
    LAND            reduce using rule 74 (literal -> boolean_literal .)
    AND             reduce using rule 74 (literal -> boolean_literal .)
    OR              reduce using rule 74 (literal -> boolean_literal .)
    EQ              reduce using rule 74 (literal -> boolean_literal .)
    NE              reduce using rule 74 (literal -> boolean_literal .)
    GT              reduce using rule 74 (literal -> boolean_literal .)
    GEQ             reduce using rule 74 (literal -> boolean_literal .)
    LT              reduce using rule 74 (literal -> boolean_literal .)
    LEQ             reduce using rule 74 (literal -> boolean_literal .)
    IN              reduce using rule 74 (literal -> boolean_literal .)
    COLON           reduce using rule 74 (literal -> boolean_literal .)
    LBRACKET        reduce using rule 74 (literal -> boolean_literal .)
    RPAREN          reduce using rule 74 (literal -> boolean_literal .)
    THEN            reduce using rule 74 (literal -> boolean_literal .)
    DOWN            reduce using rule 74 (literal -> boolean_literal .)
    TO              reduce using rule 74 (literal -> boolean_literal .)
    SEMI            reduce using rule 74 (literal -> boolean_literal .)
    COMMA           reduce using rule 74 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 74 (literal -> boolean_literal .)
    BY              reduce using rule 74 (literal -> boolean_literal .)
    ELSE            reduce using rule 74 (literal -> boolean_literal .)
    ELSIF           reduce using rule 74 (literal -> boolean_literal .)
    FI              reduce using rule 74 (literal -> boolean_literal .)
    WHILE           reduce using rule 74 (literal -> boolean_literal .)


state 79

    (97) operand0 -> operand1 .
    (111) operand1 -> operand1 . arithmetic_additive_operator operand2
    (112) operand1 -> operand1 . string_concatenation_operator operand2
    (113) arithmetic_additive_operator -> . PLUS
    (114) arithmetic_additive_operator -> . MINUS
    (115) string_concatenation_operator -> . LAND

    AND             reduce using rule 97 (operand0 -> operand1 .)
    OR              reduce using rule 97 (operand0 -> operand1 .)
    EQ              reduce using rule 97 (operand0 -> operand1 .)
    NE              reduce using rule 97 (operand0 -> operand1 .)
    GT              reduce using rule 97 (operand0 -> operand1 .)
    GEQ             reduce using rule 97 (operand0 -> operand1 .)
    LT              reduce using rule 97 (operand0 -> operand1 .)
    LEQ             reduce using rule 97 (operand0 -> operand1 .)
    IN              reduce using rule 97 (operand0 -> operand1 .)
    FI              reduce using rule 97 (operand0 -> operand1 .)
    THEN            reduce using rule 97 (operand0 -> operand1 .)
    SEMI            reduce using rule 97 (operand0 -> operand1 .)
    COLON           reduce using rule 97 (operand0 -> operand1 .)
    RPAREN          reduce using rule 97 (operand0 -> operand1 .)
    COMMA           reduce using rule 97 (operand0 -> operand1 .)
    ELSE            reduce using rule 97 (operand0 -> operand1 .)
    ELSIF           reduce using rule 97 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 97 (operand0 -> operand1 .)
    WHILE           reduce using rule 97 (operand0 -> operand1 .)
    DOWN            reduce using rule 97 (operand0 -> operand1 .)
    TO              reduce using rule 97 (operand0 -> operand1 .)
    BY              reduce using rule 97 (operand0 -> operand1 .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168
    LAND            shift and go to state 170

    arithmetic_additive_operator   shift and go to state 166
    string_concatenation_operator  shift and go to state 169

state 80

    (147) if_action -> IF boolean_expression . then_clause FI
    (148) if_action -> IF boolean_expression . then_clause else_clause FI
    (149) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 172

    then_clause                    shift and go to state 171

state 81

    (88) expression -> operand0 .
    (98) operand0 -> operand0 . operator1 operand1
    (99) operator1 -> . relational_operator
    (100) operator1 -> . membership_operator
    (101) relational_operator -> . AND
    (102) relational_operator -> . OR
    (103) relational_operator -> . EQ
    (104) relational_operator -> . NE
    (105) relational_operator -> . GT
    (106) relational_operator -> . GEQ
    (107) relational_operator -> . LT
    (108) relational_operator -> . LEQ
    (109) membership_operator -> . IN

    DOWN            reduce using rule 88 (expression -> operand0 .)
    TO              reduce using rule 88 (expression -> operand0 .)
    BY              reduce using rule 88 (expression -> operand0 .)
    RPAREN          reduce using rule 88 (expression -> operand0 .)
    COMMA           reduce using rule 88 (expression -> operand0 .)
    COLON           reduce using rule 88 (expression -> operand0 .)
    RBRACKET        reduce using rule 88 (expression -> operand0 .)
    SEMI            reduce using rule 88 (expression -> operand0 .)
    FI              reduce using rule 88 (expression -> operand0 .)
    THEN            reduce using rule 88 (expression -> operand0 .)
    WHILE           reduce using rule 88 (expression -> operand0 .)
    ELSE            reduce using rule 88 (expression -> operand0 .)
    ELSIF           reduce using rule 88 (expression -> operand0 .)
    AND             shift and go to state 182
    OR              shift and go to state 174
    EQ              shift and go to state 183
    NE              shift and go to state 180
    GT              shift and go to state 181
    GEQ             shift and go to state 178
    LT              shift and go to state 176
    LEQ             shift and go to state 175
    IN              shift and go to state 179

    membership_operator            shift and go to state 173
    operator1                      shift and go to state 177
    relational_operator            shift and go to state 184

state 82

    (84) value_array_element -> array_primitive_value . LBRACKET expression_list RBRACKET
    (85) value_array_slice -> array_primitive_value . LBRACKET expression COLON expression RBRACKET

    LBRACKET        shift and go to state 185


state 83

    (124) monadic_operator -> NOT .

    ARROW           reduce using rule 124 (monadic_operator -> NOT .)
    ID              reduce using rule 124 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 124 (monadic_operator -> NOT .)
    ICONST          reduce using rule 124 (monadic_operator -> NOT .)
    FALSE           reduce using rule 124 (monadic_operator -> NOT .)
    TRUE            reduce using rule 124 (monadic_operator -> NOT .)
    CCONST          reduce using rule 124 (monadic_operator -> NOT .)
    NULL            reduce using rule 124 (monadic_operator -> NOT .)
    SCONST          reduce using rule 124 (monadic_operator -> NOT .)
    ABS             reduce using rule 124 (monadic_operator -> NOT .)
    ASC             reduce using rule 124 (monadic_operator -> NOT .)
    NUM             reduce using rule 124 (monadic_operator -> NOT .)
    UPPER           reduce using rule 124 (monadic_operator -> NOT .)
    LOWER           reduce using rule 124 (monadic_operator -> NOT .)
    LENGTH          reduce using rule 124 (monadic_operator -> NOT .)
    READ            reduce using rule 124 (monadic_operator -> NOT .)
    PRINT           reduce using rule 124 (monadic_operator -> NOT .)


state 84

    (69) primitive_value -> literal .

    TIMES           reduce using rule 69 (primitive_value -> literal .)
    DIVIDE          reduce using rule 69 (primitive_value -> literal .)
    MODULO          reduce using rule 69 (primitive_value -> literal .)
    PLUS            reduce using rule 69 (primitive_value -> literal .)
    MINUS           reduce using rule 69 (primitive_value -> literal .)
    LAND            reduce using rule 69 (primitive_value -> literal .)
    AND             reduce using rule 69 (primitive_value -> literal .)
    OR              reduce using rule 69 (primitive_value -> literal .)
    EQ              reduce using rule 69 (primitive_value -> literal .)
    NE              reduce using rule 69 (primitive_value -> literal .)
    GT              reduce using rule 69 (primitive_value -> literal .)
    GEQ             reduce using rule 69 (primitive_value -> literal .)
    LT              reduce using rule 69 (primitive_value -> literal .)
    LEQ             reduce using rule 69 (primitive_value -> literal .)
    IN              reduce using rule 69 (primitive_value -> literal .)
    RPAREN          reduce using rule 69 (primitive_value -> literal .)
    LBRACKET        reduce using rule 69 (primitive_value -> literal .)
    COLON           reduce using rule 69 (primitive_value -> literal .)
    RBRACKET        reduce using rule 69 (primitive_value -> literal .)
    THEN            reduce using rule 69 (primitive_value -> literal .)
    SEMI            reduce using rule 69 (primitive_value -> literal .)
    COMMA           reduce using rule 69 (primitive_value -> literal .)
    DOWN            reduce using rule 69 (primitive_value -> literal .)
    TO              reduce using rule 69 (primitive_value -> literal .)
    BY              reduce using rule 69 (primitive_value -> literal .)
    ELSE            reduce using rule 69 (primitive_value -> literal .)
    ELSIF           reduce using rule 69 (primitive_value -> literal .)
    FI              reduce using rule 69 (primitive_value -> literal .)
    WHILE           reduce using rule 69 (primitive_value -> literal .)


state 85

    (70) primitive_value -> value_array_element .

    TIMES           reduce using rule 70 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 70 (primitive_value -> value_array_element .)
    MODULO          reduce using rule 70 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 70 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 70 (primitive_value -> value_array_element .)
    LAND            reduce using rule 70 (primitive_value -> value_array_element .)
    AND             reduce using rule 70 (primitive_value -> value_array_element .)
    OR              reduce using rule 70 (primitive_value -> value_array_element .)
    EQ              reduce using rule 70 (primitive_value -> value_array_element .)
    NE              reduce using rule 70 (primitive_value -> value_array_element .)
    GT              reduce using rule 70 (primitive_value -> value_array_element .)
    GEQ             reduce using rule 70 (primitive_value -> value_array_element .)
    LT              reduce using rule 70 (primitive_value -> value_array_element .)
    LEQ             reduce using rule 70 (primitive_value -> value_array_element .)
    IN              reduce using rule 70 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 70 (primitive_value -> value_array_element .)
    LBRACKET        reduce using rule 70 (primitive_value -> value_array_element .)
    COLON           reduce using rule 70 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 70 (primitive_value -> value_array_element .)
    THEN            reduce using rule 70 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 70 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 70 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 70 (primitive_value -> value_array_element .)
    TO              reduce using rule 70 (primitive_value -> value_array_element .)
    BY              reduce using rule 70 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 70 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 70 (primitive_value -> value_array_element .)
    FI              reduce using rule 70 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 70 (primitive_value -> value_array_element .)


state 86

    (123) monadic_operator -> MINUS .

    ARROW           reduce using rule 123 (monadic_operator -> MINUS .)
    ID              reduce using rule 123 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 123 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 123 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 123 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 123 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 123 (monadic_operator -> MINUS .)
    NULL            reduce using rule 123 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 123 (monadic_operator -> MINUS .)
    ABS             reduce using rule 123 (monadic_operator -> MINUS .)
    ASC             reduce using rule 123 (monadic_operator -> MINUS .)
    NUM             reduce using rule 123 (monadic_operator -> MINUS .)
    UPPER           reduce using rule 123 (monadic_operator -> MINUS .)
    LOWER           reduce using rule 123 (monadic_operator -> MINUS .)
    LENGTH          reduce using rule 123 (monadic_operator -> MINUS .)
    READ            reduce using rule 123 (monadic_operator -> MINUS .)
    PRINT           reduce using rule 123 (monadic_operator -> MINUS .)


state 87

    (82) empty_literal -> NULL .

    TIMES           reduce using rule 82 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 82 (empty_literal -> NULL .)
    MODULO          reduce using rule 82 (empty_literal -> NULL .)
    PLUS            reduce using rule 82 (empty_literal -> NULL .)
    MINUS           reduce using rule 82 (empty_literal -> NULL .)
    LAND            reduce using rule 82 (empty_literal -> NULL .)
    AND             reduce using rule 82 (empty_literal -> NULL .)
    OR              reduce using rule 82 (empty_literal -> NULL .)
    EQ              reduce using rule 82 (empty_literal -> NULL .)
    NE              reduce using rule 82 (empty_literal -> NULL .)
    GT              reduce using rule 82 (empty_literal -> NULL .)
    GEQ             reduce using rule 82 (empty_literal -> NULL .)
    LT              reduce using rule 82 (empty_literal -> NULL .)
    LEQ             reduce using rule 82 (empty_literal -> NULL .)
    IN              reduce using rule 82 (empty_literal -> NULL .)
    THEN            reduce using rule 82 (empty_literal -> NULL .)
    LBRACKET        reduce using rule 82 (empty_literal -> NULL .)
    DOWN            reduce using rule 82 (empty_literal -> NULL .)
    TO              reduce using rule 82 (empty_literal -> NULL .)
    SEMI            reduce using rule 82 (empty_literal -> NULL .)
    RPAREN          reduce using rule 82 (empty_literal -> NULL .)
    COMMA           reduce using rule 82 (empty_literal -> NULL .)
    COLON           reduce using rule 82 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 82 (empty_literal -> NULL .)
    BY              reduce using rule 82 (empty_literal -> NULL .)
    ELSE            reduce using rule 82 (empty_literal -> NULL .)
    ELSIF           reduce using rule 82 (empty_literal -> NULL .)
    FI              reduce using rule 82 (empty_literal -> NULL .)
    WHILE           reduce using rule 82 (empty_literal -> NULL .)


state 88

    (126) operand4 -> referenced_location .

    TIMES           reduce using rule 126 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 126 (operand4 -> referenced_location .)
    MODULO          reduce using rule 126 (operand4 -> referenced_location .)
    PLUS            reduce using rule 126 (operand4 -> referenced_location .)
    MINUS           reduce using rule 126 (operand4 -> referenced_location .)
    LAND            reduce using rule 126 (operand4 -> referenced_location .)
    AND             reduce using rule 126 (operand4 -> referenced_location .)
    OR              reduce using rule 126 (operand4 -> referenced_location .)
    EQ              reduce using rule 126 (operand4 -> referenced_location .)
    NE              reduce using rule 126 (operand4 -> referenced_location .)
    GT              reduce using rule 126 (operand4 -> referenced_location .)
    GEQ             reduce using rule 126 (operand4 -> referenced_location .)
    LT              reduce using rule 126 (operand4 -> referenced_location .)
    LEQ             reduce using rule 126 (operand4 -> referenced_location .)
    IN              reduce using rule 126 (operand4 -> referenced_location .)
    SEMI            reduce using rule 126 (operand4 -> referenced_location .)
    COMMA           reduce using rule 126 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 126 (operand4 -> referenced_location .)
    THEN            reduce using rule 126 (operand4 -> referenced_location .)
    COLON           reduce using rule 126 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 126 (operand4 -> referenced_location .)
    DOWN            reduce using rule 126 (operand4 -> referenced_location .)
    TO              reduce using rule 126 (operand4 -> referenced_location .)
    BY              reduce using rule 126 (operand4 -> referenced_location .)
    ELSE            reduce using rule 126 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 126 (operand4 -> referenced_location .)
    FI              reduce using rule 126 (operand4 -> referenced_location .)
    WHILE           reduce using rule 126 (operand4 -> referenced_location .)


state 89

    (80) boolean_literal -> TRUE .

    TIMES           reduce using rule 80 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 80 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 80 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 80 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 80 (boolean_literal -> TRUE .)
    LAND            reduce using rule 80 (boolean_literal -> TRUE .)
    AND             reduce using rule 80 (boolean_literal -> TRUE .)
    OR              reduce using rule 80 (boolean_literal -> TRUE .)
    EQ              reduce using rule 80 (boolean_literal -> TRUE .)
    NE              reduce using rule 80 (boolean_literal -> TRUE .)
    GT              reduce using rule 80 (boolean_literal -> TRUE .)
    GEQ             reduce using rule 80 (boolean_literal -> TRUE .)
    LT              reduce using rule 80 (boolean_literal -> TRUE .)
    LEQ             reduce using rule 80 (boolean_literal -> TRUE .)
    IN              reduce using rule 80 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 80 (boolean_literal -> TRUE .)
    TO              reduce using rule 80 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 80 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 80 (boolean_literal -> TRUE .)
    COLON           reduce using rule 80 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 80 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 80 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 80 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 80 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 80 (boolean_literal -> TRUE .)
    THEN            reduce using rule 80 (boolean_literal -> TRUE .)
    BY              reduce using rule 80 (boolean_literal -> TRUE .)
    FI              reduce using rule 80 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 80 (boolean_literal -> TRUE .)


state 90

    (71) primitive_value -> value_array_slice .

    TIMES           reduce using rule 71 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 71 (primitive_value -> value_array_slice .)
    MODULO          reduce using rule 71 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 71 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 71 (primitive_value -> value_array_slice .)
    LAND            reduce using rule 71 (primitive_value -> value_array_slice .)
    AND             reduce using rule 71 (primitive_value -> value_array_slice .)
    OR              reduce using rule 71 (primitive_value -> value_array_slice .)
    EQ              reduce using rule 71 (primitive_value -> value_array_slice .)
    NE              reduce using rule 71 (primitive_value -> value_array_slice .)
    GT              reduce using rule 71 (primitive_value -> value_array_slice .)
    GEQ             reduce using rule 71 (primitive_value -> value_array_slice .)
    LT              reduce using rule 71 (primitive_value -> value_array_slice .)
    LEQ             reduce using rule 71 (primitive_value -> value_array_slice .)
    IN              reduce using rule 71 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 71 (primitive_value -> value_array_slice .)
    LBRACKET        reduce using rule 71 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 71 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 71 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 71 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 71 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 71 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 71 (primitive_value -> value_array_slice .)
    TO              reduce using rule 71 (primitive_value -> value_array_slice .)
    BY              reduce using rule 71 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 71 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 71 (primitive_value -> value_array_slice .)
    FI              reduce using rule 71 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 71 (primitive_value -> value_array_slice .)


state 91

    (87) parenthesized_expression -> LPAREN . expression RPAREN
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 186
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 92

    (122) operand3 -> monadic_operator . operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 76
    parenthesized_expression       shift and go to state 94
    string_slice                   shift and go to state 30
    primitive_value                shift and go to state 95
    string_element                 shift and go to state 24
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    character_literal              shift and go to state 96
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    operand4                       shift and go to state 187
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    array_slice                    shift and go to state 39
    literal                        shift and go to state 84
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    dereferenced_reference         shift and go to state 18
    identifier                     shift and go to state 109

state 93

    (128) referenced_location -> ARROW . location
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    ID              shift and go to state 9
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 188
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    string_element                 shift and go to state 24
    array_slice                    shift and go to state 39
    array_location                 shift and go to state 26
    call_action                    shift and go to state 98
    builtin_name                   shift and go to state 4
    dereferenced_reference         shift and go to state 18
    array_element                  shift and go to state 7
    identifier                     shift and go to state 109

state 94

    (72) primitive_value -> parenthesized_expression .

    TIMES           reduce using rule 72 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 72 (primitive_value -> parenthesized_expression .)
    MODULO          reduce using rule 72 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 72 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 72 (primitive_value -> parenthesized_expression .)
    LAND            reduce using rule 72 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 72 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 72 (primitive_value -> parenthesized_expression .)
    EQ              reduce using rule 72 (primitive_value -> parenthesized_expression .)
    NE              reduce using rule 72 (primitive_value -> parenthesized_expression .)
    GT              reduce using rule 72 (primitive_value -> parenthesized_expression .)
    GEQ             reduce using rule 72 (primitive_value -> parenthesized_expression .)
    LT              reduce using rule 72 (primitive_value -> parenthesized_expression .)
    LEQ             reduce using rule 72 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 72 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 72 (primitive_value -> parenthesized_expression .)
    LBRACKET        reduce using rule 72 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 72 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 72 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 72 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 72 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 72 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 72 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 72 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 72 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 72 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 72 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 72 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 72 (primitive_value -> parenthesized_expression .)


state 95

    (127) operand4 -> primitive_value .
    (86) array_primitive_value -> primitive_value .

    TIMES           reduce using rule 127 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 127 (operand4 -> primitive_value .)
    MODULO          reduce using rule 127 (operand4 -> primitive_value .)
    PLUS            reduce using rule 127 (operand4 -> primitive_value .)
    MINUS           reduce using rule 127 (operand4 -> primitive_value .)
    LAND            reduce using rule 127 (operand4 -> primitive_value .)
    AND             reduce using rule 127 (operand4 -> primitive_value .)
    OR              reduce using rule 127 (operand4 -> primitive_value .)
    EQ              reduce using rule 127 (operand4 -> primitive_value .)
    NE              reduce using rule 127 (operand4 -> primitive_value .)
    GT              reduce using rule 127 (operand4 -> primitive_value .)
    GEQ             reduce using rule 127 (operand4 -> primitive_value .)
    LT              reduce using rule 127 (operand4 -> primitive_value .)
    LEQ             reduce using rule 127 (operand4 -> primitive_value .)
    IN              reduce using rule 127 (operand4 -> primitive_value .)
    SEMI            reduce using rule 127 (operand4 -> primitive_value .)
    COMMA           reduce using rule 127 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 127 (operand4 -> primitive_value .)
    THEN            reduce using rule 127 (operand4 -> primitive_value .)
    COLON           reduce using rule 127 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 127 (operand4 -> primitive_value .)
    DOWN            reduce using rule 127 (operand4 -> primitive_value .)
    TO              reduce using rule 127 (operand4 -> primitive_value .)
    BY              reduce using rule 127 (operand4 -> primitive_value .)
    ELSE            reduce using rule 127 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 127 (operand4 -> primitive_value .)
    FI              reduce using rule 127 (operand4 -> primitive_value .)
    WHILE           reduce using rule 127 (operand4 -> primitive_value .)
    LBRACKET        reduce using rule 86 (array_primitive_value -> primitive_value .)


state 96

    (75) literal -> character_literal .

    TIMES           reduce using rule 75 (literal -> character_literal .)
    DIVIDE          reduce using rule 75 (literal -> character_literal .)
    MODULO          reduce using rule 75 (literal -> character_literal .)
    PLUS            reduce using rule 75 (literal -> character_literal .)
    MINUS           reduce using rule 75 (literal -> character_literal .)
    LAND            reduce using rule 75 (literal -> character_literal .)
    AND             reduce using rule 75 (literal -> character_literal .)
    OR              reduce using rule 75 (literal -> character_literal .)
    EQ              reduce using rule 75 (literal -> character_literal .)
    NE              reduce using rule 75 (literal -> character_literal .)
    GT              reduce using rule 75 (literal -> character_literal .)
    GEQ             reduce using rule 75 (literal -> character_literal .)
    LT              reduce using rule 75 (literal -> character_literal .)
    LEQ             reduce using rule 75 (literal -> character_literal .)
    IN              reduce using rule 75 (literal -> character_literal .)
    COLON           reduce using rule 75 (literal -> character_literal .)
    LBRACKET        reduce using rule 75 (literal -> character_literal .)
    RPAREN          reduce using rule 75 (literal -> character_literal .)
    THEN            reduce using rule 75 (literal -> character_literal .)
    DOWN            reduce using rule 75 (literal -> character_literal .)
    TO              reduce using rule 75 (literal -> character_literal .)
    SEMI            reduce using rule 75 (literal -> character_literal .)
    COMMA           reduce using rule 75 (literal -> character_literal .)
    RBRACKET        reduce using rule 75 (literal -> character_literal .)
    BY              reduce using rule 75 (literal -> character_literal .)
    ELSE            reduce using rule 75 (literal -> character_literal .)
    ELSIF           reduce using rule 75 (literal -> character_literal .)
    FI              reduce using rule 75 (literal -> character_literal .)
    WHILE           reduce using rule 75 (literal -> character_literal .)


state 97

    (77) literal -> character_string_literal .

    TIMES           reduce using rule 77 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 77 (literal -> character_string_literal .)
    MODULO          reduce using rule 77 (literal -> character_string_literal .)
    PLUS            reduce using rule 77 (literal -> character_string_literal .)
    MINUS           reduce using rule 77 (literal -> character_string_literal .)
    LAND            reduce using rule 77 (literal -> character_string_literal .)
    AND             reduce using rule 77 (literal -> character_string_literal .)
    OR              reduce using rule 77 (literal -> character_string_literal .)
    EQ              reduce using rule 77 (literal -> character_string_literal .)
    NE              reduce using rule 77 (literal -> character_string_literal .)
    GT              reduce using rule 77 (literal -> character_string_literal .)
    GEQ             reduce using rule 77 (literal -> character_string_literal .)
    LT              reduce using rule 77 (literal -> character_string_literal .)
    LEQ             reduce using rule 77 (literal -> character_string_literal .)
    IN              reduce using rule 77 (literal -> character_string_literal .)
    COLON           reduce using rule 77 (literal -> character_string_literal .)
    LBRACKET        reduce using rule 77 (literal -> character_string_literal .)
    RPAREN          reduce using rule 77 (literal -> character_string_literal .)
    THEN            reduce using rule 77 (literal -> character_string_literal .)
    DOWN            reduce using rule 77 (literal -> character_string_literal .)
    TO              reduce using rule 77 (literal -> character_string_literal .)
    SEMI            reduce using rule 77 (literal -> character_string_literal .)
    COMMA           reduce using rule 77 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 77 (literal -> character_string_literal .)
    BY              reduce using rule 77 (literal -> character_string_literal .)
    ELSE            reduce using rule 77 (literal -> character_string_literal .)
    ELSIF           reduce using rule 77 (literal -> character_string_literal .)
    FI              reduce using rule 77 (literal -> character_string_literal .)
    WHILE           reduce using rule 77 (literal -> character_string_literal .)


state 98

    (55) location -> call_action .

    ARROW           reduce using rule 55 (location -> call_action .)
    TIMES           reduce using rule 55 (location -> call_action .)
    DIVIDE          reduce using rule 55 (location -> call_action .)
    MODULO          reduce using rule 55 (location -> call_action .)
    PLUS            reduce using rule 55 (location -> call_action .)
    MINUS           reduce using rule 55 (location -> call_action .)
    LAND            reduce using rule 55 (location -> call_action .)
    AND             reduce using rule 55 (location -> call_action .)
    OR              reduce using rule 55 (location -> call_action .)
    EQ              reduce using rule 55 (location -> call_action .)
    NE              reduce using rule 55 (location -> call_action .)
    GT              reduce using rule 55 (location -> call_action .)
    GEQ             reduce using rule 55 (location -> call_action .)
    LT              reduce using rule 55 (location -> call_action .)
    LEQ             reduce using rule 55 (location -> call_action .)
    IN              reduce using rule 55 (location -> call_action .)
    RPAREN          reduce using rule 55 (location -> call_action .)
    COMMA           reduce using rule 55 (location -> call_action .)
    LBRACKET        reduce using rule 55 (location -> call_action .)
    THEN            reduce using rule 55 (location -> call_action .)
    SEMI            reduce using rule 55 (location -> call_action .)
    COLON           reduce using rule 55 (location -> call_action .)
    RBRACKET        reduce using rule 55 (location -> call_action .)
    DOWN            reduce using rule 55 (location -> call_action .)
    TO              reduce using rule 55 (location -> call_action .)
    BY              reduce using rule 55 (location -> call_action .)
    ELSE            reduce using rule 55 (location -> call_action .)
    ELSIF           reduce using rule 55 (location -> call_action .)
    FI              reduce using rule 55 (location -> call_action .)
    WHILE           reduce using rule 55 (location -> call_action .)


state 99

    (90) conditional_expression -> IF . boolean_expression then_expression else_expression FI
    (91) conditional_expression -> IF . boolean_expression then_expression elsif_expression else_expression FI
    (92) boolean_expression -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    boolean_expression             shift and go to state 189
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 103
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 100

    (83) character_string_literal -> SCONST .

    TIMES           reduce using rule 83 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 83 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 83 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 83 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 83 (character_string_literal -> SCONST .)
    LAND            reduce using rule 83 (character_string_literal -> SCONST .)
    AND             reduce using rule 83 (character_string_literal -> SCONST .)
    OR              reduce using rule 83 (character_string_literal -> SCONST .)
    EQ              reduce using rule 83 (character_string_literal -> SCONST .)
    NE              reduce using rule 83 (character_string_literal -> SCONST .)
    GT              reduce using rule 83 (character_string_literal -> SCONST .)
    GEQ             reduce using rule 83 (character_string_literal -> SCONST .)
    LT              reduce using rule 83 (character_string_literal -> SCONST .)
    LEQ             reduce using rule 83 (character_string_literal -> SCONST .)
    IN              reduce using rule 83 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 83 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 83 (character_string_literal -> SCONST .)
    LBRACKET        reduce using rule 83 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 83 (character_string_literal -> SCONST .)
    COLON           reduce using rule 83 (character_string_literal -> SCONST .)
    THEN            reduce using rule 83 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 83 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 83 (character_string_literal -> SCONST .)
    TO              reduce using rule 83 (character_string_literal -> SCONST .)
    BY              reduce using rule 83 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 83 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 83 (character_string_literal -> SCONST .)
    FI              reduce using rule 83 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 83 (character_string_literal -> SCONST .)


state 101

    (78) integer_literal -> ICONST .

    TIMES           reduce using rule 78 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 78 (integer_literal -> ICONST .)
    MODULO          reduce using rule 78 (integer_literal -> ICONST .)
    PLUS            reduce using rule 78 (integer_literal -> ICONST .)
    MINUS           reduce using rule 78 (integer_literal -> ICONST .)
    LAND            reduce using rule 78 (integer_literal -> ICONST .)
    AND             reduce using rule 78 (integer_literal -> ICONST .)
    OR              reduce using rule 78 (integer_literal -> ICONST .)
    EQ              reduce using rule 78 (integer_literal -> ICONST .)
    NE              reduce using rule 78 (integer_literal -> ICONST .)
    GT              reduce using rule 78 (integer_literal -> ICONST .)
    GEQ             reduce using rule 78 (integer_literal -> ICONST .)
    LT              reduce using rule 78 (integer_literal -> ICONST .)
    LEQ             reduce using rule 78 (integer_literal -> ICONST .)
    IN              reduce using rule 78 (integer_literal -> ICONST .)
    WHILE           reduce using rule 78 (integer_literal -> ICONST .)
    SEMI            reduce using rule 78 (integer_literal -> ICONST .)
    LBRACKET        reduce using rule 78 (integer_literal -> ICONST .)
    DOWN            reduce using rule 78 (integer_literal -> ICONST .)
    TO              reduce using rule 78 (integer_literal -> ICONST .)
    BY              reduce using rule 78 (integer_literal -> ICONST .)
    COLON           reduce using rule 78 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 78 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 78 (integer_literal -> ICONST .)
    COMMA           reduce using rule 78 (integer_literal -> ICONST .)
    THEN            reduce using rule 78 (integer_literal -> ICONST .)
    ELSE            reduce using rule 78 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 78 (integer_literal -> ICONST .)
    FI              reduce using rule 78 (integer_literal -> ICONST .)


state 102

    (121) operand3 -> operand4 .

    TIMES           reduce using rule 121 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 121 (operand3 -> operand4 .)
    MODULO          reduce using rule 121 (operand3 -> operand4 .)
    PLUS            reduce using rule 121 (operand3 -> operand4 .)
    MINUS           reduce using rule 121 (operand3 -> operand4 .)
    LAND            reduce using rule 121 (operand3 -> operand4 .)
    AND             reduce using rule 121 (operand3 -> operand4 .)
    OR              reduce using rule 121 (operand3 -> operand4 .)
    EQ              reduce using rule 121 (operand3 -> operand4 .)
    NE              reduce using rule 121 (operand3 -> operand4 .)
    GT              reduce using rule 121 (operand3 -> operand4 .)
    GEQ             reduce using rule 121 (operand3 -> operand4 .)
    LT              reduce using rule 121 (operand3 -> operand4 .)
    LEQ             reduce using rule 121 (operand3 -> operand4 .)
    IN              reduce using rule 121 (operand3 -> operand4 .)
    RPAREN          reduce using rule 121 (operand3 -> operand4 .)
    COMMA           reduce using rule 121 (operand3 -> operand4 .)
    THEN            reduce using rule 121 (operand3 -> operand4 .)
    SEMI            reduce using rule 121 (operand3 -> operand4 .)
    COLON           reduce using rule 121 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 121 (operand3 -> operand4 .)
    DOWN            reduce using rule 121 (operand3 -> operand4 .)
    TO              reduce using rule 121 (operand3 -> operand4 .)
    BY              reduce using rule 121 (operand3 -> operand4 .)
    ELSE            reduce using rule 121 (operand3 -> operand4 .)
    ELSIF           reduce using rule 121 (operand3 -> operand4 .)
    FI              reduce using rule 121 (operand3 -> operand4 .)
    WHILE           reduce using rule 121 (operand3 -> operand4 .)


state 103

    (92) boolean_expression -> expression .

    THEN            reduce using rule 92 (boolean_expression -> expression .)
    SEMI            reduce using rule 92 (boolean_expression -> expression .)


state 104

    (110) operand1 -> operand2 .
    (117) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (118) arithmetic_multiplicative_operator -> . TIMES
    (119) arithmetic_multiplicative_operator -> . DIVIDE
    (120) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 110 (operand1 -> operand2 .)
    MINUS           reduce using rule 110 (operand1 -> operand2 .)
    LAND            reduce using rule 110 (operand1 -> operand2 .)
    AND             reduce using rule 110 (operand1 -> operand2 .)
    OR              reduce using rule 110 (operand1 -> operand2 .)
    EQ              reduce using rule 110 (operand1 -> operand2 .)
    NE              reduce using rule 110 (operand1 -> operand2 .)
    GT              reduce using rule 110 (operand1 -> operand2 .)
    GEQ             reduce using rule 110 (operand1 -> operand2 .)
    LT              reduce using rule 110 (operand1 -> operand2 .)
    LEQ             reduce using rule 110 (operand1 -> operand2 .)
    IN              reduce using rule 110 (operand1 -> operand2 .)
    COLON           reduce using rule 110 (operand1 -> operand2 .)
    RPAREN          reduce using rule 110 (operand1 -> operand2 .)
    THEN            reduce using rule 110 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 110 (operand1 -> operand2 .)
    COMMA           reduce using rule 110 (operand1 -> operand2 .)
    SEMI            reduce using rule 110 (operand1 -> operand2 .)
    DOWN            reduce using rule 110 (operand1 -> operand2 .)
    TO              reduce using rule 110 (operand1 -> operand2 .)
    BY              reduce using rule 110 (operand1 -> operand2 .)
    ELSE            reduce using rule 110 (operand1 -> operand2 .)
    ELSIF           reduce using rule 110 (operand1 -> operand2 .)
    FI              reduce using rule 110 (operand1 -> operand2 .)
    WHILE           reduce using rule 110 (operand1 -> operand2 .)
    TIMES           shift and go to state 190
    DIVIDE          shift and go to state 191
    MODULO          shift and go to state 193

    arithmetic_multiplicative_operator shift and go to state 192

state 105

    (81) character_literal -> CCONST .

    TIMES           reduce using rule 81 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 81 (character_literal -> CCONST .)
    MODULO          reduce using rule 81 (character_literal -> CCONST .)
    PLUS            reduce using rule 81 (character_literal -> CCONST .)
    MINUS           reduce using rule 81 (character_literal -> CCONST .)
    LAND            reduce using rule 81 (character_literal -> CCONST .)
    AND             reduce using rule 81 (character_literal -> CCONST .)
    OR              reduce using rule 81 (character_literal -> CCONST .)
    EQ              reduce using rule 81 (character_literal -> CCONST .)
    NE              reduce using rule 81 (character_literal -> CCONST .)
    GT              reduce using rule 81 (character_literal -> CCONST .)
    GEQ             reduce using rule 81 (character_literal -> CCONST .)
    LT              reduce using rule 81 (character_literal -> CCONST .)
    LEQ             reduce using rule 81 (character_literal -> CCONST .)
    IN              reduce using rule 81 (character_literal -> CCONST .)
    THEN            reduce using rule 81 (character_literal -> CCONST .)
    SEMI            reduce using rule 81 (character_literal -> CCONST .)
    RPAREN          reduce using rule 81 (character_literal -> CCONST .)
    COMMA           reduce using rule 81 (character_literal -> CCONST .)
    COLON           reduce using rule 81 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 81 (character_literal -> CCONST .)
    DOWN            reduce using rule 81 (character_literal -> CCONST .)
    TO              reduce using rule 81 (character_literal -> CCONST .)
    BY              reduce using rule 81 (character_literal -> CCONST .)
    ELSE            reduce using rule 81 (character_literal -> CCONST .)
    ELSIF           reduce using rule 81 (character_literal -> CCONST .)
    FI              reduce using rule 81 (character_literal -> CCONST .)
    WHILE           reduce using rule 81 (character_literal -> CCONST .)
    LBRACKET        reduce using rule 81 (character_literal -> CCONST .)


state 106

    (76) literal -> empty_literal .

    TIMES           reduce using rule 76 (literal -> empty_literal .)
    DIVIDE          reduce using rule 76 (literal -> empty_literal .)
    MODULO          reduce using rule 76 (literal -> empty_literal .)
    PLUS            reduce using rule 76 (literal -> empty_literal .)
    MINUS           reduce using rule 76 (literal -> empty_literal .)
    LAND            reduce using rule 76 (literal -> empty_literal .)
    AND             reduce using rule 76 (literal -> empty_literal .)
    OR              reduce using rule 76 (literal -> empty_literal .)
    EQ              reduce using rule 76 (literal -> empty_literal .)
    NE              reduce using rule 76 (literal -> empty_literal .)
    GT              reduce using rule 76 (literal -> empty_literal .)
    GEQ             reduce using rule 76 (literal -> empty_literal .)
    LT              reduce using rule 76 (literal -> empty_literal .)
    LEQ             reduce using rule 76 (literal -> empty_literal .)
    IN              reduce using rule 76 (literal -> empty_literal .)
    COLON           reduce using rule 76 (literal -> empty_literal .)
    LBRACKET        reduce using rule 76 (literal -> empty_literal .)
    RPAREN          reduce using rule 76 (literal -> empty_literal .)
    THEN            reduce using rule 76 (literal -> empty_literal .)
    DOWN            reduce using rule 76 (literal -> empty_literal .)
    TO              reduce using rule 76 (literal -> empty_literal .)
    SEMI            reduce using rule 76 (literal -> empty_literal .)
    COMMA           reduce using rule 76 (literal -> empty_literal .)
    RBRACKET        reduce using rule 76 (literal -> empty_literal .)
    BY              reduce using rule 76 (literal -> empty_literal .)
    ELSE            reduce using rule 76 (literal -> empty_literal .)
    ELSIF           reduce using rule 76 (literal -> empty_literal .)
    FI              reduce using rule 76 (literal -> empty_literal .)
    WHILE           reduce using rule 76 (literal -> empty_literal .)


state 107

    (73) literal -> integer_literal .

    TIMES           reduce using rule 73 (literal -> integer_literal .)
    DIVIDE          reduce using rule 73 (literal -> integer_literal .)
    MODULO          reduce using rule 73 (literal -> integer_literal .)
    PLUS            reduce using rule 73 (literal -> integer_literal .)
    MINUS           reduce using rule 73 (literal -> integer_literal .)
    LAND            reduce using rule 73 (literal -> integer_literal .)
    AND             reduce using rule 73 (literal -> integer_literal .)
    OR              reduce using rule 73 (literal -> integer_literal .)
    EQ              reduce using rule 73 (literal -> integer_literal .)
    NE              reduce using rule 73 (literal -> integer_literal .)
    GT              reduce using rule 73 (literal -> integer_literal .)
    GEQ             reduce using rule 73 (literal -> integer_literal .)
    LT              reduce using rule 73 (literal -> integer_literal .)
    LEQ             reduce using rule 73 (literal -> integer_literal .)
    IN              reduce using rule 73 (literal -> integer_literal .)
    COLON           reduce using rule 73 (literal -> integer_literal .)
    LBRACKET        reduce using rule 73 (literal -> integer_literal .)
    RPAREN          reduce using rule 73 (literal -> integer_literal .)
    THEN            reduce using rule 73 (literal -> integer_literal .)
    DOWN            reduce using rule 73 (literal -> integer_literal .)
    TO              reduce using rule 73 (literal -> integer_literal .)
    SEMI            reduce using rule 73 (literal -> integer_literal .)
    COMMA           reduce using rule 73 (literal -> integer_literal .)
    RBRACKET        reduce using rule 73 (literal -> integer_literal .)
    BY              reduce using rule 73 (literal -> integer_literal .)
    ELSE            reduce using rule 73 (literal -> integer_literal .)
    ELSIF           reduce using rule 73 (literal -> integer_literal .)
    FI              reduce using rule 73 (literal -> integer_literal .)
    WHILE           reduce using rule 73 (literal -> integer_literal .)


state 108

    (79) boolean_literal -> FALSE .

    TIMES           reduce using rule 79 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 79 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 79 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 79 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 79 (boolean_literal -> FALSE .)
    LAND            reduce using rule 79 (boolean_literal -> FALSE .)
    AND             reduce using rule 79 (boolean_literal -> FALSE .)
    OR              reduce using rule 79 (boolean_literal -> FALSE .)
    EQ              reduce using rule 79 (boolean_literal -> FALSE .)
    NE              reduce using rule 79 (boolean_literal -> FALSE .)
    GT              reduce using rule 79 (boolean_literal -> FALSE .)
    GEQ             reduce using rule 79 (boolean_literal -> FALSE .)
    LT              reduce using rule 79 (boolean_literal -> FALSE .)
    LEQ             reduce using rule 79 (boolean_literal -> FALSE .)
    IN              reduce using rule 79 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 79 (boolean_literal -> FALSE .)
    TO              reduce using rule 79 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 79 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 79 (boolean_literal -> FALSE .)
    COLON           reduce using rule 79 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 79 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 79 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 79 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 79 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 79 (boolean_literal -> FALSE .)
    THEN            reduce using rule 79 (boolean_literal -> FALSE .)
    BY              reduce using rule 79 (boolean_literal -> FALSE .)
    FI              reduce using rule 79 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 79 (boolean_literal -> FALSE .)


state 109

    (51) location -> identifier .
    (61) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> identifier . LBRACKET start_element RBRACKET
    (175) procedure_call -> identifier . LPAREN RPAREN
    (176) procedure_call -> identifier . LPAREN parameter_list RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 51 (location -> identifier .)
    TIMES           reduce using rule 51 (location -> identifier .)
    DIVIDE          reduce using rule 51 (location -> identifier .)
    MODULO          reduce using rule 51 (location -> identifier .)
    PLUS            reduce using rule 51 (location -> identifier .)
    MINUS           reduce using rule 51 (location -> identifier .)
    LAND            reduce using rule 51 (location -> identifier .)
    AND             reduce using rule 51 (location -> identifier .)
    OR              reduce using rule 51 (location -> identifier .)
    EQ              reduce using rule 51 (location -> identifier .)
    NE              reduce using rule 51 (location -> identifier .)
    GT              reduce using rule 51 (location -> identifier .)
    GEQ             reduce using rule 51 (location -> identifier .)
    LT              reduce using rule 51 (location -> identifier .)
    LEQ             reduce using rule 51 (location -> identifier .)
    IN              reduce using rule 51 (location -> identifier .)
    RPAREN          reduce using rule 51 (location -> identifier .)
    COMMA           reduce using rule 51 (location -> identifier .)
    THEN            reduce using rule 51 (location -> identifier .)
    SEMI            reduce using rule 51 (location -> identifier .)
    COLON           reduce using rule 51 (location -> identifier .)
    RBRACKET        reduce using rule 51 (location -> identifier .)
    DOWN            reduce using rule 51 (location -> identifier .)
    TO              reduce using rule 51 (location -> identifier .)
    BY              reduce using rule 51 (location -> identifier .)
    ELSE            reduce using rule 51 (location -> identifier .)
    ELSIF           reduce using rule 51 (location -> identifier .)
    FI              reduce using rule 51 (location -> identifier .)
    WHILE           reduce using rule 51 (location -> identifier .)
    LBRACKET        shift and go to state 116
    LPAREN          shift and go to state 118

  ! LBRACKET        [ reduce using rule 51 (location -> identifier .) ]


state 110

    (182) return_action -> RETURN result .

    SEMI            reduce using rule 182 (return_action -> RETURN result .)


state 111

    (184) result -> expression .

    SEMI            reduce using rule 184 (result -> expression .)


state 112

    (27) mode_definition -> identifier_list . EQUALS mode
    (16) identifier_list -> identifier_list . COMMA identifier

    EQUALS          shift and go to state 194
    COMMA           shift and go to state 147


state 113

    (25) newmode_list -> mode_definition .

    SEMI            reduce using rule 25 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 25 (newmode_list -> mode_definition .)


state 114

    (24) newmode_statement -> TYPE newmode_list . SEMI
    (26) newmode_list -> newmode_list . COMMA mode_definition

    SEMI            shift and go to state 196
    COMMA           shift and go to state 195


state 115

    (183) result_action -> RESULT result .

    SEMI            reduce using rule 183 (result_action -> RESULT result .)


state 116

    (61) string_slice -> identifier LBRACKET . left_element COLON right_element RBRACKET
    (59) string_element -> identifier LBRACKET . start_element RBRACKET
    (62) left_element -> . expression
    (60) start_element -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    start_element                  shift and go to state 197
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    left_element                   shift and go to state 198
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 199
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 117

    (195) procedure_statement -> identifier COLON . procedure_definition SEMI
    (130) action_statement -> identifier COLON . action SEMI
    (196) procedure_definition -> . PROC LPAREN RPAREN SEMI statement_list END
    (197) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END
    (198) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMI statement_list END
    (199) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    PROC            shift and go to state 202
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ID              shift and go to state 9
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 1
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    string_slice                   shift and go to state 30
    assignment_action              shift and go to state 33
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    if_action                      shift and go to state 35
    builtin_call                   shift and go to state 12
    procedure_definition           shift and go to state 200
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 201
    dereferenced_reference         shift and go to state 18
    bracketed_action               shift and go to state 43
    identifier                     shift and go to state 203

state 118

    (175) procedure_call -> identifier LPAREN . RPAREN
    (176) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (177) parameter_list -> . parameter
    (178) parameter_list -> . parameter_list COMMA parameter
    (179) parameter -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    RPAREN          shift and go to state 205
    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    literal                        shift and go to state 84
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    parameter_list                 shift and go to state 204
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 129
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    parameter                      shift and go to state 126
    identifier                     shift and go to state 109

state 119

    (143) assigning_operator -> TIMES EQUALS .

    IF              reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    MINUS           reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    NOT             reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    ARROW           reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    ID              reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    LPAREN          reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    ICONST          reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    FALSE           reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    TRUE            reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    CCONST          reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    NULL            reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    SCONST          reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    ABS             reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    ASC             reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    NUM             reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    UPPER           reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    LOWER           reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    LENGTH          reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    READ            reduce using rule 143 (assigning_operator -> TIMES EQUALS .)
    PRINT           reduce using rule 143 (assigning_operator -> TIMES EQUALS .)


state 120

    (141) assigning_operator -> PLUS EQUALS .

    IF              reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    MINUS           reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    NOT             reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    ARROW           reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    ID              reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    LPAREN          reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    ICONST          reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    FALSE           reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    TRUE            reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    CCONST          reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    NULL            reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    SCONST          reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    ABS             reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    ASC             reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    NUM             reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    UPPER           reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    LOWER           reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    LENGTH          reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    READ            reduce using rule 141 (assigning_operator -> PLUS EQUALS .)
    PRINT           reduce using rule 141 (assigning_operator -> PLUS EQUALS .)


state 121

    (144) assigning_operator -> DIVIDE EQUALS .

    IF              reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    MINUS           reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    NOT             reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    ARROW           reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    ID              reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    LPAREN          reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    ICONST          reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    FALSE           reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    TRUE            reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    CCONST          reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    NULL            reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    SCONST          reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    ABS             reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    ASC             reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    NUM             reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    UPPER           reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    LOWER           reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    LENGTH          reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    READ            reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)
    PRINT           reduce using rule 144 (assigning_operator -> DIVIDE EQUALS .)


state 122

    (142) assigning_operator -> MINUS EQUALS .

    IF              reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    MINUS           reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    NOT             reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    ARROW           reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    ID              reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    LPAREN          reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    ICONST          reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    FALSE           reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    TRUE            reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    CCONST          reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    NULL            reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    SCONST          reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    ABS             reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    ASC             reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    NUM             reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    UPPER           reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    LOWER           reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    LENGTH          reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    READ            reduce using rule 142 (assigning_operator -> MINUS EQUALS .)
    PRINT           reduce using rule 142 (assigning_operator -> MINUS EQUALS .)


state 123

    (146) assigning_operator -> LAND EQUALS .

    IF              reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    MINUS           reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    NOT             reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    ARROW           reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    ID              reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    LPAREN          reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    ICONST          reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    FALSE           reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    TRUE            reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    CCONST          reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    NULL            reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    SCONST          reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    ABS             reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    ASC             reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    NUM             reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    UPPER           reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    LOWER           reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    LENGTH          reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    READ            reduce using rule 146 (assigning_operator -> LAND EQUALS .)
    PRINT           reduce using rule 146 (assigning_operator -> LAND EQUALS .)


state 124

    (139) assignment_action -> location assigning_operator expression .

    SEMI            reduce using rule 139 (assignment_action -> location assigning_operator expression .)


state 125

    (145) assigning_operator -> MODULO EQUALS .

    IF              reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    MINUS           reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    NOT             reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    ARROW           reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    ID              reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    LPAREN          reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    ICONST          reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    FALSE           reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    TRUE            reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    CCONST          reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    NULL            reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    SCONST          reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    ABS             reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    ASC             reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    NUM             reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    UPPER           reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    LOWER           reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    LENGTH          reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    READ            reduce using rule 145 (assigning_operator -> MODULO EQUALS .)
    PRINT           reduce using rule 145 (assigning_operator -> MODULO EQUALS .)


state 126

    (177) parameter_list -> parameter .

    RPAREN          reduce using rule 177 (parameter_list -> parameter .)
    COMMA           reduce using rule 177 (parameter_list -> parameter .)


state 127

    (186) builtin_call -> builtin_name LPAREN parameter_list . RPAREN
    (178) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 206
    COMMA           shift and go to state 207


state 128

    (185) builtin_call -> builtin_name LPAREN RPAREN .

    ARROW           reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    MODULO          reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    LAND            reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQ              reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    NE              reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    GT              reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    GEQ             reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    LT              reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    LEQ             reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    SEMI            reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQUALS          reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 185 (builtin_call -> builtin_name LPAREN RPAREN .)


state 129

    (179) parameter -> expression .

    RPAREN          reduce using rule 179 (parameter -> expression .)
    COMMA           reduce using rule 179 (parameter -> expression .)


state 130

    (151) action_statement_list -> action_statement_list action_statement .

    OD              reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    ID              reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    EXIT            reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    RETURN          reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    RESULT          reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    IF              reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    DO              reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    ABS             reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    ASC             reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    NUM             reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    UPPER           reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    LOWER           reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    LENGTH          reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    READ            reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    PRINT           reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    FI              reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    ELSE            reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)
    ELSIF           reduce using rule 151 (action_statement_list -> action_statement_list action_statement .)


state 131

    (155) do_action -> DO action_statement_list OD .

    SEMI            reduce using rule 155 (do_action -> DO action_statement_list OD .)


state 132

    (162) iteration -> range_enumeration .

    WHILE           reduce using rule 162 (iteration -> range_enumeration .)
    SEMI            reduce using rule 162 (iteration -> range_enumeration .)


state 133

    (160) for_control -> FOR iteration .

    WHILE           reduce using rule 160 (for_control -> FOR iteration .)
    SEMI            reduce using rule 160 (for_control -> FOR iteration .)


state 134

    (161) iteration -> step_enumeration .

    WHILE           reduce using rule 161 (iteration -> step_enumeration .)
    SEMI            reduce using rule 161 (iteration -> step_enumeration .)


state 135

    (163) step_enumeration -> identifier . EQUALS start_value end_value
    (164) step_enumeration -> identifier . EQUALS start_value step_value end_value
    (165) step_enumeration -> identifier . EQUALS start_value DOWN end_value
    (166) step_enumeration -> identifier . EQUALS start_value step_value DOWN end_value
    (170) range_enumeration -> identifier . IN discrete_mode
    (171) range_enumeration -> identifier . DOWN IN discrete_mode

    EQUALS          shift and go to state 209
    IN              shift and go to state 210
    DOWN            shift and go to state 208


state 136

    (158) control_part -> for_control while_control .

    SEMI            reduce using rule 158 (control_part -> for_control while_control .)


state 137

    (172) while_control -> WHILE boolean_expression .

    SEMI            reduce using rule 172 (while_control -> WHILE boolean_expression .)


state 138

    (156) do_action -> DO control_part SEMI . action_statement_list OD
    (150) action_statement_list -> . action_statement
    (151) action_statement_list -> . action_statement_list action_statement
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 1
    action_statement_list          shift and go to state 211
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    if_action                      shift and go to state 35
    action_statement               shift and go to state 61
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    bracketed_action               shift and go to state 43
    identifier                     shift and go to state 64

state 139

    (130) action_statement -> identifier COLON . action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ID              shift and go to state 9
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 1
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    if_action                      shift and go to state 35
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 201
    dereferenced_reference         shift and go to state 18
    identifier                     shift and go to state 203
    bracketed_action               shift and go to state 43

state 140

    (35) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    EQUALS          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 35 (discrete_mode -> discrete_range_mode .)


state 141

    (44) composite_mode -> array_mode .

    EQUALS          reduce using rule 44 (composite_mode -> array_mode .)
    SEMI            reduce using rule 44 (composite_mode -> array_mode .)
    COMMA           reduce using rule 44 (composite_mode -> array_mode .)
    LOC             reduce using rule 44 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 44 (composite_mode -> array_mode .)


state 142

    (33) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    EQUALS          reduce using rule 33 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 33 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 33 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 33 (discrete_mode -> boolean_mode .)
    WHILE           reduce using rule 33 (discrete_mode -> boolean_mode .)


state 143

    (22) synonym_definition -> identifier_list EQUALS . constant_expression
    (23) constant_expression -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    array_primitive_value          shift and go to state 82
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    constant_expression            shift and go to state 212
    operand4                       shift and go to state 102
    expression                     shift and go to state 213
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 144

    (29) mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    EQUALS          reduce using rule 29 (mode -> discrete_mode .)
    SEMI            reduce using rule 29 (mode -> discrete_mode .)
    COMMA           reduce using rule 29 (mode -> discrete_mode .)
    LOC             reduce using rule 29 (mode -> discrete_mode .)
    RPAREN          reduce using rule 29 (mode -> discrete_mode .)
    LPAREN          shift and go to state 214


state 145

    (43) composite_mode -> string_mode .

    EQUALS          reduce using rule 43 (composite_mode -> string_mode .)
    SEMI            reduce using rule 43 (composite_mode -> string_mode .)
    COMMA           reduce using rule 43 (composite_mode -> string_mode .)
    LOC             reduce using rule 43 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 43 (composite_mode -> string_mode .)


state 146

    (21) synonym_definition -> identifier_list mode . EQUALS constant_expression

    EQUALS          shift and go to state 215


state 147

    (16) identifier_list -> identifier_list COMMA . identifier
    (17) identifier -> . ID

    ID              shift and go to state 9

    identifier                     shift and go to state 216

state 148

    (31) mode -> composite_mode .

    EQUALS          reduce using rule 31 (mode -> composite_mode .)
    SEMI            reduce using rule 31 (mode -> composite_mode .)
    COMMA           reduce using rule 31 (mode -> composite_mode .)
    LOC             reduce using rule 31 (mode -> composite_mode .)
    RPAREN          reduce using rule 31 (mode -> composite_mode .)


state 149

    (36) integer_mode -> INT .

    LPAREN          reduce using rule 36 (integer_mode -> INT .)
    EQUALS          reduce using rule 36 (integer_mode -> INT .)
    RPAREN          reduce using rule 36 (integer_mode -> INT .)
    LOC             reduce using rule 36 (integer_mode -> INT .)
    SEMI            reduce using rule 36 (integer_mode -> INT .)
    COMMA           reduce using rule 36 (integer_mode -> INT .)
    RBRACKET        reduce using rule 36 (integer_mode -> INT .)
    WHILE           reduce using rule 36 (integer_mode -> INT .)


state 150

    (45) string_mode -> CHARS . LBRACKET literal RBRACKET

    LBRACKET        shift and go to state 217


state 151

    (32) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    EQUALS          reduce using rule 32 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 32 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 32 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 32 (discrete_mode -> integer_mode .)
    WHILE           reduce using rule 32 (discrete_mode -> integer_mode .)


state 152

    (42) reference_mode -> REF . mode
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    ID              shift and go to state 9
    REF             shift and go to state 152
    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    CHARS           shift and go to state 150
    ARRAY           shift and go to state 157

    discrete_range_mode            shift and go to state 140
    array_mode                     shift and go to state 141
    composite_mode                 shift and go to state 148
    boolean_mode                   shift and go to state 142
    discrete_mode                  shift and go to state 144
    string_mode                    shift and go to state 145
    character_mode                 shift and go to state 154
    mode                           shift and go to state 218
    integer_mode                   shift and go to state 151
    identifier                     shift and go to state 158
    reference_mode                 shift and go to state 156

state 153

    (37) boolean_mode -> BOOL .

    LPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    EQUALS          reduce using rule 37 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 37 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 37 (boolean_mode -> BOOL .)
    LOC             reduce using rule 37 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    WHILE           reduce using rule 37 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 37 (boolean_mode -> BOOL .)


state 154

    (34) discrete_mode -> character_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    EQUALS          reduce using rule 34 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 34 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> character_mode .)
    LOC             reduce using rule 34 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 34 (discrete_mode -> character_mode .)
    WHILE           reduce using rule 34 (discrete_mode -> character_mode .)


state 155

    (38) character_mode -> CHAR .

    LPAREN          reduce using rule 38 (character_mode -> CHAR .)
    SEMI            reduce using rule 38 (character_mode -> CHAR .)
    COMMA           reduce using rule 38 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 38 (character_mode -> CHAR .)
    EQUALS          reduce using rule 38 (character_mode -> CHAR .)
    LOC             reduce using rule 38 (character_mode -> CHAR .)
    RPAREN          reduce using rule 38 (character_mode -> CHAR .)
    WHILE           reduce using rule 38 (character_mode -> CHAR .)


state 156

    (30) mode -> reference_mode .

    EQUALS          reduce using rule 30 (mode -> reference_mode .)
    SEMI            reduce using rule 30 (mode -> reference_mode .)
    COMMA           reduce using rule 30 (mode -> reference_mode .)
    LOC             reduce using rule 30 (mode -> reference_mode .)
    RPAREN          reduce using rule 30 (mode -> reference_mode .)


state 157

    (46) array_mode -> ARRAY . LBRACKET list_index_mode RBRACKET mode

    LBRACKET        shift and go to state 219


state 158

    (28) mode -> identifier .
    (39) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    EQUALS          reduce using rule 28 (mode -> identifier .)
    SEMI            reduce using rule 28 (mode -> identifier .)
    COMMA           reduce using rule 28 (mode -> identifier .)
    LOC             reduce using rule 28 (mode -> identifier .)
    RPAREN          reduce using rule 28 (mode -> identifier .)
    LPAREN          shift and go to state 220


state 159

    (20) synonym_list -> synonym_list COMMA . synonym_definition
    (21) synonym_definition -> . identifier_list mode EQUALS constant_expression
    (22) synonym_definition -> . identifier_list EQUALS constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 9

    identifier_list                shift and go to state 66
    synonym_definition             shift and go to state 221
    identifier                     shift and go to state 69

state 160

    (18) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ABS             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ASC             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    END             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)


state 161

    (67) array_slice -> array_location LBRACKET expression . COLON expression RBRACKET
    (65) expression_list -> expression .

    COLON           shift and go to state 222
    RBRACKET        reduce using rule 65 (expression_list -> expression .)
    COMMA           reduce using rule 65 (expression_list -> expression .)


state 162

    (64) array_element -> array_location LBRACKET expression_list . RBRACKET
    (66) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 224
    COMMA           shift and go to state 223


state 163

    (12) declaration -> identifier_list mode .
    (13) declaration -> identifier_list mode . initialization
    (14) initialization -> . EQUALS expression

    SEMI            reduce using rule 12 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 12 (declaration -> identifier_list mode .)
    EQUALS          shift and go to state 226

    initialization                 shift and go to state 225

state 164

    (11) declaration_list -> declaration_list COMMA . declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 9

    identifier_list                shift and go to state 72
    declaration                    shift and go to state 227
    identifier                     shift and go to state 69

state 165

    (9) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ABS             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ASC             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    END             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)


state 166

    (111) operand1 -> operand1 arithmetic_additive_operator . operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    monadic_operator               shift and go to state 92
    character_literal              shift and go to state 96
    operand3                       shift and go to state 75
    location                       shift and go to state 76
    parenthesized_expression       shift and go to state 94
    string_slice                   shift and go to state 30
    primitive_value                shift and go to state 95
    string_element                 shift and go to state 24
    boolean_literal                shift and go to state 78
    referenced_location            shift and go to state 88
    array_location                 shift and go to state 26
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    operand4                       shift and go to state 102
    builtin_call                   shift and go to state 12
    operand2                       shift and go to state 228
    array_slice                    shift and go to state 39
    literal                        shift and go to state 84
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    dereferenced_reference         shift and go to state 18
    identifier                     shift and go to state 109

state 167

    (113) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    LPAREN          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    ABS             reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    ASC             reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    NUM             reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    UPPER           reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    LOWER           reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    LENGTH          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    READ            reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    PRINT           reduce using rule 113 (arithmetic_additive_operator -> PLUS .)


state 168

    (114) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    LPAREN          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    ABS             reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    ASC             reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    NUM             reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    UPPER           reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    LOWER           reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    LENGTH          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    READ            reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    PRINT           reduce using rule 114 (arithmetic_additive_operator -> MINUS .)


state 169

    (112) operand1 -> operand1 string_concatenation_operator . operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    monadic_operator               shift and go to state 92
    character_literal              shift and go to state 96
    operand3                       shift and go to state 75
    location                       shift and go to state 76
    parenthesized_expression       shift and go to state 94
    string_slice                   shift and go to state 30
    primitive_value                shift and go to state 95
    string_element                 shift and go to state 24
    boolean_literal                shift and go to state 78
    referenced_location            shift and go to state 88
    array_location                 shift and go to state 26
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    operand4                       shift and go to state 102
    builtin_call                   shift and go to state 12
    operand2                       shift and go to state 229
    array_slice                    shift and go to state 39
    literal                        shift and go to state 84
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    dereferenced_reference         shift and go to state 18
    identifier                     shift and go to state 109

state 170

    (115) string_concatenation_operator -> LAND .

    MINUS           reduce using rule 115 (string_concatenation_operator -> LAND .)
    NOT             reduce using rule 115 (string_concatenation_operator -> LAND .)
    ARROW           reduce using rule 115 (string_concatenation_operator -> LAND .)
    ID              reduce using rule 115 (string_concatenation_operator -> LAND .)
    LPAREN          reduce using rule 115 (string_concatenation_operator -> LAND .)
    ICONST          reduce using rule 115 (string_concatenation_operator -> LAND .)
    FALSE           reduce using rule 115 (string_concatenation_operator -> LAND .)
    TRUE            reduce using rule 115 (string_concatenation_operator -> LAND .)
    CCONST          reduce using rule 115 (string_concatenation_operator -> LAND .)
    NULL            reduce using rule 115 (string_concatenation_operator -> LAND .)
    SCONST          reduce using rule 115 (string_concatenation_operator -> LAND .)
    ABS             reduce using rule 115 (string_concatenation_operator -> LAND .)
    ASC             reduce using rule 115 (string_concatenation_operator -> LAND .)
    NUM             reduce using rule 115 (string_concatenation_operator -> LAND .)
    UPPER           reduce using rule 115 (string_concatenation_operator -> LAND .)
    LOWER           reduce using rule 115 (string_concatenation_operator -> LAND .)
    LENGTH          reduce using rule 115 (string_concatenation_operator -> LAND .)
    READ            reduce using rule 115 (string_concatenation_operator -> LAND .)
    PRINT           reduce using rule 115 (string_concatenation_operator -> LAND .)


state 171

    (147) if_action -> IF boolean_expression then_clause . FI
    (148) if_action -> IF boolean_expression then_clause . else_clause FI
    (152) else_clause -> . ELSE action_statement_list
    (153) else_clause -> . ELSIF boolean_expression then_clause
    (154) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              shift and go to state 230
    ELSE            shift and go to state 233
    ELSIF           shift and go to state 231

    else_clause                    shift and go to state 232

state 172

    (149) then_clause -> THEN . action_statement_list
    (150) action_statement_list -> . action_statement
    (151) action_statement_list -> . action_statement_list action_statement
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 1
    action_statement_list          shift and go to state 234
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    if_action                      shift and go to state 35
    action_statement               shift and go to state 61
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    bracketed_action               shift and go to state 43
    identifier                     shift and go to state 64

state 173

    (100) operator1 -> membership_operator .

    MINUS           reduce using rule 100 (operator1 -> membership_operator .)
    NOT             reduce using rule 100 (operator1 -> membership_operator .)
    ARROW           reduce using rule 100 (operator1 -> membership_operator .)
    ID              reduce using rule 100 (operator1 -> membership_operator .)
    LPAREN          reduce using rule 100 (operator1 -> membership_operator .)
    ICONST          reduce using rule 100 (operator1 -> membership_operator .)
    FALSE           reduce using rule 100 (operator1 -> membership_operator .)
    TRUE            reduce using rule 100 (operator1 -> membership_operator .)
    CCONST          reduce using rule 100 (operator1 -> membership_operator .)
    NULL            reduce using rule 100 (operator1 -> membership_operator .)
    SCONST          reduce using rule 100 (operator1 -> membership_operator .)
    ABS             reduce using rule 100 (operator1 -> membership_operator .)
    ASC             reduce using rule 100 (operator1 -> membership_operator .)
    NUM             reduce using rule 100 (operator1 -> membership_operator .)
    UPPER           reduce using rule 100 (operator1 -> membership_operator .)
    LOWER           reduce using rule 100 (operator1 -> membership_operator .)
    LENGTH          reduce using rule 100 (operator1 -> membership_operator .)
    READ            reduce using rule 100 (operator1 -> membership_operator .)
    PRINT           reduce using rule 100 (operator1 -> membership_operator .)


state 174

    (102) relational_operator -> OR .

    MINUS           reduce using rule 102 (relational_operator -> OR .)
    NOT             reduce using rule 102 (relational_operator -> OR .)
    ARROW           reduce using rule 102 (relational_operator -> OR .)
    ID              reduce using rule 102 (relational_operator -> OR .)
    LPAREN          reduce using rule 102 (relational_operator -> OR .)
    ICONST          reduce using rule 102 (relational_operator -> OR .)
    FALSE           reduce using rule 102 (relational_operator -> OR .)
    TRUE            reduce using rule 102 (relational_operator -> OR .)
    CCONST          reduce using rule 102 (relational_operator -> OR .)
    NULL            reduce using rule 102 (relational_operator -> OR .)
    SCONST          reduce using rule 102 (relational_operator -> OR .)
    ABS             reduce using rule 102 (relational_operator -> OR .)
    ASC             reduce using rule 102 (relational_operator -> OR .)
    NUM             reduce using rule 102 (relational_operator -> OR .)
    UPPER           reduce using rule 102 (relational_operator -> OR .)
    LOWER           reduce using rule 102 (relational_operator -> OR .)
    LENGTH          reduce using rule 102 (relational_operator -> OR .)
    READ            reduce using rule 102 (relational_operator -> OR .)
    PRINT           reduce using rule 102 (relational_operator -> OR .)


state 175

    (108) relational_operator -> LEQ .

    MINUS           reduce using rule 108 (relational_operator -> LEQ .)
    NOT             reduce using rule 108 (relational_operator -> LEQ .)
    ARROW           reduce using rule 108 (relational_operator -> LEQ .)
    ID              reduce using rule 108 (relational_operator -> LEQ .)
    LPAREN          reduce using rule 108 (relational_operator -> LEQ .)
    ICONST          reduce using rule 108 (relational_operator -> LEQ .)
    FALSE           reduce using rule 108 (relational_operator -> LEQ .)
    TRUE            reduce using rule 108 (relational_operator -> LEQ .)
    CCONST          reduce using rule 108 (relational_operator -> LEQ .)
    NULL            reduce using rule 108 (relational_operator -> LEQ .)
    SCONST          reduce using rule 108 (relational_operator -> LEQ .)
    ABS             reduce using rule 108 (relational_operator -> LEQ .)
    ASC             reduce using rule 108 (relational_operator -> LEQ .)
    NUM             reduce using rule 108 (relational_operator -> LEQ .)
    UPPER           reduce using rule 108 (relational_operator -> LEQ .)
    LOWER           reduce using rule 108 (relational_operator -> LEQ .)
    LENGTH          reduce using rule 108 (relational_operator -> LEQ .)
    READ            reduce using rule 108 (relational_operator -> LEQ .)
    PRINT           reduce using rule 108 (relational_operator -> LEQ .)


state 176

    (107) relational_operator -> LT .

    MINUS           reduce using rule 107 (relational_operator -> LT .)
    NOT             reduce using rule 107 (relational_operator -> LT .)
    ARROW           reduce using rule 107 (relational_operator -> LT .)
    ID              reduce using rule 107 (relational_operator -> LT .)
    LPAREN          reduce using rule 107 (relational_operator -> LT .)
    ICONST          reduce using rule 107 (relational_operator -> LT .)
    FALSE           reduce using rule 107 (relational_operator -> LT .)
    TRUE            reduce using rule 107 (relational_operator -> LT .)
    CCONST          reduce using rule 107 (relational_operator -> LT .)
    NULL            reduce using rule 107 (relational_operator -> LT .)
    SCONST          reduce using rule 107 (relational_operator -> LT .)
    ABS             reduce using rule 107 (relational_operator -> LT .)
    ASC             reduce using rule 107 (relational_operator -> LT .)
    NUM             reduce using rule 107 (relational_operator -> LT .)
    UPPER           reduce using rule 107 (relational_operator -> LT .)
    LOWER           reduce using rule 107 (relational_operator -> LT .)
    LENGTH          reduce using rule 107 (relational_operator -> LT .)
    READ            reduce using rule 107 (relational_operator -> LT .)
    PRINT           reduce using rule 107 (relational_operator -> LT .)


state 177

    (98) operand0 -> operand0 operator1 . operand1
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    monadic_operator               shift and go to state 92
    character_literal              shift and go to state 96
    operand3                       shift and go to state 75
    location                       shift and go to state 76
    parenthesized_expression       shift and go to state 94
    string_slice                   shift and go to state 30
    primitive_value                shift and go to state 95
    boolean_literal                shift and go to state 78
    referenced_location            shift and go to state 88
    array_location                 shift and go to state 26
    operand1                       shift and go to state 235
    character_string_literal       shift and go to state 97
    string_element                 shift and go to state 24
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    operand4                       shift and go to state 102
    builtin_call                   shift and go to state 12
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    literal                        shift and go to state 84
    empty_literal                  shift and go to state 106
    value_array_slice              shift and go to state 90
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    dereferenced_reference         shift and go to state 18
    call_action                    shift and go to state 98
    identifier                     shift and go to state 109

state 178

    (106) relational_operator -> GEQ .

    MINUS           reduce using rule 106 (relational_operator -> GEQ .)
    NOT             reduce using rule 106 (relational_operator -> GEQ .)
    ARROW           reduce using rule 106 (relational_operator -> GEQ .)
    ID              reduce using rule 106 (relational_operator -> GEQ .)
    LPAREN          reduce using rule 106 (relational_operator -> GEQ .)
    ICONST          reduce using rule 106 (relational_operator -> GEQ .)
    FALSE           reduce using rule 106 (relational_operator -> GEQ .)
    TRUE            reduce using rule 106 (relational_operator -> GEQ .)
    CCONST          reduce using rule 106 (relational_operator -> GEQ .)
    NULL            reduce using rule 106 (relational_operator -> GEQ .)
    SCONST          reduce using rule 106 (relational_operator -> GEQ .)
    ABS             reduce using rule 106 (relational_operator -> GEQ .)
    ASC             reduce using rule 106 (relational_operator -> GEQ .)
    NUM             reduce using rule 106 (relational_operator -> GEQ .)
    UPPER           reduce using rule 106 (relational_operator -> GEQ .)
    LOWER           reduce using rule 106 (relational_operator -> GEQ .)
    LENGTH          reduce using rule 106 (relational_operator -> GEQ .)
    READ            reduce using rule 106 (relational_operator -> GEQ .)
    PRINT           reduce using rule 106 (relational_operator -> GEQ .)


state 179

    (109) membership_operator -> IN .

    MINUS           reduce using rule 109 (membership_operator -> IN .)
    NOT             reduce using rule 109 (membership_operator -> IN .)
    ARROW           reduce using rule 109 (membership_operator -> IN .)
    ID              reduce using rule 109 (membership_operator -> IN .)
    LPAREN          reduce using rule 109 (membership_operator -> IN .)
    ICONST          reduce using rule 109 (membership_operator -> IN .)
    FALSE           reduce using rule 109 (membership_operator -> IN .)
    TRUE            reduce using rule 109 (membership_operator -> IN .)
    CCONST          reduce using rule 109 (membership_operator -> IN .)
    NULL            reduce using rule 109 (membership_operator -> IN .)
    SCONST          reduce using rule 109 (membership_operator -> IN .)
    ABS             reduce using rule 109 (membership_operator -> IN .)
    ASC             reduce using rule 109 (membership_operator -> IN .)
    NUM             reduce using rule 109 (membership_operator -> IN .)
    UPPER           reduce using rule 109 (membership_operator -> IN .)
    LOWER           reduce using rule 109 (membership_operator -> IN .)
    LENGTH          reduce using rule 109 (membership_operator -> IN .)
    READ            reduce using rule 109 (membership_operator -> IN .)
    PRINT           reduce using rule 109 (membership_operator -> IN .)


state 180

    (104) relational_operator -> NE .

    MINUS           reduce using rule 104 (relational_operator -> NE .)
    NOT             reduce using rule 104 (relational_operator -> NE .)
    ARROW           reduce using rule 104 (relational_operator -> NE .)
    ID              reduce using rule 104 (relational_operator -> NE .)
    LPAREN          reduce using rule 104 (relational_operator -> NE .)
    ICONST          reduce using rule 104 (relational_operator -> NE .)
    FALSE           reduce using rule 104 (relational_operator -> NE .)
    TRUE            reduce using rule 104 (relational_operator -> NE .)
    CCONST          reduce using rule 104 (relational_operator -> NE .)
    NULL            reduce using rule 104 (relational_operator -> NE .)
    SCONST          reduce using rule 104 (relational_operator -> NE .)
    ABS             reduce using rule 104 (relational_operator -> NE .)
    ASC             reduce using rule 104 (relational_operator -> NE .)
    NUM             reduce using rule 104 (relational_operator -> NE .)
    UPPER           reduce using rule 104 (relational_operator -> NE .)
    LOWER           reduce using rule 104 (relational_operator -> NE .)
    LENGTH          reduce using rule 104 (relational_operator -> NE .)
    READ            reduce using rule 104 (relational_operator -> NE .)
    PRINT           reduce using rule 104 (relational_operator -> NE .)


state 181

    (105) relational_operator -> GT .

    MINUS           reduce using rule 105 (relational_operator -> GT .)
    NOT             reduce using rule 105 (relational_operator -> GT .)
    ARROW           reduce using rule 105 (relational_operator -> GT .)
    ID              reduce using rule 105 (relational_operator -> GT .)
    LPAREN          reduce using rule 105 (relational_operator -> GT .)
    ICONST          reduce using rule 105 (relational_operator -> GT .)
    FALSE           reduce using rule 105 (relational_operator -> GT .)
    TRUE            reduce using rule 105 (relational_operator -> GT .)
    CCONST          reduce using rule 105 (relational_operator -> GT .)
    NULL            reduce using rule 105 (relational_operator -> GT .)
    SCONST          reduce using rule 105 (relational_operator -> GT .)
    ABS             reduce using rule 105 (relational_operator -> GT .)
    ASC             reduce using rule 105 (relational_operator -> GT .)
    NUM             reduce using rule 105 (relational_operator -> GT .)
    UPPER           reduce using rule 105 (relational_operator -> GT .)
    LOWER           reduce using rule 105 (relational_operator -> GT .)
    LENGTH          reduce using rule 105 (relational_operator -> GT .)
    READ            reduce using rule 105 (relational_operator -> GT .)
    PRINT           reduce using rule 105 (relational_operator -> GT .)


state 182

    (101) relational_operator -> AND .

    MINUS           reduce using rule 101 (relational_operator -> AND .)
    NOT             reduce using rule 101 (relational_operator -> AND .)
    ARROW           reduce using rule 101 (relational_operator -> AND .)
    ID              reduce using rule 101 (relational_operator -> AND .)
    LPAREN          reduce using rule 101 (relational_operator -> AND .)
    ICONST          reduce using rule 101 (relational_operator -> AND .)
    FALSE           reduce using rule 101 (relational_operator -> AND .)
    TRUE            reduce using rule 101 (relational_operator -> AND .)
    CCONST          reduce using rule 101 (relational_operator -> AND .)
    NULL            reduce using rule 101 (relational_operator -> AND .)
    SCONST          reduce using rule 101 (relational_operator -> AND .)
    ABS             reduce using rule 101 (relational_operator -> AND .)
    ASC             reduce using rule 101 (relational_operator -> AND .)
    NUM             reduce using rule 101 (relational_operator -> AND .)
    UPPER           reduce using rule 101 (relational_operator -> AND .)
    LOWER           reduce using rule 101 (relational_operator -> AND .)
    LENGTH          reduce using rule 101 (relational_operator -> AND .)
    READ            reduce using rule 101 (relational_operator -> AND .)
    PRINT           reduce using rule 101 (relational_operator -> AND .)


state 183

    (103) relational_operator -> EQ .

    MINUS           reduce using rule 103 (relational_operator -> EQ .)
    NOT             reduce using rule 103 (relational_operator -> EQ .)
    ARROW           reduce using rule 103 (relational_operator -> EQ .)
    ID              reduce using rule 103 (relational_operator -> EQ .)
    LPAREN          reduce using rule 103 (relational_operator -> EQ .)
    ICONST          reduce using rule 103 (relational_operator -> EQ .)
    FALSE           reduce using rule 103 (relational_operator -> EQ .)
    TRUE            reduce using rule 103 (relational_operator -> EQ .)
    CCONST          reduce using rule 103 (relational_operator -> EQ .)
    NULL            reduce using rule 103 (relational_operator -> EQ .)
    SCONST          reduce using rule 103 (relational_operator -> EQ .)
    ABS             reduce using rule 103 (relational_operator -> EQ .)
    ASC             reduce using rule 103 (relational_operator -> EQ .)
    NUM             reduce using rule 103 (relational_operator -> EQ .)
    UPPER           reduce using rule 103 (relational_operator -> EQ .)
    LOWER           reduce using rule 103 (relational_operator -> EQ .)
    LENGTH          reduce using rule 103 (relational_operator -> EQ .)
    READ            reduce using rule 103 (relational_operator -> EQ .)
    PRINT           reduce using rule 103 (relational_operator -> EQ .)


state 184

    (99) operator1 -> relational_operator .

    MINUS           reduce using rule 99 (operator1 -> relational_operator .)
    NOT             reduce using rule 99 (operator1 -> relational_operator .)
    ARROW           reduce using rule 99 (operator1 -> relational_operator .)
    ID              reduce using rule 99 (operator1 -> relational_operator .)
    LPAREN          reduce using rule 99 (operator1 -> relational_operator .)
    ICONST          reduce using rule 99 (operator1 -> relational_operator .)
    FALSE           reduce using rule 99 (operator1 -> relational_operator .)
    TRUE            reduce using rule 99 (operator1 -> relational_operator .)
    CCONST          reduce using rule 99 (operator1 -> relational_operator .)
    NULL            reduce using rule 99 (operator1 -> relational_operator .)
    SCONST          reduce using rule 99 (operator1 -> relational_operator .)
    ABS             reduce using rule 99 (operator1 -> relational_operator .)
    ASC             reduce using rule 99 (operator1 -> relational_operator .)
    NUM             reduce using rule 99 (operator1 -> relational_operator .)
    UPPER           reduce using rule 99 (operator1 -> relational_operator .)
    LOWER           reduce using rule 99 (operator1 -> relational_operator .)
    LENGTH          reduce using rule 99 (operator1 -> relational_operator .)
    READ            reduce using rule 99 (operator1 -> relational_operator .)
    PRINT           reduce using rule 99 (operator1 -> relational_operator .)


state 185

    (84) value_array_element -> array_primitive_value LBRACKET . expression_list RBRACKET
    (85) value_array_slice -> array_primitive_value LBRACKET . expression COLON expression RBRACKET
    (65) expression_list -> . expression
    (66) expression_list -> . expression_list COMMA expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    array_primitive_value          shift and go to state 82
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression_list                shift and go to state 237
    expression                     shift and go to state 236
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 186

    (87) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 238


state 187

    (122) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    LAND            reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    EQ              reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    NE              reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    GT              reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    GEQ             reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    LT              reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    LEQ             reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 122 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 122 (operand3 -> monadic_operator operand4 .)


state 188

    (128) referenced_location -> ARROW location .
    (58) dereferenced_reference -> location . ARROW
    (68) array_location -> location .

    TIMES           reduce using rule 128 (referenced_location -> ARROW location .)
    DIVIDE          reduce using rule 128 (referenced_location -> ARROW location .)
    MODULO          reduce using rule 128 (referenced_location -> ARROW location .)
    PLUS            reduce using rule 128 (referenced_location -> ARROW location .)
    MINUS           reduce using rule 128 (referenced_location -> ARROW location .)
    LAND            reduce using rule 128 (referenced_location -> ARROW location .)
    AND             reduce using rule 128 (referenced_location -> ARROW location .)
    OR              reduce using rule 128 (referenced_location -> ARROW location .)
    EQ              reduce using rule 128 (referenced_location -> ARROW location .)
    NE              reduce using rule 128 (referenced_location -> ARROW location .)
    GT              reduce using rule 128 (referenced_location -> ARROW location .)
    GEQ             reduce using rule 128 (referenced_location -> ARROW location .)
    LT              reduce using rule 128 (referenced_location -> ARROW location .)
    LEQ             reduce using rule 128 (referenced_location -> ARROW location .)
    IN              reduce using rule 128 (referenced_location -> ARROW location .)
    SEMI            reduce using rule 128 (referenced_location -> ARROW location .)
    DOWN            reduce using rule 128 (referenced_location -> ARROW location .)
    TO              reduce using rule 128 (referenced_location -> ARROW location .)
    BY              reduce using rule 128 (referenced_location -> ARROW location .)
    THEN            reduce using rule 128 (referenced_location -> ARROW location .)
    RPAREN          reduce using rule 128 (referenced_location -> ARROW location .)
    COMMA           reduce using rule 128 (referenced_location -> ARROW location .)
    COLON           reduce using rule 128 (referenced_location -> ARROW location .)
    RBRACKET        reduce using rule 128 (referenced_location -> ARROW location .)
    ELSE            reduce using rule 128 (referenced_location -> ARROW location .)
    ELSIF           reduce using rule 128 (referenced_location -> ARROW location .)
    FI              reduce using rule 128 (referenced_location -> ARROW location .)
    WHILE           reduce using rule 128 (referenced_location -> ARROW location .)
    ARROW           shift and go to state 49
    LBRACKET        reduce using rule 68 (array_location -> location .)


state 189

    (90) conditional_expression -> IF boolean_expression . then_expression else_expression FI
    (91) conditional_expression -> IF boolean_expression . then_expression elsif_expression else_expression FI
    (93) then_expression -> . THEN expression

    THEN            shift and go to state 240

    then_expression                shift and go to state 239

state 190

    (118) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    LPAREN          reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    ABS             reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    ASC             reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    NUM             reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    UPPER           reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    LOWER           reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    LENGTH          reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    READ            reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)
    PRINT           reduce using rule 118 (arithmetic_multiplicative_operator -> TIMES .)


state 191

    (119) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    LPAREN          reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    ABS             reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASC             reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    NUM             reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    UPPER           reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    LOWER           reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    LENGTH          reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    READ            reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)
    PRINT           reduce using rule 119 (arithmetic_multiplicative_operator -> DIVIDE .)


state 192

    (117) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    monadic_operator               shift and go to state 92
    character_literal              shift and go to state 96
    operand3                       shift and go to state 241
    location                       shift and go to state 76
    parenthesized_expression       shift and go to state 94
    string_slice                   shift and go to state 30
    primitive_value                shift and go to state 95
    string_element                 shift and go to state 24
    boolean_literal                shift and go to state 78
    referenced_location            shift and go to state 88
    array_location                 shift and go to state 26
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    operand4                       shift and go to state 102
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    literal                        shift and go to state 84
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    dereferenced_reference         shift and go to state 18
    identifier                     shift and go to state 109

state 193

    (120) arithmetic_multiplicative_operator -> MODULO .

    MINUS           reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    ARROW           reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    ID              reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    LPAREN          reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    ABS             reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    ASC             reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    NUM             reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    UPPER           reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    LOWER           reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    LENGTH          reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    READ            reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)
    PRINT           reduce using rule 120 (arithmetic_multiplicative_operator -> MODULO .)


state 194

    (27) mode_definition -> identifier_list EQUALS . mode
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    ID              shift and go to state 9
    REF             shift and go to state 152
    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    CHARS           shift and go to state 150
    ARRAY           shift and go to state 157

    discrete_range_mode            shift and go to state 140
    array_mode                     shift and go to state 141
    composite_mode                 shift and go to state 148
    boolean_mode                   shift and go to state 142
    discrete_mode                  shift and go to state 144
    string_mode                    shift and go to state 145
    character_mode                 shift and go to state 154
    mode                           shift and go to state 242
    integer_mode                   shift and go to state 151
    identifier                     shift and go to state 158
    reference_mode                 shift and go to state 156

state 195

    (26) newmode_list -> newmode_list COMMA . mode_definition
    (27) mode_definition -> . identifier_list EQUALS mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 9

    mode_definition                shift and go to state 243
    identifier                     shift and go to state 69
    identifier_list                shift and go to state 112

state 196

    (24) newmode_statement -> TYPE newmode_list SEMI .

    END             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DCL             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ABS             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ASC             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)


state 197

    (59) string_element -> identifier LBRACKET start_element . RBRACKET

    RBRACKET        shift and go to state 244


state 198

    (61) string_slice -> identifier LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 245


state 199

    (62) left_element -> expression .
    (60) start_element -> expression .

    COLON           reduce using rule 62 (left_element -> expression .)
    RBRACKET        reduce using rule 60 (start_element -> expression .)


state 200

    (195) procedure_statement -> identifier COLON procedure_definition . SEMI

    SEMI            shift and go to state 246


state 201

    (130) action_statement -> identifier COLON action . SEMI

    SEMI            shift and go to state 247


state 202

    (196) procedure_definition -> PROC . LPAREN RPAREN SEMI statement_list END
    (197) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMI statement_list END
    (198) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMI statement_list END
    (199) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END

    LPAREN          shift and go to state 248


state 203

    (51) location -> identifier .
    (175) procedure_call -> identifier . LPAREN RPAREN
    (176) procedure_call -> identifier . LPAREN parameter_list RPAREN
    (61) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> identifier . LBRACKET start_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 51 (location -> identifier .)
    EQUALS          reduce using rule 51 (location -> identifier .)
    PLUS            reduce using rule 51 (location -> identifier .)
    MINUS           reduce using rule 51 (location -> identifier .)
    TIMES           reduce using rule 51 (location -> identifier .)
    DIVIDE          reduce using rule 51 (location -> identifier .)
    MODULO          reduce using rule 51 (location -> identifier .)
    LAND            reduce using rule 51 (location -> identifier .)
    LPAREN          shift and go to state 118
    LBRACKET        shift and go to state 116

  ! LBRACKET        [ reduce using rule 51 (location -> identifier .) ]


state 204

    (176) procedure_call -> identifier LPAREN parameter_list . RPAREN
    (178) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 249
    COMMA           shift and go to state 207


state 205

    (175) procedure_call -> identifier LPAREN RPAREN .

    ARROW           reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    TIMES           reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    DIVIDE          reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    MODULO          reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    PLUS            reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    MINUS           reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    LAND            reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    AND             reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    OR              reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    EQ              reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    NE              reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    GT              reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    GEQ             reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    LT              reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    LEQ             reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    IN              reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    COLON           reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    LBRACKET        reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    SEMI            reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    DOWN            reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    TO              reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    BY              reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    EQUALS          reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    RPAREN          reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    COMMA           reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    WHILE           reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    RBRACKET        reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    THEN            reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    ELSE            reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    ELSIF           reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)
    FI              reduce using rule 175 (procedure_call -> identifier LPAREN RPAREN .)


state 206

    (186) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LAND            reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    NE              reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GT              reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LT              reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 186 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 207

    (178) parameter_list -> parameter_list COMMA . parameter
    (179) parameter -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    literal                        shift and go to state 84
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 129
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    parameter                      shift and go to state 250
    identifier                     shift and go to state 109

state 208

    (171) range_enumeration -> identifier DOWN . IN discrete_mode

    IN              shift and go to state 251


state 209

    (163) step_enumeration -> identifier EQUALS . start_value end_value
    (164) step_enumeration -> identifier EQUALS . start_value step_value end_value
    (165) step_enumeration -> identifier EQUALS . start_value DOWN end_value
    (166) step_enumeration -> identifier EQUALS . start_value step_value DOWN end_value
    (167) start_value -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    start_value                    shift and go to state 252
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 253
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 210

    (170) range_enumeration -> identifier IN . discrete_mode
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    ID              shift and go to state 9

    discrete_range_mode            shift and go to state 140
    discrete_mode                  shift and go to state 254
    character_mode                 shift and go to state 154
    integer_mode                   shift and go to state 151
    boolean_mode                   shift and go to state 142
    identifier                     shift and go to state 255

state 211

    (156) do_action -> DO control_part SEMI action_statement_list . OD
    (151) action_statement_list -> action_statement_list . action_statement
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    OD              shift and go to state 256
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 1
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    if_action                      shift and go to state 35
    action_statement               shift and go to state 130
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    bracketed_action               shift and go to state 43
    identifier                     shift and go to state 64

state 212

    (22) synonym_definition -> identifier_list EQUALS constant_expression .

    SEMI            reduce using rule 22 (synonym_definition -> identifier_list EQUALS constant_expression .)
    COMMA           reduce using rule 22 (synonym_definition -> identifier_list EQUALS constant_expression .)


state 213

    (23) constant_expression -> expression .

    SEMI            reduce using rule 23 (constant_expression -> expression .)
    COMMA           reduce using rule 23 (constant_expression -> expression .)


state 214

    (40) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (41) literal_range -> . expression COLON expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    literal_range                  shift and go to state 257
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 258
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 215

    (21) synonym_definition -> identifier_list mode EQUALS . constant_expression
    (23) constant_expression -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    array_primitive_value          shift and go to state 82
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    constant_expression            shift and go to state 259
    operand4                       shift and go to state 102
    expression                     shift and go to state 213
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 216

    (16) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    EQUALS          reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)


state 217

    (45) string_mode -> CHARS LBRACKET . literal RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST

    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100

    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    literal                        shift and go to state 260
    boolean_literal                shift and go to state 78
    character_string_literal       shift and go to state 97
    character_literal              shift and go to state 96

state 218

    (42) reference_mode -> REF mode .

    EQUALS          reduce using rule 42 (reference_mode -> REF mode .)
    SEMI            reduce using rule 42 (reference_mode -> REF mode .)
    COMMA           reduce using rule 42 (reference_mode -> REF mode .)
    LOC             reduce using rule 42 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 42 (reference_mode -> REF mode .)


state 219

    (46) array_mode -> ARRAY LBRACKET . list_index_mode RBRACKET mode
    (47) list_index_mode -> . index_mode
    (48) list_index_mode -> . list_index_mode COMMA index_mode
    (49) index_mode -> . discrete_mode
    (50) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (41) literal_range -> . expression COLON expression
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (17) identifier -> . ID
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    ID              shift and go to state 9
    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    discrete_range_mode            shift and go to state 140
    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    discrete_mode                  shift and go to state 261
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    integer_mode                   shift and go to state 151
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    character_mode                 shift and go to state 154
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    index_mode                     shift and go to state 262
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    boolean_mode                   shift and go to state 142
    literal_range                  shift and go to state 263
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 258
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    list_index_mode                shift and go to state 264
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 265

state 220

    (39) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (41) literal_range -> . expression COLON expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    literal_range                  shift and go to state 266
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 258
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 221

    (20) synonym_list -> synonym_list COMMA synonym_definition .

    SEMI            reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)
    COMMA           reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)


state 222

    (67) array_slice -> array_location LBRACKET expression COLON . expression RBRACKET
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 267
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 223

    (66) expression_list -> expression_list COMMA . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 268
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 224

    (64) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUALS          reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LAND            reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NE              reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GEQ             reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LEQ             reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 64 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 225

    (13) declaration -> identifier_list mode initialization .

    SEMI            reduce using rule 13 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 13 (declaration -> identifier_list mode initialization .)


state 226

    (14) initialization -> EQUALS . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 269
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 227

    (11) declaration_list -> declaration_list COMMA declaration .

    SEMI            reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)


state 228

    (111) operand1 -> operand1 arithmetic_additive_operator operand2 .
    (117) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (118) arithmetic_multiplicative_operator -> . TIMES
    (119) arithmetic_multiplicative_operator -> . DIVIDE
    (120) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    MINUS           reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    LAND            reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    AND             reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    OR              reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    EQ              reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    NE              reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    GT              reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    GEQ             reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    LT              reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    LEQ             reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    IN              reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    COLON           reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    RPAREN          reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    THEN            reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    RBRACKET        reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    COMMA           reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    SEMI            reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    DOWN            reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    TO              reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    BY              reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    ELSE            reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    ELSIF           reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    FI              reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    WHILE           reduce using rule 111 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    TIMES           shift and go to state 190
    DIVIDE          shift and go to state 191
    MODULO          shift and go to state 193

    arithmetic_multiplicative_operator shift and go to state 192

state 229

    (112) operand1 -> operand1 string_concatenation_operator operand2 .
    (117) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (118) arithmetic_multiplicative_operator -> . TIMES
    (119) arithmetic_multiplicative_operator -> . DIVIDE
    (120) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    MINUS           reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    LAND            reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    AND             reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    OR              reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    EQ              reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    NE              reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    GT              reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    GEQ             reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    LT              reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    LEQ             reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    IN              reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    COLON           reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    RPAREN          reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    THEN            reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    RBRACKET        reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    COMMA           reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    SEMI            reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    DOWN            reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    TO              reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    BY              reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    ELSE            reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    ELSIF           reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    FI              reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    WHILE           reduce using rule 112 (operand1 -> operand1 string_concatenation_operator operand2 .)
    TIMES           shift and go to state 190
    DIVIDE          shift and go to state 191
    MODULO          shift and go to state 193

    arithmetic_multiplicative_operator shift and go to state 192

state 230

    (147) if_action -> IF boolean_expression then_clause FI .

    SEMI            reduce using rule 147 (if_action -> IF boolean_expression then_clause FI .)


state 231

    (153) else_clause -> ELSIF . boolean_expression then_clause
    (154) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (92) boolean_expression -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    boolean_expression             shift and go to state 270
    operand0                       shift and go to state 81
    array_primitive_value          shift and go to state 82
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 103
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 232

    (148) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 271


state 233

    (152) else_clause -> ELSE . action_statement_list
    (150) action_statement_list -> . action_statement
    (151) action_statement_list -> . action_statement_list action_statement
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 1
    action_statement_list          shift and go to state 272
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    if_action                      shift and go to state 35
    action_statement               shift and go to state 61
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    bracketed_action               shift and go to state 43
    identifier                     shift and go to state 64

state 234

    (149) then_clause -> THEN action_statement_list .
    (151) action_statement_list -> action_statement_list . action_statement
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    FI              reduce using rule 149 (then_clause -> THEN action_statement_list .)
    ELSE            reduce using rule 149 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 149 (then_clause -> THEN action_statement_list .)
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 1
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    if_action                      shift and go to state 35
    action_statement               shift and go to state 130
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    bracketed_action               shift and go to state 43
    identifier                     shift and go to state 64

state 235

    (98) operand0 -> operand0 operator1 operand1 .
    (111) operand1 -> operand1 . arithmetic_additive_operator operand2
    (112) operand1 -> operand1 . string_concatenation_operator operand2
    (113) arithmetic_additive_operator -> . PLUS
    (114) arithmetic_additive_operator -> . MINUS
    (115) string_concatenation_operator -> . LAND

    AND             reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    EQ              reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    NE              reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    GT              reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    GEQ             reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    LT              reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    LEQ             reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 98 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168
    LAND            shift and go to state 170

    arithmetic_additive_operator   shift and go to state 166
    string_concatenation_operator  shift and go to state 169

state 236

    (85) value_array_slice -> array_primitive_value LBRACKET expression . COLON expression RBRACKET
    (65) expression_list -> expression .

    COLON           shift and go to state 273
    RBRACKET        reduce using rule 65 (expression_list -> expression .)
    COMMA           reduce using rule 65 (expression_list -> expression .)


state 237

    (84) value_array_element -> array_primitive_value LBRACKET expression_list . RBRACKET
    (66) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 274
    COMMA           shift and go to state 223


state 238

    (87) parenthesized_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)


state 239

    (90) conditional_expression -> IF boolean_expression then_expression . else_expression FI
    (91) conditional_expression -> IF boolean_expression then_expression . elsif_expression else_expression FI
    (94) else_expression -> . ELSE expression
    (95) elsif_expression -> . ELSIF boolean_expression then_expression
    (96) elsif_expression -> . elsif_expression ELSIF boolean_expression then_expression

    ELSE            shift and go to state 275
    ELSIF           shift and go to state 276

    elsif_expression               shift and go to state 278
    else_expression                shift and go to state 277

state 240

    (93) then_expression -> THEN . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 279
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 241

    (117) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LAND            reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQ              reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NE              reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GT              reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GEQ             reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LT              reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LEQ             reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 117 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 242

    (27) mode_definition -> identifier_list EQUALS mode .

    SEMI            reduce using rule 27 (mode_definition -> identifier_list EQUALS mode .)
    COMMA           reduce using rule 27 (mode_definition -> identifier_list EQUALS mode .)


state 243

    (26) newmode_list -> newmode_list COMMA mode_definition .

    SEMI            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)


state 244

    (59) string_element -> identifier LBRACKET start_element RBRACKET .

    ARROW           reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TIMES           reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DIVIDE          reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MODULO          reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    PLUS            reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MINUS           reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LAND            reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    AND             reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    OR              reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    EQ              reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    NE              reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GT              reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GEQ             reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LT              reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LEQ             reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    IN              reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    THEN            reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    SEMI            reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RPAREN          reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COMMA           reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COLON           reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RBRACKET        reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DOWN            reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TO              reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    BY              reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSE            reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSIF           reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    FI              reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    WHILE           reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LBRACKET        reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)
    EQUALS          reduce using rule 59 (string_element -> identifier LBRACKET start_element RBRACKET .)


state 245

    (61) string_slice -> identifier LBRACKET left_element COLON . right_element RBRACKET
    (63) right_element -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    right_element                  shift and go to state 280
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 281
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 246

    (195) procedure_statement -> identifier COLON procedure_definition SEMI .

    END             reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    DCL             reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    SYN             reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    TYPE            reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    ID              reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    EXIT            reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    RETURN          reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    RESULT          reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    IF              reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    DO              reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    ABS             reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    ASC             reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    NUM             reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    UPPER           reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    LOWER           reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    LENGTH          reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    READ            reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    PRINT           reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    $end            reduce using rule 195 (procedure_statement -> identifier COLON procedure_definition SEMI .)


state 247

    (130) action_statement -> identifier COLON action SEMI .

    ID              reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    EXIT            reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    RETURN          reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    RESULT          reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    IF              reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    DO              reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    ABS             reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    ASC             reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    NUM             reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    UPPER           reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    LOWER           reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    LENGTH          reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    READ            reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    PRINT           reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    FI              reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    ELSE            reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    ELSIF           reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    DCL             reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    SYN             reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    TYPE            reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    $end            reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    END             reduce using rule 130 (action_statement -> identifier COLON action SEMI .)
    OD              reduce using rule 130 (action_statement -> identifier COLON action SEMI .)


state 248

    (196) procedure_definition -> PROC LPAREN . RPAREN SEMI statement_list END
    (197) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMI statement_list END
    (198) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMI statement_list END
    (199) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI statement_list END
    (200) formal_parameter_list -> . formal_parameter
    (201) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (202) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    RPAREN          shift and go to state 283
    ID              shift and go to state 9

    identifier_list                shift and go to state 282
    identifier                     shift and go to state 69
    formal_parameter_list          shift and go to state 285
    formal_parameter               shift and go to state 284

state 249

    (176) procedure_call -> identifier LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LAND            reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    AND             reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    OR              reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    NE              reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GT              reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LT              reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    IN              reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TO              reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    BY              reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    FI              reduce using rule 176 (procedure_call -> identifier LPAREN parameter_list RPAREN .)


state 250

    (178) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 178 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 178 (parameter_list -> parameter_list COMMA parameter .)


state 251

    (171) range_enumeration -> identifier DOWN IN . discrete_mode
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    ID              shift and go to state 9

    discrete_range_mode            shift and go to state 140
    discrete_mode                  shift and go to state 286
    character_mode                 shift and go to state 154
    integer_mode                   shift and go to state 151
    boolean_mode                   shift and go to state 142
    identifier                     shift and go to state 255

state 252

    (163) step_enumeration -> identifier EQUALS start_value . end_value
    (164) step_enumeration -> identifier EQUALS start_value . step_value end_value
    (165) step_enumeration -> identifier EQUALS start_value . DOWN end_value
    (166) step_enumeration -> identifier EQUALS start_value . step_value DOWN end_value
    (169) end_value -> . TO expression
    (168) step_value -> . BY expression

    DOWN            shift and go to state 287
    TO              shift and go to state 291
    BY              shift and go to state 288

    end_value                      shift and go to state 289
    step_value                     shift and go to state 290

state 253

    (167) start_value -> expression .

    DOWN            reduce using rule 167 (start_value -> expression .)
    TO              reduce using rule 167 (start_value -> expression .)
    BY              reduce using rule 167 (start_value -> expression .)


state 254

    (170) range_enumeration -> identifier IN discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 170 (range_enumeration -> identifier IN discrete_mode .)
    SEMI            reduce using rule 170 (range_enumeration -> identifier IN discrete_mode .)
    LPAREN          shift and go to state 214


state 255

    (39) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 220


state 256

    (156) do_action -> DO control_part SEMI action_statement_list OD .

    SEMI            reduce using rule 156 (do_action -> DO control_part SEMI action_statement_list OD .)


state 257

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 292


state 258

    (41) literal_range -> expression . COLON expression

    COLON           shift and go to state 293


state 259

    (21) synonym_definition -> identifier_list mode EQUALS constant_expression .

    SEMI            reduce using rule 21 (synonym_definition -> identifier_list mode EQUALS constant_expression .)
    COMMA           reduce using rule 21 (synonym_definition -> identifier_list mode EQUALS constant_expression .)


state 260

    (45) string_mode -> CHARS LBRACKET literal . RBRACKET

    RBRACKET        shift and go to state 294


state 261

    (49) index_mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACKET        reduce using rule 49 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 49 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 214


state 262

    (47) list_index_mode -> index_mode .

    RBRACKET        reduce using rule 47 (list_index_mode -> index_mode .)
    COMMA           reduce using rule 47 (list_index_mode -> index_mode .)


state 263

    (50) index_mode -> literal_range .

    RBRACKET        reduce using rule 50 (index_mode -> literal_range .)
    COMMA           reduce using rule 50 (index_mode -> literal_range .)


state 264

    (46) array_mode -> ARRAY LBRACKET list_index_mode . RBRACKET mode
    (48) list_index_mode -> list_index_mode . COMMA index_mode

    RBRACKET        shift and go to state 296
    COMMA           shift and go to state 295


state 265

    (39) discrete_range_mode -> identifier . LPAREN literal_range RPAREN
    (51) location -> identifier .
    (61) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> identifier . LBRACKET start_element RBRACKET
    (175) procedure_call -> identifier . LPAREN RPAREN
    (176) procedure_call -> identifier . LPAREN parameter_list RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          shift and go to state 297
    ARROW           reduce using rule 51 (location -> identifier .)
    TIMES           reduce using rule 51 (location -> identifier .)
    DIVIDE          reduce using rule 51 (location -> identifier .)
    MODULO          reduce using rule 51 (location -> identifier .)
    PLUS            reduce using rule 51 (location -> identifier .)
    MINUS           reduce using rule 51 (location -> identifier .)
    LAND            reduce using rule 51 (location -> identifier .)
    AND             reduce using rule 51 (location -> identifier .)
    OR              reduce using rule 51 (location -> identifier .)
    EQ              reduce using rule 51 (location -> identifier .)
    NE              reduce using rule 51 (location -> identifier .)
    GT              reduce using rule 51 (location -> identifier .)
    GEQ             reduce using rule 51 (location -> identifier .)
    LT              reduce using rule 51 (location -> identifier .)
    LEQ             reduce using rule 51 (location -> identifier .)
    IN              reduce using rule 51 (location -> identifier .)
    COLON           reduce using rule 51 (location -> identifier .)
    LBRACKET        shift and go to state 116

  ! LBRACKET        [ reduce using rule 51 (location -> identifier .) ]


state 266

    (39) discrete_range_mode -> identifier LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 298


state 267

    (67) array_slice -> array_location LBRACKET expression COLON expression . RBRACKET

    RBRACKET        shift and go to state 299


state 268

    (66) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 66 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 66 (expression_list -> expression_list COMMA expression .)


state 269

    (14) initialization -> EQUALS expression .

    SEMI            reduce using rule 14 (initialization -> EQUALS expression .)
    COMMA           reduce using rule 14 (initialization -> EQUALS expression .)


state 270

    (153) else_clause -> ELSIF boolean_expression . then_clause
    (154) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (149) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 172

    then_clause                    shift and go to state 300

state 271

    (148) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMI            reduce using rule 148 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 272

    (152) else_clause -> ELSE action_statement_list .
    (151) action_statement_list -> action_statement_list . action_statement
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    FI              reduce using rule 152 (else_clause -> ELSE action_statement_list .)
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 20
    location                       shift and go to state 1
    do_action                      shift and go to state 22
    string_element                 shift and go to state 24
    builtin_name                   shift and go to state 4
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    if_action                      shift and go to state 35
    action_statement               shift and go to state 130
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    array_slice                    shift and go to state 39
    exit_action                    shift and go to state 16
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    bracketed_action               shift and go to state 43
    identifier                     shift and go to state 64

state 273

    (85) value_array_slice -> array_primitive_value LBRACKET expression COLON . expression RBRACKET
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    array_primitive_value          shift and go to state 82
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 301
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 274

    (84) value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .

    TIMES           reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LAND            reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    NE              reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    GEQ             reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LEQ             reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 84 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)


state 275

    (94) else_expression -> ELSE . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 302
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 276

    (95) elsif_expression -> ELSIF . boolean_expression then_expression
    (92) boolean_expression -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    boolean_expression             shift and go to state 303
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 103
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 277

    (90) conditional_expression -> IF boolean_expression then_expression else_expression . FI

    FI              shift and go to state 304


state 278

    (91) conditional_expression -> IF boolean_expression then_expression elsif_expression . else_expression FI
    (96) elsif_expression -> elsif_expression . ELSIF boolean_expression then_expression
    (94) else_expression -> . ELSE expression

    ELSIF           shift and go to state 305
    ELSE            shift and go to state 275

    else_expression                shift and go to state 306

state 279

    (93) then_expression -> THEN expression .

    ELSE            reduce using rule 93 (then_expression -> THEN expression .)
    ELSIF           reduce using rule 93 (then_expression -> THEN expression .)


state 280

    (61) string_slice -> identifier LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 307


state 281

    (63) right_element -> expression .

    RBRACKET        reduce using rule 63 (right_element -> expression .)


state 282

    (202) formal_parameter -> identifier_list . parameter_spec
    (16) identifier_list -> identifier_list . COMMA identifier
    (203) parameter_spec -> . mode
    (204) parameter_spec -> . mode LOC
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    COMMA           shift and go to state 147
    ID              shift and go to state 9
    REF             shift and go to state 152
    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    CHARS           shift and go to state 150
    ARRAY           shift and go to state 157

    discrete_range_mode            shift and go to state 140
    array_mode                     shift and go to state 141
    composite_mode                 shift and go to state 148
    integer_mode                   shift and go to state 151
    boolean_mode                   shift and go to state 142
    discrete_mode                  shift and go to state 144
    string_mode                    shift and go to state 145
    character_mode                 shift and go to state 154
    mode                           shift and go to state 309
    parameter_spec                 shift and go to state 308
    identifier                     shift and go to state 158
    reference_mode                 shift and go to state 156

state 283

    (196) procedure_definition -> PROC LPAREN RPAREN . SEMI statement_list END
    (198) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMI statement_list END
    (205) result_spec -> . RETURNS LPAREN mode RPAREN
    (206) result_spec -> . RETURNS LPAREN mode LOC RPAREN

    SEMI            shift and go to state 312
    RETURNS         shift and go to state 311

    result_spec                    shift and go to state 310

state 284

    (200) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 200 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 200 (formal_parameter_list -> formal_parameter .)


state 285

    (197) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMI statement_list END
    (199) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI statement_list END
    (201) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 313
    COMMA           shift and go to state 314


state 286

    (171) range_enumeration -> identifier DOWN IN discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 171 (range_enumeration -> identifier DOWN IN discrete_mode .)
    SEMI            reduce using rule 171 (range_enumeration -> identifier DOWN IN discrete_mode .)
    LPAREN          shift and go to state 214


state 287

    (165) step_enumeration -> identifier EQUALS start_value DOWN . end_value
    (169) end_value -> . TO expression

    TO              shift and go to state 291

    end_value                      shift and go to state 315

state 288

    (168) step_value -> BY . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 316
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 289

    (163) step_enumeration -> identifier EQUALS start_value end_value .

    WHILE           reduce using rule 163 (step_enumeration -> identifier EQUALS start_value end_value .)
    SEMI            reduce using rule 163 (step_enumeration -> identifier EQUALS start_value end_value .)


state 290

    (164) step_enumeration -> identifier EQUALS start_value step_value . end_value
    (166) step_enumeration -> identifier EQUALS start_value step_value . DOWN end_value
    (169) end_value -> . TO expression

    DOWN            shift and go to state 317
    TO              shift and go to state 291

    end_value                      shift and go to state 318

state 291

    (169) end_value -> TO . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 319
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 292

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    EQUALS          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 293

    (41) literal_range -> expression COLON . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 320
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 294

    (45) string_mode -> CHARS LBRACKET literal RBRACKET .

    LOC             reduce using rule 45 (string_mode -> CHARS LBRACKET literal RBRACKET .)
    RPAREN          reduce using rule 45 (string_mode -> CHARS LBRACKET literal RBRACKET .)
    COMMA           reduce using rule 45 (string_mode -> CHARS LBRACKET literal RBRACKET .)
    EQUALS          reduce using rule 45 (string_mode -> CHARS LBRACKET literal RBRACKET .)
    SEMI            reduce using rule 45 (string_mode -> CHARS LBRACKET literal RBRACKET .)


state 295

    (48) list_index_mode -> list_index_mode COMMA . index_mode
    (49) index_mode -> . discrete_mode
    (50) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (41) literal_range -> . expression COLON expression
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (17) identifier -> . ID
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    ID              shift and go to state 9
    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    discrete_range_mode            shift and go to state 140
    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    discrete_mode                  shift and go to state 261
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    integer_mode                   shift and go to state 151
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    character_mode                 shift and go to state 154
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    index_mode                     shift and go to state 321
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    boolean_mode                   shift and go to state 142
    literal_range                  shift and go to state 263
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 258
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 265

state 296

    (46) array_mode -> ARRAY LBRACKET list_index_mode RBRACKET . mode
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    ID              shift and go to state 9
    REF             shift and go to state 152
    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    CHARS           shift and go to state 150
    ARRAY           shift and go to state 157

    discrete_range_mode            shift and go to state 140
    array_mode                     shift and go to state 141
    composite_mode                 shift and go to state 148
    boolean_mode                   shift and go to state 142
    discrete_mode                  shift and go to state 144
    string_mode                    shift and go to state 145
    character_mode                 shift and go to state 154
    mode                           shift and go to state 322
    integer_mode                   shift and go to state 151
    identifier                     shift and go to state 158
    reference_mode                 shift and go to state 156

state 297

    (39) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (175) procedure_call -> identifier LPAREN . RPAREN
    (176) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (41) literal_range -> . expression COLON expression
    (177) parameter_list -> . parameter
    (178) parameter_list -> . parameter_list COMMA parameter
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (179) parameter -> . expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    RPAREN          shift and go to state 205
    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    parameter                      shift and go to state 126
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    literal                        shift and go to state 84
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    parameter_list                 shift and go to state 204
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    literal_range                  shift and go to state 266
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 323
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    operand0                       shift and go to state 81
    identifier                     shift and go to state 109

state 298

    (39) discrete_range_mode -> identifier LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    LOC             reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    EQUALS          reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)


state 299

    (67) array_slice -> array_location LBRACKET expression COLON expression RBRACKET .

    ARROW           reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    EQUALS          reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    MODULO          reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    GEQ             reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    LEQ             reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    IN              reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    SEMI            reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    THEN            reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    DOWN            reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    TO              reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    BY              reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    ELSE            reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    ELSIF           reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    FI              reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 67 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)


state 300

    (153) else_clause -> ELSIF boolean_expression then_clause .
    (154) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (152) else_clause -> . ELSE action_statement_list
    (153) else_clause -> . ELSIF boolean_expression then_clause
    (154) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              reduce using rule 153 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 233
    ELSIF           shift and go to state 231

    else_clause                    shift and go to state 324

state 301

    (85) value_array_slice -> array_primitive_value LBRACKET expression COLON expression . RBRACKET

    RBRACKET        shift and go to state 325


state 302

    (94) else_expression -> ELSE expression .

    FI              reduce using rule 94 (else_expression -> ELSE expression .)


state 303

    (95) elsif_expression -> ELSIF boolean_expression . then_expression
    (93) then_expression -> . THEN expression

    THEN            shift and go to state 240

    then_expression                shift and go to state 326

state 304

    (90) conditional_expression -> IF boolean_expression then_expression else_expression FI .

    THEN            reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COLON           reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    SEMI            reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COMMA           reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSE            reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSIF           reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    FI              reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RPAREN          reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    WHILE           reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DOWN            reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    TO              reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    BY              reduce using rule 90 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)


state 305

    (96) elsif_expression -> elsif_expression ELSIF . boolean_expression then_expression
    (92) boolean_expression -> . expression
    (88) expression -> . operand0
    (89) expression -> . conditional_expression
    (97) operand0 -> . operand1
    (98) operand0 -> . operand0 operator1 operand1
    (90) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (91) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (110) operand1 -> . operand2
    (111) operand1 -> . operand1 arithmetic_additive_operator operand2
    (112) operand1 -> . operand1 string_concatenation_operator operand2
    (116) operand2 -> . operand3
    (117) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (121) operand3 -> . operand4
    (122) operand3 -> . monadic_operator operand4
    (125) operand4 -> . location
    (126) operand4 -> . referenced_location
    (127) operand4 -> . primitive_value
    (123) monadic_operator -> . MINUS
    (124) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (128) referenced_location -> . ARROW location
    (69) primitive_value -> . literal
    (70) primitive_value -> . value_array_element
    (71) primitive_value -> . value_array_slice
    (72) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (73) literal -> . integer_literal
    (74) literal -> . boolean_literal
    (75) literal -> . character_literal
    (76) literal -> . empty_literal
    (77) literal -> . character_string_literal
    (84) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (85) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (68) array_location -> . location
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (78) integer_literal -> . ICONST
    (79) boolean_literal -> . FALSE
    (80) boolean_literal -> . TRUE
    (81) character_literal -> . CCONST
    (82) empty_literal -> . NULL
    (83) character_string_literal -> . SCONST
    (86) array_primitive_value -> . primitive_value
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT

    IF              shift and go to state 99
    MINUS           shift and go to state 86
    NOT             shift and go to state 83
    ARROW           shift and go to state 93
    ID              shift and go to state 9
    LPAREN          shift and go to state 91
    ICONST          shift and go to state 101
    FALSE           shift and go to state 108
    TRUE            shift and go to state 89
    CCONST          shift and go to state 105
    NULL            shift and go to state 87
    SCONST          shift and go to state 100
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    operand3                       shift and go to state 75
    location                       shift and go to state 76
    conditional_expression         shift and go to state 77
    string_slice                   shift and go to state 30
    boolean_literal                shift and go to state 78
    array_location                 shift and go to state 26
    operand1                       shift and go to state 79
    boolean_expression             shift and go to state 327
    operand0                       shift and go to state 81
    value_array_slice              shift and go to state 90
    array_element                  shift and go to state 7
    value_array_element            shift and go to state 85
    builtin_name                   shift and go to state 4
    array_primitive_value          shift and go to state 82
    builtin_call                   shift and go to state 12
    referenced_location            shift and go to state 88
    literal                        shift and go to state 84
    dereferenced_reference         shift and go to state 18
    monadic_operator               shift and go to state 92
    parenthesized_expression       shift and go to state 94
    primitive_value                shift and go to state 95
    character_literal              shift and go to state 96
    character_string_literal       shift and go to state 97
    call_action                    shift and go to state 98
    operand4                       shift and go to state 102
    expression                     shift and go to state 103
    operand2                       shift and go to state 104
    array_slice                    shift and go to state 39
    empty_literal                  shift and go to state 106
    integer_literal                shift and go to state 107
    procedure_call                 shift and go to state 20
    string_element                 shift and go to state 24
    identifier                     shift and go to state 109

state 306

    (91) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 328


state 307

    (61) string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EQUALS          reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MODULO          reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LAND            reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EQ              reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    NE              reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GT              reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GEQ             reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LT              reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LEQ             reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    THEN            reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DOWN            reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TO              reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    BY              reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSE            reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSIF           reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    FI              reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    WHILE           reduce using rule 61 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)


state 308

    (202) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 202 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 202 (formal_parameter -> identifier_list parameter_spec .)


state 309

    (203) parameter_spec -> mode .
    (204) parameter_spec -> mode . LOC

    RPAREN          reduce using rule 203 (parameter_spec -> mode .)
    COMMA           reduce using rule 203 (parameter_spec -> mode .)
    LOC             shift and go to state 329


state 310

    (198) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMI statement_list END

    SEMI            shift and go to state 330


state 311

    (205) result_spec -> RETURNS . LPAREN mode RPAREN
    (206) result_spec -> RETURNS . LPAREN mode LOC RPAREN

    LPAREN          shift and go to state 331


state 312

    (196) procedure_definition -> PROC LPAREN RPAREN SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement_list                 shift and go to state 332
    statement                      shift and go to state 3
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 313

    (197) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMI statement_list END
    (199) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI statement_list END
    (205) result_spec -> . RETURNS LPAREN mode RPAREN
    (206) result_spec -> . RETURNS LPAREN mode LOC RPAREN

    SEMI            shift and go to state 334
    RETURNS         shift and go to state 311

    result_spec                    shift and go to state 333

state 314

    (201) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (202) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 9

    identifier_list                shift and go to state 282
    identifier                     shift and go to state 69
    formal_parameter               shift and go to state 335

state 315

    (165) step_enumeration -> identifier EQUALS start_value DOWN end_value .

    WHILE           reduce using rule 165 (step_enumeration -> identifier EQUALS start_value DOWN end_value .)
    SEMI            reduce using rule 165 (step_enumeration -> identifier EQUALS start_value DOWN end_value .)


state 316

    (168) step_value -> BY expression .

    DOWN            reduce using rule 168 (step_value -> BY expression .)
    TO              reduce using rule 168 (step_value -> BY expression .)


state 317

    (166) step_enumeration -> identifier EQUALS start_value step_value DOWN . end_value
    (169) end_value -> . TO expression

    TO              shift and go to state 291

    end_value                      shift and go to state 336

state 318

    (164) step_enumeration -> identifier EQUALS start_value step_value end_value .

    WHILE           reduce using rule 164 (step_enumeration -> identifier EQUALS start_value step_value end_value .)
    SEMI            reduce using rule 164 (step_enumeration -> identifier EQUALS start_value step_value end_value .)


state 319

    (169) end_value -> TO expression .

    WHILE           reduce using rule 169 (end_value -> TO expression .)
    SEMI            reduce using rule 169 (end_value -> TO expression .)


state 320

    (41) literal_range -> expression COLON expression .

    RPAREN          reduce using rule 41 (literal_range -> expression COLON expression .)
    RBRACKET        reduce using rule 41 (literal_range -> expression COLON expression .)
    COMMA           reduce using rule 41 (literal_range -> expression COLON expression .)


state 321

    (48) list_index_mode -> list_index_mode COMMA index_mode .

    RBRACKET        reduce using rule 48 (list_index_mode -> list_index_mode COMMA index_mode .)
    COMMA           reduce using rule 48 (list_index_mode -> list_index_mode COMMA index_mode .)


state 322

    (46) array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .

    EQUALS          reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)
    SEMI            reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)
    COMMA           reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)
    LOC             reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)
    RPAREN          reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)


state 323

    (41) literal_range -> expression . COLON expression
    (179) parameter -> expression .

    COLON           shift and go to state 293
    RPAREN          reduce using rule 179 (parameter -> expression .)
    COMMA           reduce using rule 179 (parameter -> expression .)


state 324

    (154) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 154 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 325

    (85) value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .

    TIMES           reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    MODULO          reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    GEQ             reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LEQ             reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    IN              reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    DOWN            reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    TO              reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    THEN            reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    SEMI            reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    BY              reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSE            reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSIF           reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    FI              reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 85 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)


state 326

    (95) elsif_expression -> ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 95 (elsif_expression -> ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 95 (elsif_expression -> ELSIF boolean_expression then_expression .)


state 327

    (96) elsif_expression -> elsif_expression ELSIF boolean_expression . then_expression
    (93) then_expression -> . THEN expression

    THEN            shift and go to state 240

    then_expression                shift and go to state 337

state 328

    (91) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .

    THEN            reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    SEMI            reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    WHILE           reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 91 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)


state 329

    (204) parameter_spec -> mode LOC .

    RPAREN          reduce using rule 204 (parameter_spec -> mode LOC .)
    COMMA           reduce using rule 204 (parameter_spec -> mode LOC .)


state 330

    (198) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement_list                 shift and go to state 338
    statement                      shift and go to state 3
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 331

    (205) result_spec -> RETURNS LPAREN . mode RPAREN
    (206) result_spec -> RETURNS LPAREN . mode LOC RPAREN
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    ID              shift and go to state 9
    REF             shift and go to state 152
    INT             shift and go to state 149
    BOOL            shift and go to state 153
    CHAR            shift and go to state 155
    CHARS           shift and go to state 150
    ARRAY           shift and go to state 157

    discrete_range_mode            shift and go to state 140
    array_mode                     shift and go to state 141
    composite_mode                 shift and go to state 148
    boolean_mode                   shift and go to state 142
    discrete_mode                  shift and go to state 144
    string_mode                    shift and go to state 145
    character_mode                 shift and go to state 154
    mode                           shift and go to state 339
    integer_mode                   shift and go to state 151
    identifier                     shift and go to state 158
    reference_mode                 shift and go to state 156

state 332

    (196) procedure_definition -> PROC LPAREN RPAREN SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    END             shift and go to state 340
    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement                      shift and go to state 55
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 333

    (199) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI statement_list END

    SEMI            shift and go to state 341


state 334

    (197) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement_list                 shift and go to state 342
    statement                      shift and go to state 3
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 335

    (201) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 201 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 201 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 336

    (166) step_enumeration -> identifier EQUALS start_value step_value DOWN end_value .

    WHILE           reduce using rule 166 (step_enumeration -> identifier EQUALS start_value step_value DOWN end_value .)
    SEMI            reduce using rule 166 (step_enumeration -> identifier EQUALS start_value step_value DOWN end_value .)


state 337

    (96) elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 96 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 96 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)


state 338

    (198) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    END             shift and go to state 343
    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement                      shift and go to state 55
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 339

    (205) result_spec -> RETURNS LPAREN mode . RPAREN
    (206) result_spec -> RETURNS LPAREN mode . LOC RPAREN

    RPAREN          shift and go to state 345
    LOC             shift and go to state 344


state 340

    (196) procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END .

    SEMI            reduce using rule 196 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END .)


state 341

    (199) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement_list                 shift and go to state 346
    statement                      shift and go to state 3
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 342

    (197) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    END             shift and go to state 347
    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement                      shift and go to state 55
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 343

    (198) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END .

    SEMI            reduce using rule 198 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END .)


state 344

    (206) result_spec -> RETURNS LPAREN mode LOC . RPAREN

    RPAREN          shift and go to state 348


state 345

    (205) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 205 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 346

    (199) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (195) procedure_statement -> . identifier COLON procedure_definition SEMI
    (129) action_statement -> . action SEMI
    (130) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (173) call_action -> . procedure_call
    (174) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (181) return_action -> . RETURN
    (182) return_action -> . RETURN result
    (183) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (155) do_action -> . DO action_statement_list OD
    (156) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (56) location -> . string_slice
    (57) location -> . string_element
    (175) procedure_call -> . identifier LPAREN RPAREN
    (176) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (185) builtin_call -> . builtin_name LPAREN RPAREN
    (186) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (58) dereferenced_reference -> . location ARROW
    (64) array_element -> . array_location LBRACKET expression_list RBRACKET
    (67) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (61) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (59) string_element -> . identifier LBRACKET start_element RBRACKET
    (187) builtin_name -> . ABS
    (188) builtin_name -> . ASC
    (189) builtin_name -> . NUM
    (190) builtin_name -> . UPPER
    (191) builtin_name -> . LOWER
    (192) builtin_name -> . LENGTH
    (193) builtin_name -> . READ
    (194) builtin_name -> . PRINT
    (68) array_location -> . location

    END             shift and go to state 349
    DCL             shift and go to state 31
    SYN             shift and go to state 23
    TYPE            shift and go to state 40
    ID              shift and go to state 9
    EXIT            shift and go to state 25
    RETURN          shift and go to state 36
    RESULT          shift and go to state 41
    IF              shift and go to state 32
    DO              shift and go to state 10
    ABS             shift and go to state 5
    ASC             shift and go to state 44
    NUM             shift and go to state 29
    UPPER           shift and go to state 42
    LOWER           shift and go to state 34
    LENGTH          shift and go to state 6
    READ            shift and go to state 15
    PRINT           shift and go to state 37

    location                       shift and go to state 1
    statement                      shift and go to state 55
    builtin_name                   shift and go to state 4
    array_element                  shift and go to state 7
    return_action                  shift and go to state 8
    action_statement               shift and go to state 11
    string_slice                   shift and go to state 30
    builtin_call                   shift and go to state 12
    procedure_statement            shift and go to state 13
    action                         shift and go to state 17
    dereferenced_reference         shift and go to state 18
    synonym_statement              shift and go to state 19
    procedure_call                 shift and go to state 20
    declaration_statement          shift and go to state 21
    do_action                      shift and go to state 22
    array_location                 shift and go to state 26
    result_action                  shift and go to state 27
    call_action                    shift and go to state 28
    assignment_action              shift and go to state 33
    if_action                      shift and go to state 35
    newmode_statement              shift and go to state 38
    exit_action                    shift and go to state 16
    array_slice                    shift and go to state 39
    string_element                 shift and go to state 24
    identifier                     shift and go to state 45
    bracketed_action               shift and go to state 43

state 347

    (197) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END .

    SEMI            reduce using rule 197 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END .)


state 348

    (206) result_spec -> RETURNS LPAREN mode LOC RPAREN .

    SEMI            reduce using rule 206 (result_spec -> RETURNS LPAREN mode LOC RPAREN .)


state 349

    (199) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END .

    SEMI            reduce using rule 199 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 45 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 64 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 109 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 203 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 265 resolved as shift
