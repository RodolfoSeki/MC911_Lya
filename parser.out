Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMI
Rule 10    declaration_list -> declaration
Rule 11    declaration_list -> declaration_list COMMA declaration
Rule 12    declaration -> identifier_list mode
Rule 13    declaration -> identifier_list mode initialization
Rule 14    initialization -> EQUALS expression
Rule 15    identifier_list -> identifier
Rule 16    identifier_list -> identifier_list COMMA identifier
Rule 17    identifier -> ID
Rule 18    synonym_statement -> SYN synonym_list SEMI
Rule 19    synonym_list -> synonym_definition
Rule 20    synonym_list -> synonym_list COMMA synonym_definition
Rule 21    synonym_definition -> identifier_list mode EQUALS constant_expression
Rule 22    synonym_definition -> identifier_list EQUALS constant_expression
Rule 23    constant_expression -> expression
Rule 24    newmode_statement -> TYPE newmode_list SEMI
Rule 25    newmode_list -> mode_definition
Rule 26    newmode_list -> newmode_list COMMA mode_definition
Rule 27    mode_definition -> identifier_list EQUALS mode
Rule 28    mode -> identifier
Rule 29    mode -> discrete_mode
Rule 30    mode -> reference_mode
Rule 31    mode -> composite_mode
Rule 32    discrete_mode -> integer_mode
Rule 33    discrete_mode -> boolean_mode
Rule 34    discrete_mode -> character_mode
Rule 35    discrete_mode -> discrete_range_mode
Rule 36    integer_mode -> INT
Rule 37    boolean_mode -> BOOL
Rule 38    character_mode -> CHAR
Rule 39    discrete_range_mode -> identifier LPAREN literal_range RPAREN
Rule 40    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 41    literal_range -> expression COLON expression
Rule 42    reference_mode -> REF mode
Rule 43    composite_mode -> string_mode
Rule 44    composite_mode -> array_mode
Rule 45    string_mode -> CHARS LBRACKET integer_literal RBRACKET
Rule 46    array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode
Rule 47    list_index_mode -> index_mode
Rule 48    list_index_mode -> list_index_mode COMMA index_mode
Rule 49    index_mode -> discrete_mode
Rule 50    index_mode -> literal_range
Rule 51    location -> identifier
Rule 52    location -> dereferenced_reference
Rule 53    location -> array_element
Rule 54    location -> array_slice
Rule 55    location -> call_action
Rule 56    dereferenced_reference -> location ARROW
Rule 57    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 58    expression_list -> expression
Rule 59    expression_list -> expression_list COMMA expression
Rule 60    array_slice -> array_location LBRACKET expression COLON expression RBRACKET
Rule 61    array_location -> location
Rule 62    primitive_value -> literal
Rule 63    primitive_value -> value_array_element
Rule 64    primitive_value -> value_array_slice
Rule 65    primitive_value -> parenthesized_expression
Rule 66    literal -> integer_literal
Rule 67    literal -> boolean_literal
Rule 68    literal -> character_literal
Rule 69    literal -> empty_literal
Rule 70    literal -> character_string_literal
Rule 71    integer_literal -> ICONST
Rule 72    boolean_literal -> FALSE
Rule 73    boolean_literal -> TRUE
Rule 74    character_literal -> CCONST
Rule 75    empty_literal -> NULL
Rule 76    character_string_literal -> SCONST
Rule 77    value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET
Rule 78    value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET
Rule 79    array_primitive_value -> primitive_value
Rule 80    parenthesized_expression -> LPAREN expression RPAREN
Rule 81    expression -> operand0
Rule 82    expression -> conditional_expression
Rule 83    conditional_expression -> IF boolean_expression then_expression else_expression FI
Rule 84    conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI
Rule 85    boolean_expression -> expression
Rule 86    then_expression -> THEN expression
Rule 87    else_expression -> ELSE expression
Rule 88    elsif_expression -> ELSIF boolean_expression then_expression
Rule 89    elsif_expression -> elsif_expression ELSIF boolean_expression then_expression
Rule 90    operand0 -> operand1
Rule 91    operand0 -> operand0 operator1 operand1
Rule 92    operator1 -> relational_operator
Rule 93    operator1 -> membership_operator
Rule 94    relational_operator -> AND
Rule 95    relational_operator -> OR
Rule 96    relational_operator -> EQ
Rule 97    relational_operator -> NE
Rule 98    relational_operator -> GT
Rule 99    relational_operator -> GEQ
Rule 100   relational_operator -> LT
Rule 101   relational_operator -> LEQ
Rule 102   membership_operator -> IN
Rule 103   operand1 -> operand2
Rule 104   operand1 -> operand1 arithmetic_additive_operator operand2
Rule 105   operand1 -> operand1 string_concatenation_operator operand2
Rule 106   arithmetic_additive_operator -> PLUS
Rule 107   arithmetic_additive_operator -> MINUS
Rule 108   string_concatenation_operator -> LAND
Rule 109   operand2 -> operand3
Rule 110   operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 111   arithmetic_multiplicative_operator -> TIMES
Rule 112   arithmetic_multiplicative_operator -> DIVIDE
Rule 113   arithmetic_multiplicative_operator -> MODULO
Rule 114   operand3 -> operand4
Rule 115   operand3 -> monadic_operator operand4
Rule 116   monadic_operator -> MINUS
Rule 117   monadic_operator -> NOT
Rule 118   operand4 -> location
Rule 119   operand4 -> referenced_location
Rule 120   operand4 -> primitive_value
Rule 121   referenced_location -> ARROW location
Rule 122   action_statement -> action SEMI
Rule 123   action_statement -> identifier COLON action SEMI
Rule 124   action -> bracketed_action
Rule 125   action -> assignment_action
Rule 126   action -> call_action
Rule 127   action -> exit_action
Rule 128   action -> return_action
Rule 129   action -> result_action
Rule 130   bracketed_action -> if_action
Rule 131   bracketed_action -> do_action
Rule 132   assignment_action -> location assigning_operator expression
Rule 133   assigning_operator -> EQUALS
Rule 134   assigning_operator -> PLUS EQUALS
Rule 135   assigning_operator -> MINUS EQUALS
Rule 136   assigning_operator -> TIMES EQUALS
Rule 137   assigning_operator -> DIVIDE EQUALS
Rule 138   assigning_operator -> MODULO EQUALS
Rule 139   assigning_operator -> LAND EQUALS
Rule 140   if_action -> IF boolean_expression then_clause FI
Rule 141   if_action -> IF boolean_expression then_clause else_clause FI
Rule 142   then_clause -> THEN action_statement_list
Rule 143   action_statement_list -> action_statement
Rule 144   action_statement_list -> action_statement_list action_statement
Rule 145   else_clause -> ELSE action_statement_list
Rule 146   else_clause -> ELSIF boolean_expression then_clause
Rule 147   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 148   do_action -> DO action_statement_list OD
Rule 149   do_action -> DO control_part SEMI action_statement_list OD
Rule 150   control_part -> for_control
Rule 151   control_part -> for_control while_control
Rule 152   control_part -> while_control
Rule 153   for_control -> FOR iteration
Rule 154   iteration -> step_enumeration
Rule 155   iteration -> range_enumeration
Rule 156   step_enumeration -> identifier EQUALS start_value end_value
Rule 157   step_enumeration -> identifier EQUALS start_value step_value end_value
Rule 158   step_enumeration -> identifier EQUALS start_value DOWN end_value
Rule 159   step_enumeration -> identifier EQUALS start_value step_value DOWN end_value
Rule 160   start_value -> expression
Rule 161   step_value -> BY expression
Rule 162   end_value -> TO expression
Rule 163   range_enumeration -> identifier IN discrete_mode
Rule 164   range_enumeration -> identifier DOWN IN discrete_mode
Rule 165   while_control -> WHILE boolean_expression
Rule 166   call_action -> procedure_call
Rule 167   call_action -> builtin_call
Rule 168   procedure_call -> identifier LPAREN RPAREN
Rule 169   procedure_call -> identifier LPAREN parameter_list RPAREN
Rule 170   parameter_list -> parameter
Rule 171   parameter_list -> parameter_list COMMA parameter
Rule 172   parameter -> expression
Rule 173   exit_action -> EXIT identifier
Rule 174   return_action -> RETURN
Rule 175   return_action -> RETURN result
Rule 176   result_action -> RESULT result
Rule 177   result -> expression
Rule 178   builtin_call -> builtin_name LPAREN RPAREN
Rule 179   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 180   builtin_name -> ABS
Rule 181   builtin_name -> ASC
Rule 182   builtin_name -> NUM
Rule 183   builtin_name -> UPPER
Rule 184   builtin_name -> LOWER
Rule 185   builtin_name -> LENGTH
Rule 186   builtin_name -> READ
Rule 187   builtin_name -> PRINT
Rule 188   procedure_statement -> identifier COLON procedure_definition SEMI
Rule 189   procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END
Rule 190   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END
Rule 191   procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END
Rule 192   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END
Rule 193   formal_parameter_list -> formal_parameter
Rule 194   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 195   formal_parameter -> identifier_list parameter_spec
Rule 196   parameter_spec -> mode
Rule 197   parameter_spec -> mode LOC
Rule 198   result_spec -> RETURNS LPAREN mode RPAREN
Rule 199   result_spec -> RETURNS LPAREN mode LOC RPAREN

Terminals, with rules where they appear

ABS                  : 180
AND                  : 94
ARRAY                : 46
ARROW                : 56 121
ASC                  : 181
BOOL                 : 37
BY                   : 161
CCONST               : 74
CHAR                 : 38
CHARS                : 45
COLON                : 41 60 78 123 188
COMMA                : 11 16 20 26 48 59 171 194
DCL                  : 9
DIVIDE               : 112 137
DO                   : 148 149
DOWN                 : 158 159 164
ELSE                 : 87 145
ELSIF                : 88 89 146 147
END                  : 189 190 191 192
EQ                   : 96
EQUALS               : 14 21 22 27 133 134 135 136 137 138 139 156 157 158 159
EXIT                 : 173
FALSE                : 72
FI                   : 83 84 140 141
FOR                  : 153
GEQ                  : 99
GT                   : 98
ICONST               : 71
ID                   : 17
IF                   : 83 84 140 141
IN                   : 102 163 164
INT                  : 36
LAND                 : 108 139
LBRACKET             : 45 46 57 60 77 78
LENGTH               : 185
LEQ                  : 101
LOC                  : 197 199
LOWER                : 184
LPAREN               : 39 40 80 168 169 178 179 189 190 191 192 198 199
LT                   : 100
MINUS                : 107 116 135
MODULO               : 113 138
NE                   : 97
NOT                  : 117
NULL                 : 75
NUM                  : 182
OD                   : 148 149
OR                   : 95
PLUS                 : 106 134
PRINT                : 187
PROC                 : 189 190 191 192
RBRACKET             : 45 46 57 60 77 78
READ                 : 186
REF                  : 42
RESULT               : 176
RETURN               : 174 175
RETURNS              : 198 199
RPAREN               : 39 40 80 168 169 178 179 189 190 191 192 198 199
SCONST               : 76
SEMI                 : 9 18 24 122 123 149 188 189 190 191 192
SYN                  : 18
THEN                 : 86 142
TIMES                : 111 136
TO                   : 162
TRUE                 : 73
TYPE                 : 24
UPPER                : 183
WHILE                : 165
error                : 

Nonterminals, with rules where they appear

action               : 122 123
action_statement     : 8 143 144
action_statement_list : 142 144 145 148 149
arithmetic_additive_operator : 104
arithmetic_multiplicative_operator : 110
array_element        : 53
array_location       : 57 60
array_mode           : 44
array_primitive_value : 77 78
array_slice          : 54
assigning_operator   : 132
assignment_action    : 125
boolean_expression   : 83 84 88 89 140 141 146 147 165
boolean_literal      : 67
boolean_mode         : 33
bracketed_action     : 124
builtin_call         : 167
builtin_name         : 178 179
call_action          : 55 126
character_literal    : 68
character_mode       : 34
character_string_literal : 70
composite_mode       : 31
conditional_expression : 82
constant_expression  : 21 22
control_part         : 149
declaration          : 10 11
declaration_list     : 9 11
declaration_statement : 4
dereferenced_reference : 52
discrete_mode        : 29 40 49 163 164
discrete_range_mode  : 35
do_action            : 131
else_clause          : 141 147
else_expression      : 83 84
elsif_expression     : 84 89
empty_literal        : 69
end_value            : 156 157 158 159
exit_action          : 127
expression           : 14 23 41 41 58 59 60 60 78 78 80 85 86 87 132 160 161 162 172 177
expression_list      : 57 59 77
for_control          : 150 151
formal_parameter     : 193 194
formal_parameter_list : 190 192 194
identifier           : 15 16 28 39 51 123 156 157 158 159 163 164 168 169 173 188
identifier_list      : 12 13 16 21 22 27 195
if_action            : 130
index_mode           : 47 48
initialization       : 13
integer_literal      : 45 66
integer_mode         : 32
iteration            : 153
list_index_mode      : 46 48
literal              : 62
literal_range        : 39 40 50
location             : 56 61 118 121 132
membership_operator  : 93
mode                 : 12 13 21 27 42 46 196 197 198 199
mode_definition      : 25 26
monadic_operator     : 115
newmode_list         : 24 26
newmode_statement    : 6
operand0             : 81 91
operand1             : 90 91 104 105
operand2             : 103 104 105 110
operand3             : 109 110
operand4             : 114 115
operator1            : 91
parameter            : 170 171
parameter_list       : 169 171 179
parameter_spec       : 195
parenthesized_expression : 65
primitive_value      : 79 120
procedure_call       : 166
procedure_definition : 188
procedure_statement  : 7
program              : 0
range_enumeration    : 155
reference_mode       : 30
referenced_location  : 119
relational_operator  : 92
result               : 175 176
result_action        : 129
result_spec          : 191 192
return_action        : 128
start_value          : 156 157 158 159
statement            : 2 3
statement_list       : 1 3 189 190 191 192
step_enumeration     : 154
step_value           : 157 159
string_concatenation_operator : 105
string_mode          : 43
synonym_definition   : 19 20
synonym_list         : 18 20
synonym_statement    : 5
then_clause          : 140 141 146 147
then_expression      : 83 84 88 89
value_array_element  : 63
value_array_slice    : 64
while_control        : 151 152

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    statement                      shift and go to state 2
    statement_list                 shift and go to state 3
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    program                        shift and go to state 31
    if_action                      shift and go to state 19
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 1

    (182) builtin_name -> NUM .

    LPAREN          reduce using rule 182 (builtin_name -> NUM .)


state 2

    (2) statement_list -> statement .

    DCL             reduce using rule 2 (statement_list -> statement .)
    SYN             reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    EXIT            reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    RESULT          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    DO              reduce using rule 2 (statement_list -> statement .)
    ABS             reduce using rule 2 (statement_list -> statement .)
    ASC             reduce using rule 2 (statement_list -> statement .)
    NUM             reduce using rule 2 (statement_list -> statement .)
    UPPER           reduce using rule 2 (statement_list -> statement .)
    LOWER           reduce using rule 2 (statement_list -> statement .)
    LENGTH          reduce using rule 2 (statement_list -> statement .)
    READ            reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    END             reduce using rule 2 (statement_list -> statement .)


state 3

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    statement                      shift and go to state 44
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 4

    (5) statement -> synonym_statement .

    END             reduce using rule 5 (statement -> synonym_statement .)
    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    RETURN          reduce using rule 5 (statement -> synonym_statement .)
    RESULT          reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    DO              reduce using rule 5 (statement -> synonym_statement .)
    ABS             reduce using rule 5 (statement -> synonym_statement .)
    ASC             reduce using rule 5 (statement -> synonym_statement .)
    NUM             reduce using rule 5 (statement -> synonym_statement .)
    UPPER           reduce using rule 5 (statement -> synonym_statement .)
    LOWER           reduce using rule 5 (statement -> synonym_statement .)
    LENGTH          reduce using rule 5 (statement -> synonym_statement .)
    READ            reduce using rule 5 (statement -> synonym_statement .)
    PRINT           reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)


state 5

    (6) statement -> newmode_statement .

    END             reduce using rule 6 (statement -> newmode_statement .)
    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    RETURN          reduce using rule 6 (statement -> newmode_statement .)
    RESULT          reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    DO              reduce using rule 6 (statement -> newmode_statement .)
    ABS             reduce using rule 6 (statement -> newmode_statement .)
    ASC             reduce using rule 6 (statement -> newmode_statement .)
    NUM             reduce using rule 6 (statement -> newmode_statement .)
    UPPER           reduce using rule 6 (statement -> newmode_statement .)
    LOWER           reduce using rule 6 (statement -> newmode_statement .)
    LENGTH          reduce using rule 6 (statement -> newmode_statement .)
    READ            reduce using rule 6 (statement -> newmode_statement .)
    PRINT           reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)


state 6

    (176) result_action -> RESULT . result
    (177) result -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    result                         shift and go to state 53
    expression                     shift and go to state 72
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 7

    (185) builtin_name -> LENGTH .

    LPAREN          reduce using rule 185 (builtin_name -> LENGTH .)


state 8

    (167) call_action -> builtin_call .

    SEMI            reduce using rule 167 (call_action -> builtin_call .)
    ARROW           reduce using rule 167 (call_action -> builtin_call .)
    EQUALS          reduce using rule 167 (call_action -> builtin_call .)
    PLUS            reduce using rule 167 (call_action -> builtin_call .)
    MINUS           reduce using rule 167 (call_action -> builtin_call .)
    TIMES           reduce using rule 167 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 167 (call_action -> builtin_call .)
    MODULO          reduce using rule 167 (call_action -> builtin_call .)
    LAND            reduce using rule 167 (call_action -> builtin_call .)
    LBRACKET        reduce using rule 167 (call_action -> builtin_call .)
    AND             reduce using rule 167 (call_action -> builtin_call .)
    OR              reduce using rule 167 (call_action -> builtin_call .)
    EQ              reduce using rule 167 (call_action -> builtin_call .)
    NE              reduce using rule 167 (call_action -> builtin_call .)
    GT              reduce using rule 167 (call_action -> builtin_call .)
    GEQ             reduce using rule 167 (call_action -> builtin_call .)
    LT              reduce using rule 167 (call_action -> builtin_call .)
    LEQ             reduce using rule 167 (call_action -> builtin_call .)
    IN              reduce using rule 167 (call_action -> builtin_call .)
    THEN            reduce using rule 167 (call_action -> builtin_call .)
    RPAREN          reduce using rule 167 (call_action -> builtin_call .)
    COMMA           reduce using rule 167 (call_action -> builtin_call .)
    COLON           reduce using rule 167 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 167 (call_action -> builtin_call .)
    ELSE            reduce using rule 167 (call_action -> builtin_call .)
    ELSIF           reduce using rule 167 (call_action -> builtin_call .)
    DOWN            reduce using rule 167 (call_action -> builtin_call .)
    TO              reduce using rule 167 (call_action -> builtin_call .)
    BY              reduce using rule 167 (call_action -> builtin_call .)
    FI              reduce using rule 167 (call_action -> builtin_call .)
    WHILE           reduce using rule 167 (call_action -> builtin_call .)


state 9

    (9) declaration_statement -> DCL . declaration_list SEMI
    (10) declaration_list -> . declaration
    (11) declaration_list -> . declaration_list COMMA declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 26

    declaration                    shift and go to state 80
    identifier                     shift and go to state 81
    declaration_list               shift and go to state 82
    identifier_list                shift and go to state 83

state 10

    (186) builtin_name -> READ .

    LPAREN          reduce using rule 186 (builtin_name -> READ .)


state 11

    (125) action -> assignment_action .

    SEMI            reduce using rule 125 (action -> assignment_action .)


state 12

    (131) bracketed_action -> do_action .

    SEMI            reduce using rule 131 (bracketed_action -> do_action .)


state 13

    (53) location -> array_element .

    ARROW           reduce using rule 53 (location -> array_element .)
    TIMES           reduce using rule 53 (location -> array_element .)
    DIVIDE          reduce using rule 53 (location -> array_element .)
    MODULO          reduce using rule 53 (location -> array_element .)
    PLUS            reduce using rule 53 (location -> array_element .)
    MINUS           reduce using rule 53 (location -> array_element .)
    LAND            reduce using rule 53 (location -> array_element .)
    AND             reduce using rule 53 (location -> array_element .)
    OR              reduce using rule 53 (location -> array_element .)
    EQ              reduce using rule 53 (location -> array_element .)
    NE              reduce using rule 53 (location -> array_element .)
    GT              reduce using rule 53 (location -> array_element .)
    GEQ             reduce using rule 53 (location -> array_element .)
    LT              reduce using rule 53 (location -> array_element .)
    LEQ             reduce using rule 53 (location -> array_element .)
    IN              reduce using rule 53 (location -> array_element .)
    COLON           reduce using rule 53 (location -> array_element .)
    RPAREN          reduce using rule 53 (location -> array_element .)
    COMMA           reduce using rule 53 (location -> array_element .)
    LBRACKET        reduce using rule 53 (location -> array_element .)
    THEN            reduce using rule 53 (location -> array_element .)
    EQUALS          reduce using rule 53 (location -> array_element .)
    RBRACKET        reduce using rule 53 (location -> array_element .)
    DOWN            reduce using rule 53 (location -> array_element .)
    TO              reduce using rule 53 (location -> array_element .)
    BY              reduce using rule 53 (location -> array_element .)
    SEMI            reduce using rule 53 (location -> array_element .)
    ELSE            reduce using rule 53 (location -> array_element .)
    ELSIF           reduce using rule 53 (location -> array_element .)
    FI              reduce using rule 53 (location -> array_element .)
    WHILE           reduce using rule 53 (location -> array_element .)


state 14

    (4) statement -> declaration_statement .

    END             reduce using rule 4 (statement -> declaration_statement .)
    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    RETURN          reduce using rule 4 (statement -> declaration_statement .)
    RESULT          reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    DO              reduce using rule 4 (statement -> declaration_statement .)
    ABS             reduce using rule 4 (statement -> declaration_statement .)
    ASC             reduce using rule 4 (statement -> declaration_statement .)
    NUM             reduce using rule 4 (statement -> declaration_statement .)
    UPPER           reduce using rule 4 (statement -> declaration_statement .)
    LOWER           reduce using rule 4 (statement -> declaration_statement .)
    LENGTH          reduce using rule 4 (statement -> declaration_statement .)
    READ            reduce using rule 4 (statement -> declaration_statement .)
    PRINT           reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 15

    (126) action -> call_action .
    (55) location -> call_action .

    SEMI            reduce using rule 126 (action -> call_action .)
    ARROW           reduce using rule 55 (location -> call_action .)
    EQUALS          reduce using rule 55 (location -> call_action .)
    PLUS            reduce using rule 55 (location -> call_action .)
    MINUS           reduce using rule 55 (location -> call_action .)
    TIMES           reduce using rule 55 (location -> call_action .)
    DIVIDE          reduce using rule 55 (location -> call_action .)
    MODULO          reduce using rule 55 (location -> call_action .)
    LAND            reduce using rule 55 (location -> call_action .)
    LBRACKET        reduce using rule 55 (location -> call_action .)


state 16

    (127) action -> exit_action .

    SEMI            reduce using rule 127 (action -> exit_action .)


state 17

    (187) builtin_name -> PRINT .

    LPAREN          reduce using rule 187 (builtin_name -> PRINT .)


state 18

    (184) builtin_name -> LOWER .

    LPAREN          reduce using rule 184 (builtin_name -> LOWER .)


state 19

    (130) bracketed_action -> if_action .

    SEMI            reduce using rule 130 (bracketed_action -> if_action .)


state 20

    (183) builtin_name -> UPPER .

    LPAREN          reduce using rule 183 (builtin_name -> UPPER .)


state 21

    (174) return_action -> RETURN .
    (175) return_action -> RETURN . result
    (177) result -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    SEMI            reduce using rule 174 (return_action -> RETURN .)
    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    result                         shift and go to state 84
    expression                     shift and go to state 72
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 22

    (166) call_action -> procedure_call .

    SEMI            reduce using rule 166 (call_action -> procedure_call .)
    ARROW           reduce using rule 166 (call_action -> procedure_call .)
    EQUALS          reduce using rule 166 (call_action -> procedure_call .)
    PLUS            reduce using rule 166 (call_action -> procedure_call .)
    MINUS           reduce using rule 166 (call_action -> procedure_call .)
    TIMES           reduce using rule 166 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 166 (call_action -> procedure_call .)
    MODULO          reduce using rule 166 (call_action -> procedure_call .)
    LAND            reduce using rule 166 (call_action -> procedure_call .)
    LBRACKET        reduce using rule 166 (call_action -> procedure_call .)
    AND             reduce using rule 166 (call_action -> procedure_call .)
    OR              reduce using rule 166 (call_action -> procedure_call .)
    EQ              reduce using rule 166 (call_action -> procedure_call .)
    NE              reduce using rule 166 (call_action -> procedure_call .)
    GT              reduce using rule 166 (call_action -> procedure_call .)
    GEQ             reduce using rule 166 (call_action -> procedure_call .)
    LT              reduce using rule 166 (call_action -> procedure_call .)
    LEQ             reduce using rule 166 (call_action -> procedure_call .)
    IN              reduce using rule 166 (call_action -> procedure_call .)
    THEN            reduce using rule 166 (call_action -> procedure_call .)
    RPAREN          reduce using rule 166 (call_action -> procedure_call .)
    COMMA           reduce using rule 166 (call_action -> procedure_call .)
    COLON           reduce using rule 166 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 166 (call_action -> procedure_call .)
    ELSE            reduce using rule 166 (call_action -> procedure_call .)
    ELSIF           reduce using rule 166 (call_action -> procedure_call .)
    DOWN            reduce using rule 166 (call_action -> procedure_call .)
    TO              reduce using rule 166 (call_action -> procedure_call .)
    BY              reduce using rule 166 (call_action -> procedure_call .)
    FI              reduce using rule 166 (call_action -> procedure_call .)
    WHILE           reduce using rule 166 (call_action -> procedure_call .)


state 23

    (188) procedure_statement -> identifier . COLON procedure_definition SEMI
    (123) action_statement -> identifier . COLON action SEMI
    (51) location -> identifier .
    (168) procedure_call -> identifier . LPAREN RPAREN
    (169) procedure_call -> identifier . LPAREN parameter_list RPAREN

    COLON           shift and go to state 85
    ARROW           reduce using rule 51 (location -> identifier .)
    EQUALS          reduce using rule 51 (location -> identifier .)
    PLUS            reduce using rule 51 (location -> identifier .)
    MINUS           reduce using rule 51 (location -> identifier .)
    TIMES           reduce using rule 51 (location -> identifier .)
    DIVIDE          reduce using rule 51 (location -> identifier .)
    MODULO          reduce using rule 51 (location -> identifier .)
    LAND            reduce using rule 51 (location -> identifier .)
    LBRACKET        reduce using rule 51 (location -> identifier .)
    LPAREN          shift and go to state 86


state 24

    (178) builtin_call -> builtin_name . LPAREN RPAREN
    (179) builtin_call -> builtin_name . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 87


state 25

    (128) action -> return_action .

    SEMI            reduce using rule 128 (action -> return_action .)


state 26

    (17) identifier -> ID .

    LPAREN          reduce using rule 17 (identifier -> ID .)
    ARROW           reduce using rule 17 (identifier -> ID .)
    TIMES           reduce using rule 17 (identifier -> ID .)
    DIVIDE          reduce using rule 17 (identifier -> ID .)
    MODULO          reduce using rule 17 (identifier -> ID .)
    PLUS            reduce using rule 17 (identifier -> ID .)
    MINUS           reduce using rule 17 (identifier -> ID .)
    LAND            reduce using rule 17 (identifier -> ID .)
    AND             reduce using rule 17 (identifier -> ID .)
    OR              reduce using rule 17 (identifier -> ID .)
    EQ              reduce using rule 17 (identifier -> ID .)
    NE              reduce using rule 17 (identifier -> ID .)
    GT              reduce using rule 17 (identifier -> ID .)
    GEQ             reduce using rule 17 (identifier -> ID .)
    LT              reduce using rule 17 (identifier -> ID .)
    LEQ             reduce using rule 17 (identifier -> ID .)
    IN              reduce using rule 17 (identifier -> ID .)
    SEMI            reduce using rule 17 (identifier -> ID .)
    LBRACKET        reduce using rule 17 (identifier -> ID .)
    LOC             reduce using rule 17 (identifier -> ID .)
    RPAREN          reduce using rule 17 (identifier -> ID .)
    COMMA           reduce using rule 17 (identifier -> ID .)
    EQUALS          reduce using rule 17 (identifier -> ID .)
    WHILE           reduce using rule 17 (identifier -> ID .)
    COLON           reduce using rule 17 (identifier -> ID .)
    ID              reduce using rule 17 (identifier -> ID .)
    REF             reduce using rule 17 (identifier -> ID .)
    INT             reduce using rule 17 (identifier -> ID .)
    BOOL            reduce using rule 17 (identifier -> ID .)
    CHAR            reduce using rule 17 (identifier -> ID .)
    CHARS           reduce using rule 17 (identifier -> ID .)
    ARRAY           reduce using rule 17 (identifier -> ID .)
    THEN            reduce using rule 17 (identifier -> ID .)
    RBRACKET        reduce using rule 17 (identifier -> ID .)
    ELSE            reduce using rule 17 (identifier -> ID .)
    ELSIF           reduce using rule 17 (identifier -> ID .)
    DOWN            reduce using rule 17 (identifier -> ID .)
    TO              reduce using rule 17 (identifier -> ID .)
    BY              reduce using rule 17 (identifier -> ID .)
    FI              reduce using rule 17 (identifier -> ID .)


state 27

    (57) array_element -> array_location . LBRACKET expression_list RBRACKET
    (60) array_slice -> array_location . LBRACKET expression COLON expression RBRACKET

    LBRACKET        shift and go to state 88


state 28

    (54) location -> array_slice .

    ARROW           reduce using rule 54 (location -> array_slice .)
    TIMES           reduce using rule 54 (location -> array_slice .)
    DIVIDE          reduce using rule 54 (location -> array_slice .)
    MODULO          reduce using rule 54 (location -> array_slice .)
    PLUS            reduce using rule 54 (location -> array_slice .)
    MINUS           reduce using rule 54 (location -> array_slice .)
    LAND            reduce using rule 54 (location -> array_slice .)
    AND             reduce using rule 54 (location -> array_slice .)
    OR              reduce using rule 54 (location -> array_slice .)
    EQ              reduce using rule 54 (location -> array_slice .)
    NE              reduce using rule 54 (location -> array_slice .)
    GT              reduce using rule 54 (location -> array_slice .)
    GEQ             reduce using rule 54 (location -> array_slice .)
    LT              reduce using rule 54 (location -> array_slice .)
    LEQ             reduce using rule 54 (location -> array_slice .)
    IN              reduce using rule 54 (location -> array_slice .)
    COLON           reduce using rule 54 (location -> array_slice .)
    RPAREN          reduce using rule 54 (location -> array_slice .)
    COMMA           reduce using rule 54 (location -> array_slice .)
    LBRACKET        reduce using rule 54 (location -> array_slice .)
    THEN            reduce using rule 54 (location -> array_slice .)
    EQUALS          reduce using rule 54 (location -> array_slice .)
    RBRACKET        reduce using rule 54 (location -> array_slice .)
    DOWN            reduce using rule 54 (location -> array_slice .)
    TO              reduce using rule 54 (location -> array_slice .)
    BY              reduce using rule 54 (location -> array_slice .)
    SEMI            reduce using rule 54 (location -> array_slice .)
    ELSE            reduce using rule 54 (location -> array_slice .)
    ELSIF           reduce using rule 54 (location -> array_slice .)
    FI              reduce using rule 54 (location -> array_slice .)
    WHILE           reduce using rule 54 (location -> array_slice .)


state 29

    (18) synonym_statement -> SYN . synonym_list SEMI
    (19) synonym_list -> . synonym_definition
    (20) synonym_list -> . synonym_list COMMA synonym_definition
    (21) synonym_definition -> . identifier_list mode EQUALS constant_expression
    (22) synonym_definition -> . identifier_list EQUALS constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 26

    identifier_list                shift and go to state 89
    synonym_definition             shift and go to state 90
    identifier                     shift and go to state 81
    synonym_list                   shift and go to state 91

state 30

    (24) newmode_statement -> TYPE . newmode_list SEMI
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . newmode_list COMMA mode_definition
    (27) mode_definition -> . identifier_list EQUALS mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 26

    newmode_list                   shift and go to state 92
    identifier_list                shift and go to state 93
    mode_definition                shift and go to state 94
    identifier                     shift and go to state 81

state 31

    (0) S' -> program .



state 32

    (8) statement -> action_statement .

    END             reduce using rule 8 (statement -> action_statement .)
    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    ABS             reduce using rule 8 (statement -> action_statement .)
    ASC             reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)


state 33

    (124) action -> bracketed_action .

    SEMI            reduce using rule 124 (action -> bracketed_action .)


state 34

    (7) statement -> procedure_statement .

    END             reduce using rule 7 (statement -> procedure_statement .)
    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    RETURN          reduce using rule 7 (statement -> procedure_statement .)
    RESULT          reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    DO              reduce using rule 7 (statement -> procedure_statement .)
    ABS             reduce using rule 7 (statement -> procedure_statement .)
    ASC             reduce using rule 7 (statement -> procedure_statement .)
    NUM             reduce using rule 7 (statement -> procedure_statement .)
    UPPER           reduce using rule 7 (statement -> procedure_statement .)
    LOWER           reduce using rule 7 (statement -> procedure_statement .)
    LENGTH          reduce using rule 7 (statement -> procedure_statement .)
    READ            reduce using rule 7 (statement -> procedure_statement .)
    PRINT           reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)


state 35

    (148) do_action -> DO . action_statement_list OD
    (149) do_action -> DO . control_part SEMI action_statement_list OD
    (143) action_statement_list -> . action_statement
    (144) action_statement_list -> . action_statement_list action_statement
    (150) control_part -> . for_control
    (151) control_part -> . for_control while_control
    (152) control_part -> . while_control
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (153) for_control -> . FOR iteration
    (165) while_control -> . WHILE boolean_expression
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (17) identifier -> . ID
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    FOR             shift and go to state 97
    WHILE           shift and go to state 101
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    array_slice                    shift and go to state 28
    action_statement_list          shift and go to state 98
    while_control                  shift and go to state 99
    builtin_call                   shift and go to state 8
    for_control                    shift and go to state 95
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    if_action                      shift and go to state 19
    action_statement               shift and go to state 100
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    array_location                 shift and go to state 27
    control_part                   shift and go to state 102
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 96

state 36

    (122) action_statement -> action . SEMI

    SEMI            shift and go to state 103


state 37

    (129) action -> result_action .

    SEMI            reduce using rule 129 (action -> result_action .)


state 38

    (132) assignment_action -> location . assigning_operator expression
    (56) dereferenced_reference -> location . ARROW
    (61) array_location -> location .
    (133) assigning_operator -> . EQUALS
    (134) assigning_operator -> . PLUS EQUALS
    (135) assigning_operator -> . MINUS EQUALS
    (136) assigning_operator -> . TIMES EQUALS
    (137) assigning_operator -> . DIVIDE EQUALS
    (138) assigning_operator -> . MODULO EQUALS
    (139) assigning_operator -> . LAND EQUALS

    ARROW           shift and go to state 111
    LBRACKET        reduce using rule 61 (array_location -> location .)
    EQUALS          shift and go to state 112
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 104
    MODULO          shift and go to state 110
    LAND            shift and go to state 108

    assigning_operator             shift and go to state 107

state 39

    (173) exit_action -> EXIT . identifier
    (17) identifier -> . ID

    ID              shift and go to state 26

    identifier                     shift and go to state 113

state 40

    (181) builtin_name -> ASC .

    LPAREN          reduce using rule 181 (builtin_name -> ASC .)


state 41

    (180) builtin_name -> ABS .

    LPAREN          reduce using rule 180 (builtin_name -> ABS .)


state 42

    (140) if_action -> IF . boolean_expression then_clause FI
    (141) if_action -> IF . boolean_expression then_clause else_clause FI
    (85) boolean_expression -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_call                   shift and go to state 8
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    builtin_name                   shift and go to state 24
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 114
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 115
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    boolean_literal                shift and go to state 77
    location                       shift and go to state 76
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 43

    (52) location -> dereferenced_reference .

    ARROW           reduce using rule 52 (location -> dereferenced_reference .)
    TIMES           reduce using rule 52 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 52 (location -> dereferenced_reference .)
    MODULO          reduce using rule 52 (location -> dereferenced_reference .)
    PLUS            reduce using rule 52 (location -> dereferenced_reference .)
    MINUS           reduce using rule 52 (location -> dereferenced_reference .)
    LAND            reduce using rule 52 (location -> dereferenced_reference .)
    AND             reduce using rule 52 (location -> dereferenced_reference .)
    OR              reduce using rule 52 (location -> dereferenced_reference .)
    EQ              reduce using rule 52 (location -> dereferenced_reference .)
    NE              reduce using rule 52 (location -> dereferenced_reference .)
    GT              reduce using rule 52 (location -> dereferenced_reference .)
    GEQ             reduce using rule 52 (location -> dereferenced_reference .)
    LT              reduce using rule 52 (location -> dereferenced_reference .)
    LEQ             reduce using rule 52 (location -> dereferenced_reference .)
    IN              reduce using rule 52 (location -> dereferenced_reference .)
    COLON           reduce using rule 52 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 52 (location -> dereferenced_reference .)
    COMMA           reduce using rule 52 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 52 (location -> dereferenced_reference .)
    THEN            reduce using rule 52 (location -> dereferenced_reference .)
    EQUALS          reduce using rule 52 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 52 (location -> dereferenced_reference .)
    DOWN            reduce using rule 52 (location -> dereferenced_reference .)
    TO              reduce using rule 52 (location -> dereferenced_reference .)
    BY              reduce using rule 52 (location -> dereferenced_reference .)
    SEMI            reduce using rule 52 (location -> dereferenced_reference .)
    ELSE            reduce using rule 52 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 52 (location -> dereferenced_reference .)
    FI              reduce using rule 52 (location -> dereferenced_reference .)
    WHILE           reduce using rule 52 (location -> dereferenced_reference .)


state 44

    (3) statement_list -> statement_list statement .

    DCL             reduce using rule 3 (statement_list -> statement_list statement .)
    SYN             reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    RESULT          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    DO              reduce using rule 3 (statement_list -> statement_list statement .)
    ABS             reduce using rule 3 (statement_list -> statement_list statement .)
    ASC             reduce using rule 3 (statement_list -> statement_list statement .)
    NUM             reduce using rule 3 (statement_list -> statement_list statement .)
    UPPER           reduce using rule 3 (statement_list -> statement_list statement .)
    LOWER           reduce using rule 3 (statement_list -> statement_list statement .)
    LENGTH          reduce using rule 3 (statement_list -> statement_list statement .)
    READ            reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    END             reduce using rule 3 (statement_list -> statement_list statement .)


state 45

    (66) literal -> integer_literal .

    TIMES           reduce using rule 66 (literal -> integer_literal .)
    DIVIDE          reduce using rule 66 (literal -> integer_literal .)
    MODULO          reduce using rule 66 (literal -> integer_literal .)
    PLUS            reduce using rule 66 (literal -> integer_literal .)
    MINUS           reduce using rule 66 (literal -> integer_literal .)
    LAND            reduce using rule 66 (literal -> integer_literal .)
    AND             reduce using rule 66 (literal -> integer_literal .)
    OR              reduce using rule 66 (literal -> integer_literal .)
    EQ              reduce using rule 66 (literal -> integer_literal .)
    NE              reduce using rule 66 (literal -> integer_literal .)
    GT              reduce using rule 66 (literal -> integer_literal .)
    GEQ             reduce using rule 66 (literal -> integer_literal .)
    LT              reduce using rule 66 (literal -> integer_literal .)
    LEQ             reduce using rule 66 (literal -> integer_literal .)
    IN              reduce using rule 66 (literal -> integer_literal .)
    SEMI            reduce using rule 66 (literal -> integer_literal .)
    LBRACKET        reduce using rule 66 (literal -> integer_literal .)
    THEN            reduce using rule 66 (literal -> integer_literal .)
    DOWN            reduce using rule 66 (literal -> integer_literal .)
    TO              reduce using rule 66 (literal -> integer_literal .)
    BY              reduce using rule 66 (literal -> integer_literal .)
    RPAREN          reduce using rule 66 (literal -> integer_literal .)
    COMMA           reduce using rule 66 (literal -> integer_literal .)
    COLON           reduce using rule 66 (literal -> integer_literal .)
    RBRACKET        reduce using rule 66 (literal -> integer_literal .)
    ELSE            reduce using rule 66 (literal -> integer_literal .)
    ELSIF           reduce using rule 66 (literal -> integer_literal .)
    FI              reduce using rule 66 (literal -> integer_literal .)
    WHILE           reduce using rule 66 (literal -> integer_literal .)


state 46

    (76) character_string_literal -> SCONST .

    TIMES           reduce using rule 76 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 76 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 76 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 76 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 76 (character_string_literal -> SCONST .)
    LAND            reduce using rule 76 (character_string_literal -> SCONST .)
    AND             reduce using rule 76 (character_string_literal -> SCONST .)
    OR              reduce using rule 76 (character_string_literal -> SCONST .)
    EQ              reduce using rule 76 (character_string_literal -> SCONST .)
    NE              reduce using rule 76 (character_string_literal -> SCONST .)
    GT              reduce using rule 76 (character_string_literal -> SCONST .)
    GEQ             reduce using rule 76 (character_string_literal -> SCONST .)
    LT              reduce using rule 76 (character_string_literal -> SCONST .)
    LEQ             reduce using rule 76 (character_string_literal -> SCONST .)
    IN              reduce using rule 76 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 76 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 76 (character_string_literal -> SCONST .)
    LBRACKET        reduce using rule 76 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 76 (character_string_literal -> SCONST .)
    THEN            reduce using rule 76 (character_string_literal -> SCONST .)
    COLON           reduce using rule 76 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 76 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 76 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 76 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 76 (character_string_literal -> SCONST .)
    TO              reduce using rule 76 (character_string_literal -> SCONST .)
    BY              reduce using rule 76 (character_string_literal -> SCONST .)
    FI              reduce using rule 76 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 76 (character_string_literal -> SCONST .)


state 47

    (68) literal -> character_literal .

    TIMES           reduce using rule 68 (literal -> character_literal .)
    DIVIDE          reduce using rule 68 (literal -> character_literal .)
    MODULO          reduce using rule 68 (literal -> character_literal .)
    PLUS            reduce using rule 68 (literal -> character_literal .)
    MINUS           reduce using rule 68 (literal -> character_literal .)
    LAND            reduce using rule 68 (literal -> character_literal .)
    AND             reduce using rule 68 (literal -> character_literal .)
    OR              reduce using rule 68 (literal -> character_literal .)
    EQ              reduce using rule 68 (literal -> character_literal .)
    NE              reduce using rule 68 (literal -> character_literal .)
    GT              reduce using rule 68 (literal -> character_literal .)
    GEQ             reduce using rule 68 (literal -> character_literal .)
    LT              reduce using rule 68 (literal -> character_literal .)
    LEQ             reduce using rule 68 (literal -> character_literal .)
    IN              reduce using rule 68 (literal -> character_literal .)
    SEMI            reduce using rule 68 (literal -> character_literal .)
    LBRACKET        reduce using rule 68 (literal -> character_literal .)
    THEN            reduce using rule 68 (literal -> character_literal .)
    DOWN            reduce using rule 68 (literal -> character_literal .)
    TO              reduce using rule 68 (literal -> character_literal .)
    BY              reduce using rule 68 (literal -> character_literal .)
    RPAREN          reduce using rule 68 (literal -> character_literal .)
    COMMA           reduce using rule 68 (literal -> character_literal .)
    COLON           reduce using rule 68 (literal -> character_literal .)
    RBRACKET        reduce using rule 68 (literal -> character_literal .)
    ELSE            reduce using rule 68 (literal -> character_literal .)
    ELSIF           reduce using rule 68 (literal -> character_literal .)
    FI              reduce using rule 68 (literal -> character_literal .)
    WHILE           reduce using rule 68 (literal -> character_literal .)


state 48

    (103) operand1 -> operand2 .
    (110) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (111) arithmetic_multiplicative_operator -> . TIMES
    (112) arithmetic_multiplicative_operator -> . DIVIDE
    (113) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 103 (operand1 -> operand2 .)
    MINUS           reduce using rule 103 (operand1 -> operand2 .)
    LAND            reduce using rule 103 (operand1 -> operand2 .)
    AND             reduce using rule 103 (operand1 -> operand2 .)
    OR              reduce using rule 103 (operand1 -> operand2 .)
    EQ              reduce using rule 103 (operand1 -> operand2 .)
    NE              reduce using rule 103 (operand1 -> operand2 .)
    GT              reduce using rule 103 (operand1 -> operand2 .)
    GEQ             reduce using rule 103 (operand1 -> operand2 .)
    LT              reduce using rule 103 (operand1 -> operand2 .)
    LEQ             reduce using rule 103 (operand1 -> operand2 .)
    IN              reduce using rule 103 (operand1 -> operand2 .)
    COLON           reduce using rule 103 (operand1 -> operand2 .)
    ELSE            reduce using rule 103 (operand1 -> operand2 .)
    ELSIF           reduce using rule 103 (operand1 -> operand2 .)
    RPAREN          reduce using rule 103 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 103 (operand1 -> operand2 .)
    SEMI            reduce using rule 103 (operand1 -> operand2 .)
    COMMA           reduce using rule 103 (operand1 -> operand2 .)
    THEN            reduce using rule 103 (operand1 -> operand2 .)
    WHILE           reduce using rule 103 (operand1 -> operand2 .)
    DOWN            reduce using rule 103 (operand1 -> operand2 .)
    TO              reduce using rule 103 (operand1 -> operand2 .)
    BY              reduce using rule 103 (operand1 -> operand2 .)
    FI              reduce using rule 103 (operand1 -> operand2 .)
    TIMES           shift and go to state 119
    DIVIDE          shift and go to state 117
    MODULO          shift and go to state 116

    arithmetic_multiplicative_operator shift and go to state 118

state 49

    (114) operand3 -> operand4 .

    TIMES           reduce using rule 114 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 114 (operand3 -> operand4 .)
    MODULO          reduce using rule 114 (operand3 -> operand4 .)
    PLUS            reduce using rule 114 (operand3 -> operand4 .)
    MINUS           reduce using rule 114 (operand3 -> operand4 .)
    LAND            reduce using rule 114 (operand3 -> operand4 .)
    AND             reduce using rule 114 (operand3 -> operand4 .)
    OR              reduce using rule 114 (operand3 -> operand4 .)
    EQ              reduce using rule 114 (operand3 -> operand4 .)
    NE              reduce using rule 114 (operand3 -> operand4 .)
    GT              reduce using rule 114 (operand3 -> operand4 .)
    GEQ             reduce using rule 114 (operand3 -> operand4 .)
    LT              reduce using rule 114 (operand3 -> operand4 .)
    LEQ             reduce using rule 114 (operand3 -> operand4 .)
    IN              reduce using rule 114 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 114 (operand3 -> operand4 .)
    SEMI            reduce using rule 114 (operand3 -> operand4 .)
    THEN            reduce using rule 114 (operand3 -> operand4 .)
    RPAREN          reduce using rule 114 (operand3 -> operand4 .)
    COMMA           reduce using rule 114 (operand3 -> operand4 .)
    COLON           reduce using rule 114 (operand3 -> operand4 .)
    ELSE            reduce using rule 114 (operand3 -> operand4 .)
    ELSIF           reduce using rule 114 (operand3 -> operand4 .)
    DOWN            reduce using rule 114 (operand3 -> operand4 .)
    TO              reduce using rule 114 (operand3 -> operand4 .)
    BY              reduce using rule 114 (operand3 -> operand4 .)
    FI              reduce using rule 114 (operand3 -> operand4 .)
    WHILE           reduce using rule 114 (operand3 -> operand4 .)


state 50

    (63) primitive_value -> value_array_element .

    TIMES           reduce using rule 63 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 63 (primitive_value -> value_array_element .)
    MODULO          reduce using rule 63 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 63 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 63 (primitive_value -> value_array_element .)
    LAND            reduce using rule 63 (primitive_value -> value_array_element .)
    AND             reduce using rule 63 (primitive_value -> value_array_element .)
    OR              reduce using rule 63 (primitive_value -> value_array_element .)
    EQ              reduce using rule 63 (primitive_value -> value_array_element .)
    NE              reduce using rule 63 (primitive_value -> value_array_element .)
    GT              reduce using rule 63 (primitive_value -> value_array_element .)
    GEQ             reduce using rule 63 (primitive_value -> value_array_element .)
    LT              reduce using rule 63 (primitive_value -> value_array_element .)
    LEQ             reduce using rule 63 (primitive_value -> value_array_element .)
    IN              reduce using rule 63 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 63 (primitive_value -> value_array_element .)
    LBRACKET        reduce using rule 63 (primitive_value -> value_array_element .)
    COLON           reduce using rule 63 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 63 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 63 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 63 (primitive_value -> value_array_element .)
    THEN            reduce using rule 63 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 63 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 63 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 63 (primitive_value -> value_array_element .)
    TO              reduce using rule 63 (primitive_value -> value_array_element .)
    BY              reduce using rule 63 (primitive_value -> value_array_element .)
    FI              reduce using rule 63 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 63 (primitive_value -> value_array_element .)


state 51

    (70) literal -> character_string_literal .

    TIMES           reduce using rule 70 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 70 (literal -> character_string_literal .)
    MODULO          reduce using rule 70 (literal -> character_string_literal .)
    PLUS            reduce using rule 70 (literal -> character_string_literal .)
    MINUS           reduce using rule 70 (literal -> character_string_literal .)
    LAND            reduce using rule 70 (literal -> character_string_literal .)
    AND             reduce using rule 70 (literal -> character_string_literal .)
    OR              reduce using rule 70 (literal -> character_string_literal .)
    EQ              reduce using rule 70 (literal -> character_string_literal .)
    NE              reduce using rule 70 (literal -> character_string_literal .)
    GT              reduce using rule 70 (literal -> character_string_literal .)
    GEQ             reduce using rule 70 (literal -> character_string_literal .)
    LT              reduce using rule 70 (literal -> character_string_literal .)
    LEQ             reduce using rule 70 (literal -> character_string_literal .)
    IN              reduce using rule 70 (literal -> character_string_literal .)
    SEMI            reduce using rule 70 (literal -> character_string_literal .)
    LBRACKET        reduce using rule 70 (literal -> character_string_literal .)
    THEN            reduce using rule 70 (literal -> character_string_literal .)
    DOWN            reduce using rule 70 (literal -> character_string_literal .)
    TO              reduce using rule 70 (literal -> character_string_literal .)
    BY              reduce using rule 70 (literal -> character_string_literal .)
    RPAREN          reduce using rule 70 (literal -> character_string_literal .)
    COMMA           reduce using rule 70 (literal -> character_string_literal .)
    COLON           reduce using rule 70 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 70 (literal -> character_string_literal .)
    ELSE            reduce using rule 70 (literal -> character_string_literal .)
    ELSIF           reduce using rule 70 (literal -> character_string_literal .)
    FI              reduce using rule 70 (literal -> character_string_literal .)
    WHILE           reduce using rule 70 (literal -> character_string_literal .)


state 52

    (75) empty_literal -> NULL .

    TIMES           reduce using rule 75 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 75 (empty_literal -> NULL .)
    MODULO          reduce using rule 75 (empty_literal -> NULL .)
    PLUS            reduce using rule 75 (empty_literal -> NULL .)
    MINUS           reduce using rule 75 (empty_literal -> NULL .)
    LAND            reduce using rule 75 (empty_literal -> NULL .)
    AND             reduce using rule 75 (empty_literal -> NULL .)
    OR              reduce using rule 75 (empty_literal -> NULL .)
    EQ              reduce using rule 75 (empty_literal -> NULL .)
    NE              reduce using rule 75 (empty_literal -> NULL .)
    GT              reduce using rule 75 (empty_literal -> NULL .)
    GEQ             reduce using rule 75 (empty_literal -> NULL .)
    LT              reduce using rule 75 (empty_literal -> NULL .)
    LEQ             reduce using rule 75 (empty_literal -> NULL .)
    IN              reduce using rule 75 (empty_literal -> NULL .)
    ELSE            reduce using rule 75 (empty_literal -> NULL .)
    ELSIF           reduce using rule 75 (empty_literal -> NULL .)
    LBRACKET        reduce using rule 75 (empty_literal -> NULL .)
    DOWN            reduce using rule 75 (empty_literal -> NULL .)
    TO              reduce using rule 75 (empty_literal -> NULL .)
    RPAREN          reduce using rule 75 (empty_literal -> NULL .)
    COMMA           reduce using rule 75 (empty_literal -> NULL .)
    SEMI            reduce using rule 75 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 75 (empty_literal -> NULL .)
    THEN            reduce using rule 75 (empty_literal -> NULL .)
    COLON           reduce using rule 75 (empty_literal -> NULL .)
    BY              reduce using rule 75 (empty_literal -> NULL .)
    FI              reduce using rule 75 (empty_literal -> NULL .)
    WHILE           reduce using rule 75 (empty_literal -> NULL .)


state 53

    (176) result_action -> RESULT result .

    SEMI            reduce using rule 176 (result_action -> RESULT result .)


state 54

    (55) location -> call_action .

    ARROW           reduce using rule 55 (location -> call_action .)
    TIMES           reduce using rule 55 (location -> call_action .)
    DIVIDE          reduce using rule 55 (location -> call_action .)
    MODULO          reduce using rule 55 (location -> call_action .)
    PLUS            reduce using rule 55 (location -> call_action .)
    MINUS           reduce using rule 55 (location -> call_action .)
    LAND            reduce using rule 55 (location -> call_action .)
    AND             reduce using rule 55 (location -> call_action .)
    OR              reduce using rule 55 (location -> call_action .)
    EQ              reduce using rule 55 (location -> call_action .)
    NE              reduce using rule 55 (location -> call_action .)
    GT              reduce using rule 55 (location -> call_action .)
    GEQ             reduce using rule 55 (location -> call_action .)
    LT              reduce using rule 55 (location -> call_action .)
    LEQ             reduce using rule 55 (location -> call_action .)
    IN              reduce using rule 55 (location -> call_action .)
    COLON           reduce using rule 55 (location -> call_action .)
    RPAREN          reduce using rule 55 (location -> call_action .)
    COMMA           reduce using rule 55 (location -> call_action .)
    LBRACKET        reduce using rule 55 (location -> call_action .)
    THEN            reduce using rule 55 (location -> call_action .)
    RBRACKET        reduce using rule 55 (location -> call_action .)
    DOWN            reduce using rule 55 (location -> call_action .)
    TO              reduce using rule 55 (location -> call_action .)
    BY              reduce using rule 55 (location -> call_action .)
    SEMI            reduce using rule 55 (location -> call_action .)
    ELSE            reduce using rule 55 (location -> call_action .)
    ELSIF           reduce using rule 55 (location -> call_action .)
    FI              reduce using rule 55 (location -> call_action .)
    WHILE           reduce using rule 55 (location -> call_action .)


state 55

    (81) expression -> operand0 .
    (91) operand0 -> operand0 . operator1 operand1
    (92) operator1 -> . relational_operator
    (93) operator1 -> . membership_operator
    (94) relational_operator -> . AND
    (95) relational_operator -> . OR
    (96) relational_operator -> . EQ
    (97) relational_operator -> . NE
    (98) relational_operator -> . GT
    (99) relational_operator -> . GEQ
    (100) relational_operator -> . LT
    (101) relational_operator -> . LEQ
    (102) membership_operator -> . IN

    SEMI            reduce using rule 81 (expression -> operand0 .)
    RPAREN          reduce using rule 81 (expression -> operand0 .)
    RBRACKET        reduce using rule 81 (expression -> operand0 .)
    COMMA           reduce using rule 81 (expression -> operand0 .)
    THEN            reduce using rule 81 (expression -> operand0 .)
    DOWN            reduce using rule 81 (expression -> operand0 .)
    TO              reduce using rule 81 (expression -> operand0 .)
    COLON           reduce using rule 81 (expression -> operand0 .)
    WHILE           reduce using rule 81 (expression -> operand0 .)
    FI              reduce using rule 81 (expression -> operand0 .)
    BY              reduce using rule 81 (expression -> operand0 .)
    ELSE            reduce using rule 81 (expression -> operand0 .)
    ELSIF           reduce using rule 81 (expression -> operand0 .)
    AND             shift and go to state 122
    OR              shift and go to state 130
    EQ              shift and go to state 124
    NE              shift and go to state 127
    GT              shift and go to state 128
    GEQ             shift and go to state 120
    LT              shift and go to state 129
    LEQ             shift and go to state 123
    IN              shift and go to state 126

    relational_operator            shift and go to state 121
    membership_operator            shift and go to state 125
    operator1                      shift and go to state 131

state 56

    (77) value_array_element -> array_primitive_value . LBRACKET expression_list RBRACKET
    (78) value_array_slice -> array_primitive_value . LBRACKET expression COLON expression RBRACKET

    LBRACKET        shift and go to state 132


state 57

    (116) monadic_operator -> MINUS .

    ARROW           reduce using rule 116 (monadic_operator -> MINUS .)
    ID              reduce using rule 116 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 116 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 116 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 116 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 116 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 116 (monadic_operator -> MINUS .)
    NULL            reduce using rule 116 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 116 (monadic_operator -> MINUS .)
    ABS             reduce using rule 116 (monadic_operator -> MINUS .)
    ASC             reduce using rule 116 (monadic_operator -> MINUS .)
    NUM             reduce using rule 116 (monadic_operator -> MINUS .)
    UPPER           reduce using rule 116 (monadic_operator -> MINUS .)
    LOWER           reduce using rule 116 (monadic_operator -> MINUS .)
    LENGTH          reduce using rule 116 (monadic_operator -> MINUS .)
    READ            reduce using rule 116 (monadic_operator -> MINUS .)
    PRINT           reduce using rule 116 (monadic_operator -> MINUS .)


state 58

    (121) referenced_location -> ARROW . location
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    ID              shift and go to state 26
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 13
    dereferenced_reference         shift and go to state 43
    call_action                    shift and go to state 54
    location                       shift and go to state 133
    builtin_call                   shift and go to state 8
    array_slice                    shift and go to state 28
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78

state 59

    (90) operand0 -> operand1 .
    (104) operand1 -> operand1 . arithmetic_additive_operator operand2
    (105) operand1 -> operand1 . string_concatenation_operator operand2
    (106) arithmetic_additive_operator -> . PLUS
    (107) arithmetic_additive_operator -> . MINUS
    (108) string_concatenation_operator -> . LAND

    AND             reduce using rule 90 (operand0 -> operand1 .)
    OR              reduce using rule 90 (operand0 -> operand1 .)
    EQ              reduce using rule 90 (operand0 -> operand1 .)
    NE              reduce using rule 90 (operand0 -> operand1 .)
    GT              reduce using rule 90 (operand0 -> operand1 .)
    GEQ             reduce using rule 90 (operand0 -> operand1 .)
    LT              reduce using rule 90 (operand0 -> operand1 .)
    LEQ             reduce using rule 90 (operand0 -> operand1 .)
    IN              reduce using rule 90 (operand0 -> operand1 .)
    COLON           reduce using rule 90 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 90 (operand0 -> operand1 .)
    RPAREN          reduce using rule 90 (operand0 -> operand1 .)
    ELSE            reduce using rule 90 (operand0 -> operand1 .)
    ELSIF           reduce using rule 90 (operand0 -> operand1 .)
    THEN            reduce using rule 90 (operand0 -> operand1 .)
    COMMA           reduce using rule 90 (operand0 -> operand1 .)
    FI              reduce using rule 90 (operand0 -> operand1 .)
    SEMI            reduce using rule 90 (operand0 -> operand1 .)
    DOWN            reduce using rule 90 (operand0 -> operand1 .)
    TO              reduce using rule 90 (operand0 -> operand1 .)
    BY              reduce using rule 90 (operand0 -> operand1 .)
    WHILE           reduce using rule 90 (operand0 -> operand1 .)
    PLUS            shift and go to state 134
    MINUS           shift and go to state 137
    LAND            shift and go to state 136

    string_concatenation_operator  shift and go to state 135
    arithmetic_additive_operator   shift and go to state 138

state 60

    (65) primitive_value -> parenthesized_expression .

    TIMES           reduce using rule 65 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 65 (primitive_value -> parenthesized_expression .)
    MODULO          reduce using rule 65 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 65 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 65 (primitive_value -> parenthesized_expression .)
    LAND            reduce using rule 65 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 65 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 65 (primitive_value -> parenthesized_expression .)
    EQ              reduce using rule 65 (primitive_value -> parenthesized_expression .)
    NE              reduce using rule 65 (primitive_value -> parenthesized_expression .)
    GT              reduce using rule 65 (primitive_value -> parenthesized_expression .)
    GEQ             reduce using rule 65 (primitive_value -> parenthesized_expression .)
    LT              reduce using rule 65 (primitive_value -> parenthesized_expression .)
    LEQ             reduce using rule 65 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 65 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 65 (primitive_value -> parenthesized_expression .)
    LBRACKET        reduce using rule 65 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 65 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 65 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 65 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 65 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 65 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 65 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 65 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 65 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 65 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 65 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 65 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 65 (primitive_value -> parenthesized_expression .)


state 61

    (82) expression -> conditional_expression .

    SEMI            reduce using rule 82 (expression -> conditional_expression .)
    RPAREN          reduce using rule 82 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 82 (expression -> conditional_expression .)
    COMMA           reduce using rule 82 (expression -> conditional_expression .)
    THEN            reduce using rule 82 (expression -> conditional_expression .)
    DOWN            reduce using rule 82 (expression -> conditional_expression .)
    TO              reduce using rule 82 (expression -> conditional_expression .)
    COLON           reduce using rule 82 (expression -> conditional_expression .)
    WHILE           reduce using rule 82 (expression -> conditional_expression .)
    FI              reduce using rule 82 (expression -> conditional_expression .)
    BY              reduce using rule 82 (expression -> conditional_expression .)
    ELSE            reduce using rule 82 (expression -> conditional_expression .)
    ELSIF           reduce using rule 82 (expression -> conditional_expression .)


state 62

    (64) primitive_value -> value_array_slice .

    TIMES           reduce using rule 64 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 64 (primitive_value -> value_array_slice .)
    MODULO          reduce using rule 64 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 64 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 64 (primitive_value -> value_array_slice .)
    LAND            reduce using rule 64 (primitive_value -> value_array_slice .)
    AND             reduce using rule 64 (primitive_value -> value_array_slice .)
    OR              reduce using rule 64 (primitive_value -> value_array_slice .)
    EQ              reduce using rule 64 (primitive_value -> value_array_slice .)
    NE              reduce using rule 64 (primitive_value -> value_array_slice .)
    GT              reduce using rule 64 (primitive_value -> value_array_slice .)
    GEQ             reduce using rule 64 (primitive_value -> value_array_slice .)
    LT              reduce using rule 64 (primitive_value -> value_array_slice .)
    LEQ             reduce using rule 64 (primitive_value -> value_array_slice .)
    IN              reduce using rule 64 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 64 (primitive_value -> value_array_slice .)
    LBRACKET        reduce using rule 64 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 64 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 64 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 64 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 64 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 64 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 64 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 64 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 64 (primitive_value -> value_array_slice .)
    TO              reduce using rule 64 (primitive_value -> value_array_slice .)
    BY              reduce using rule 64 (primitive_value -> value_array_slice .)
    FI              reduce using rule 64 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 64 (primitive_value -> value_array_slice .)


state 63

    (69) literal -> empty_literal .

    TIMES           reduce using rule 69 (literal -> empty_literal .)
    DIVIDE          reduce using rule 69 (literal -> empty_literal .)
    MODULO          reduce using rule 69 (literal -> empty_literal .)
    PLUS            reduce using rule 69 (literal -> empty_literal .)
    MINUS           reduce using rule 69 (literal -> empty_literal .)
    LAND            reduce using rule 69 (literal -> empty_literal .)
    AND             reduce using rule 69 (literal -> empty_literal .)
    OR              reduce using rule 69 (literal -> empty_literal .)
    EQ              reduce using rule 69 (literal -> empty_literal .)
    NE              reduce using rule 69 (literal -> empty_literal .)
    GT              reduce using rule 69 (literal -> empty_literal .)
    GEQ             reduce using rule 69 (literal -> empty_literal .)
    LT              reduce using rule 69 (literal -> empty_literal .)
    LEQ             reduce using rule 69 (literal -> empty_literal .)
    IN              reduce using rule 69 (literal -> empty_literal .)
    SEMI            reduce using rule 69 (literal -> empty_literal .)
    LBRACKET        reduce using rule 69 (literal -> empty_literal .)
    THEN            reduce using rule 69 (literal -> empty_literal .)
    DOWN            reduce using rule 69 (literal -> empty_literal .)
    TO              reduce using rule 69 (literal -> empty_literal .)
    BY              reduce using rule 69 (literal -> empty_literal .)
    RPAREN          reduce using rule 69 (literal -> empty_literal .)
    COMMA           reduce using rule 69 (literal -> empty_literal .)
    COLON           reduce using rule 69 (literal -> empty_literal .)
    RBRACKET        reduce using rule 69 (literal -> empty_literal .)
    ELSE            reduce using rule 69 (literal -> empty_literal .)
    ELSIF           reduce using rule 69 (literal -> empty_literal .)
    FI              reduce using rule 69 (literal -> empty_literal .)
    WHILE           reduce using rule 69 (literal -> empty_literal .)


state 64

    (73) boolean_literal -> TRUE .

    TIMES           reduce using rule 73 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 73 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 73 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 73 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 73 (boolean_literal -> TRUE .)
    LAND            reduce using rule 73 (boolean_literal -> TRUE .)
    AND             reduce using rule 73 (boolean_literal -> TRUE .)
    OR              reduce using rule 73 (boolean_literal -> TRUE .)
    EQ              reduce using rule 73 (boolean_literal -> TRUE .)
    NE              reduce using rule 73 (boolean_literal -> TRUE .)
    GT              reduce using rule 73 (boolean_literal -> TRUE .)
    GEQ             reduce using rule 73 (boolean_literal -> TRUE .)
    LT              reduce using rule 73 (boolean_literal -> TRUE .)
    LEQ             reduce using rule 73 (boolean_literal -> TRUE .)
    IN              reduce using rule 73 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 73 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 73 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 73 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 73 (boolean_literal -> TRUE .)
    THEN            reduce using rule 73 (boolean_literal -> TRUE .)
    COLON           reduce using rule 73 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 73 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 73 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 73 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 73 (boolean_literal -> TRUE .)
    TO              reduce using rule 73 (boolean_literal -> TRUE .)
    BY              reduce using rule 73 (boolean_literal -> TRUE .)
    FI              reduce using rule 73 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 73 (boolean_literal -> TRUE .)


state 65

    (115) operand3 -> monadic_operator . operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    dereferenced_reference         shift and go to state 43
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand4                       shift and go to state 139
    value_array_element            shift and go to state 50
    builtin_call                   shift and go to state 8
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    literal                        shift and go to state 69
    array_element                  shift and go to state 13
    array_primitive_value          shift and go to state 56
    call_action                    shift and go to state 54
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 66

    (119) operand4 -> referenced_location .

    TIMES           reduce using rule 119 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 119 (operand4 -> referenced_location .)
    MODULO          reduce using rule 119 (operand4 -> referenced_location .)
    PLUS            reduce using rule 119 (operand4 -> referenced_location .)
    MINUS           reduce using rule 119 (operand4 -> referenced_location .)
    LAND            reduce using rule 119 (operand4 -> referenced_location .)
    AND             reduce using rule 119 (operand4 -> referenced_location .)
    OR              reduce using rule 119 (operand4 -> referenced_location .)
    EQ              reduce using rule 119 (operand4 -> referenced_location .)
    NE              reduce using rule 119 (operand4 -> referenced_location .)
    GT              reduce using rule 119 (operand4 -> referenced_location .)
    GEQ             reduce using rule 119 (operand4 -> referenced_location .)
    LT              reduce using rule 119 (operand4 -> referenced_location .)
    LEQ             reduce using rule 119 (operand4 -> referenced_location .)
    IN              reduce using rule 119 (operand4 -> referenced_location .)
    SEMI            reduce using rule 119 (operand4 -> referenced_location .)
    COMMA           reduce using rule 119 (operand4 -> referenced_location .)
    COLON           reduce using rule 119 (operand4 -> referenced_location .)
    THEN            reduce using rule 119 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 119 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 119 (operand4 -> referenced_location .)
    ELSE            reduce using rule 119 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 119 (operand4 -> referenced_location .)
    DOWN            reduce using rule 119 (operand4 -> referenced_location .)
    TO              reduce using rule 119 (operand4 -> referenced_location .)
    BY              reduce using rule 119 (operand4 -> referenced_location .)
    FI              reduce using rule 119 (operand4 -> referenced_location .)
    WHILE           reduce using rule 119 (operand4 -> referenced_location .)


state 67

    (80) parenthesized_expression -> LPAREN . expression RPAREN
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 140
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 68

    (117) monadic_operator -> NOT .

    ARROW           reduce using rule 117 (monadic_operator -> NOT .)
    ID              reduce using rule 117 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 117 (monadic_operator -> NOT .)
    ICONST          reduce using rule 117 (monadic_operator -> NOT .)
    FALSE           reduce using rule 117 (monadic_operator -> NOT .)
    TRUE            reduce using rule 117 (monadic_operator -> NOT .)
    CCONST          reduce using rule 117 (monadic_operator -> NOT .)
    NULL            reduce using rule 117 (monadic_operator -> NOT .)
    SCONST          reduce using rule 117 (monadic_operator -> NOT .)
    ABS             reduce using rule 117 (monadic_operator -> NOT .)
    ASC             reduce using rule 117 (monadic_operator -> NOT .)
    NUM             reduce using rule 117 (monadic_operator -> NOT .)
    UPPER           reduce using rule 117 (monadic_operator -> NOT .)
    LOWER           reduce using rule 117 (monadic_operator -> NOT .)
    LENGTH          reduce using rule 117 (monadic_operator -> NOT .)
    READ            reduce using rule 117 (monadic_operator -> NOT .)
    PRINT           reduce using rule 117 (monadic_operator -> NOT .)


state 69

    (62) primitive_value -> literal .

    TIMES           reduce using rule 62 (primitive_value -> literal .)
    DIVIDE          reduce using rule 62 (primitive_value -> literal .)
    MODULO          reduce using rule 62 (primitive_value -> literal .)
    PLUS            reduce using rule 62 (primitive_value -> literal .)
    MINUS           reduce using rule 62 (primitive_value -> literal .)
    LAND            reduce using rule 62 (primitive_value -> literal .)
    AND             reduce using rule 62 (primitive_value -> literal .)
    OR              reduce using rule 62 (primitive_value -> literal .)
    EQ              reduce using rule 62 (primitive_value -> literal .)
    NE              reduce using rule 62 (primitive_value -> literal .)
    GT              reduce using rule 62 (primitive_value -> literal .)
    GEQ             reduce using rule 62 (primitive_value -> literal .)
    LT              reduce using rule 62 (primitive_value -> literal .)
    LEQ             reduce using rule 62 (primitive_value -> literal .)
    IN              reduce using rule 62 (primitive_value -> literal .)
    RBRACKET        reduce using rule 62 (primitive_value -> literal .)
    LBRACKET        reduce using rule 62 (primitive_value -> literal .)
    COLON           reduce using rule 62 (primitive_value -> literal .)
    RPAREN          reduce using rule 62 (primitive_value -> literal .)
    COMMA           reduce using rule 62 (primitive_value -> literal .)
    SEMI            reduce using rule 62 (primitive_value -> literal .)
    THEN            reduce using rule 62 (primitive_value -> literal .)
    ELSE            reduce using rule 62 (primitive_value -> literal .)
    ELSIF           reduce using rule 62 (primitive_value -> literal .)
    DOWN            reduce using rule 62 (primitive_value -> literal .)
    TO              reduce using rule 62 (primitive_value -> literal .)
    BY              reduce using rule 62 (primitive_value -> literal .)
    FI              reduce using rule 62 (primitive_value -> literal .)
    WHILE           reduce using rule 62 (primitive_value -> literal .)


state 70

    (109) operand2 -> operand3 .

    TIMES           reduce using rule 109 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 109 (operand2 -> operand3 .)
    MODULO          reduce using rule 109 (operand2 -> operand3 .)
    PLUS            reduce using rule 109 (operand2 -> operand3 .)
    MINUS           reduce using rule 109 (operand2 -> operand3 .)
    LAND            reduce using rule 109 (operand2 -> operand3 .)
    AND             reduce using rule 109 (operand2 -> operand3 .)
    OR              reduce using rule 109 (operand2 -> operand3 .)
    EQ              reduce using rule 109 (operand2 -> operand3 .)
    NE              reduce using rule 109 (operand2 -> operand3 .)
    GT              reduce using rule 109 (operand2 -> operand3 .)
    GEQ             reduce using rule 109 (operand2 -> operand3 .)
    LT              reduce using rule 109 (operand2 -> operand3 .)
    LEQ             reduce using rule 109 (operand2 -> operand3 .)
    IN              reduce using rule 109 (operand2 -> operand3 .)
    DOWN            reduce using rule 109 (operand2 -> operand3 .)
    TO              reduce using rule 109 (operand2 -> operand3 .)
    BY              reduce using rule 109 (operand2 -> operand3 .)
    SEMI            reduce using rule 109 (operand2 -> operand3 .)
    COLON           reduce using rule 109 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 109 (operand2 -> operand3 .)
    COMMA           reduce using rule 109 (operand2 -> operand3 .)
    RPAREN          reduce using rule 109 (operand2 -> operand3 .)
    WHILE           reduce using rule 109 (operand2 -> operand3 .)
    THEN            reduce using rule 109 (operand2 -> operand3 .)
    ELSE            reduce using rule 109 (operand2 -> operand3 .)
    ELSIF           reduce using rule 109 (operand2 -> operand3 .)
    FI              reduce using rule 109 (operand2 -> operand3 .)


state 71

    (71) integer_literal -> ICONST .

    TIMES           reduce using rule 71 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 71 (integer_literal -> ICONST .)
    MODULO          reduce using rule 71 (integer_literal -> ICONST .)
    PLUS            reduce using rule 71 (integer_literal -> ICONST .)
    MINUS           reduce using rule 71 (integer_literal -> ICONST .)
    LAND            reduce using rule 71 (integer_literal -> ICONST .)
    AND             reduce using rule 71 (integer_literal -> ICONST .)
    OR              reduce using rule 71 (integer_literal -> ICONST .)
    EQ              reduce using rule 71 (integer_literal -> ICONST .)
    NE              reduce using rule 71 (integer_literal -> ICONST .)
    GT              reduce using rule 71 (integer_literal -> ICONST .)
    GEQ             reduce using rule 71 (integer_literal -> ICONST .)
    LT              reduce using rule 71 (integer_literal -> ICONST .)
    LEQ             reduce using rule 71 (integer_literal -> ICONST .)
    IN              reduce using rule 71 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 71 (integer_literal -> ICONST .)
    LBRACKET        reduce using rule 71 (integer_literal -> ICONST .)
    SEMI            reduce using rule 71 (integer_literal -> ICONST .)
    THEN            reduce using rule 71 (integer_literal -> ICONST .)
    COMMA           reduce using rule 71 (integer_literal -> ICONST .)
    COLON           reduce using rule 71 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 71 (integer_literal -> ICONST .)
    ELSE            reduce using rule 71 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 71 (integer_literal -> ICONST .)
    DOWN            reduce using rule 71 (integer_literal -> ICONST .)
    TO              reduce using rule 71 (integer_literal -> ICONST .)
    BY              reduce using rule 71 (integer_literal -> ICONST .)
    FI              reduce using rule 71 (integer_literal -> ICONST .)
    WHILE           reduce using rule 71 (integer_literal -> ICONST .)


state 72

    (177) result -> expression .

    SEMI            reduce using rule 177 (result -> expression .)


state 73

    (74) character_literal -> CCONST .

    TIMES           reduce using rule 74 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 74 (character_literal -> CCONST .)
    MODULO          reduce using rule 74 (character_literal -> CCONST .)
    PLUS            reduce using rule 74 (character_literal -> CCONST .)
    MINUS           reduce using rule 74 (character_literal -> CCONST .)
    LAND            reduce using rule 74 (character_literal -> CCONST .)
    AND             reduce using rule 74 (character_literal -> CCONST .)
    OR              reduce using rule 74 (character_literal -> CCONST .)
    EQ              reduce using rule 74 (character_literal -> CCONST .)
    NE              reduce using rule 74 (character_literal -> CCONST .)
    GT              reduce using rule 74 (character_literal -> CCONST .)
    GEQ             reduce using rule 74 (character_literal -> CCONST .)
    LT              reduce using rule 74 (character_literal -> CCONST .)
    LEQ             reduce using rule 74 (character_literal -> CCONST .)
    IN              reduce using rule 74 (character_literal -> CCONST .)
    WHILE           reduce using rule 74 (character_literal -> CCONST .)
    SEMI            reduce using rule 74 (character_literal -> CCONST .)
    LBRACKET        reduce using rule 74 (character_literal -> CCONST .)
    RPAREN          reduce using rule 74 (character_literal -> CCONST .)
    COMMA           reduce using rule 74 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 74 (character_literal -> CCONST .)
    THEN            reduce using rule 74 (character_literal -> CCONST .)
    COLON           reduce using rule 74 (character_literal -> CCONST .)
    ELSE            reduce using rule 74 (character_literal -> CCONST .)
    ELSIF           reduce using rule 74 (character_literal -> CCONST .)
    DOWN            reduce using rule 74 (character_literal -> CCONST .)
    TO              reduce using rule 74 (character_literal -> CCONST .)
    BY              reduce using rule 74 (character_literal -> CCONST .)
    FI              reduce using rule 74 (character_literal -> CCONST .)


state 74

    (120) operand4 -> primitive_value .
    (79) array_primitive_value -> primitive_value .

    TIMES           reduce using rule 120 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 120 (operand4 -> primitive_value .)
    MODULO          reduce using rule 120 (operand4 -> primitive_value .)
    PLUS            reduce using rule 120 (operand4 -> primitive_value .)
    MINUS           reduce using rule 120 (operand4 -> primitive_value .)
    LAND            reduce using rule 120 (operand4 -> primitive_value .)
    AND             reduce using rule 120 (operand4 -> primitive_value .)
    OR              reduce using rule 120 (operand4 -> primitive_value .)
    EQ              reduce using rule 120 (operand4 -> primitive_value .)
    NE              reduce using rule 120 (operand4 -> primitive_value .)
    GT              reduce using rule 120 (operand4 -> primitive_value .)
    GEQ             reduce using rule 120 (operand4 -> primitive_value .)
    LT              reduce using rule 120 (operand4 -> primitive_value .)
    LEQ             reduce using rule 120 (operand4 -> primitive_value .)
    IN              reduce using rule 120 (operand4 -> primitive_value .)
    SEMI            reduce using rule 120 (operand4 -> primitive_value .)
    COMMA           reduce using rule 120 (operand4 -> primitive_value .)
    COLON           reduce using rule 120 (operand4 -> primitive_value .)
    THEN            reduce using rule 120 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 120 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 120 (operand4 -> primitive_value .)
    ELSE            reduce using rule 120 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 120 (operand4 -> primitive_value .)
    DOWN            reduce using rule 120 (operand4 -> primitive_value .)
    TO              reduce using rule 120 (operand4 -> primitive_value .)
    BY              reduce using rule 120 (operand4 -> primitive_value .)
    FI              reduce using rule 120 (operand4 -> primitive_value .)
    WHILE           reduce using rule 120 (operand4 -> primitive_value .)
    LBRACKET        reduce using rule 79 (array_primitive_value -> primitive_value .)


state 75

    (72) boolean_literal -> FALSE .

    TIMES           reduce using rule 72 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 72 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 72 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 72 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 72 (boolean_literal -> FALSE .)
    LAND            reduce using rule 72 (boolean_literal -> FALSE .)
    AND             reduce using rule 72 (boolean_literal -> FALSE .)
    OR              reduce using rule 72 (boolean_literal -> FALSE .)
    EQ              reduce using rule 72 (boolean_literal -> FALSE .)
    NE              reduce using rule 72 (boolean_literal -> FALSE .)
    GT              reduce using rule 72 (boolean_literal -> FALSE .)
    GEQ             reduce using rule 72 (boolean_literal -> FALSE .)
    LT              reduce using rule 72 (boolean_literal -> FALSE .)
    LEQ             reduce using rule 72 (boolean_literal -> FALSE .)
    IN              reduce using rule 72 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 72 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 72 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 72 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 72 (boolean_literal -> FALSE .)
    THEN            reduce using rule 72 (boolean_literal -> FALSE .)
    COLON           reduce using rule 72 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 72 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 72 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 72 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 72 (boolean_literal -> FALSE .)
    TO              reduce using rule 72 (boolean_literal -> FALSE .)
    BY              reduce using rule 72 (boolean_literal -> FALSE .)
    FI              reduce using rule 72 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 72 (boolean_literal -> FALSE .)


state 76

    (118) operand4 -> location .
    (56) dereferenced_reference -> location . ARROW
    (61) array_location -> location .

    TIMES           reduce using rule 118 (operand4 -> location .)
    DIVIDE          reduce using rule 118 (operand4 -> location .)
    MODULO          reduce using rule 118 (operand4 -> location .)
    PLUS            reduce using rule 118 (operand4 -> location .)
    MINUS           reduce using rule 118 (operand4 -> location .)
    LAND            reduce using rule 118 (operand4 -> location .)
    AND             reduce using rule 118 (operand4 -> location .)
    OR              reduce using rule 118 (operand4 -> location .)
    EQ              reduce using rule 118 (operand4 -> location .)
    NE              reduce using rule 118 (operand4 -> location .)
    GT              reduce using rule 118 (operand4 -> location .)
    GEQ             reduce using rule 118 (operand4 -> location .)
    LT              reduce using rule 118 (operand4 -> location .)
    LEQ             reduce using rule 118 (operand4 -> location .)
    IN              reduce using rule 118 (operand4 -> location .)
    SEMI            reduce using rule 118 (operand4 -> location .)
    COMMA           reduce using rule 118 (operand4 -> location .)
    COLON           reduce using rule 118 (operand4 -> location .)
    THEN            reduce using rule 118 (operand4 -> location .)
    RPAREN          reduce using rule 118 (operand4 -> location .)
    RBRACKET        reduce using rule 118 (operand4 -> location .)
    ELSE            reduce using rule 118 (operand4 -> location .)
    ELSIF           reduce using rule 118 (operand4 -> location .)
    DOWN            reduce using rule 118 (operand4 -> location .)
    TO              reduce using rule 118 (operand4 -> location .)
    BY              reduce using rule 118 (operand4 -> location .)
    FI              reduce using rule 118 (operand4 -> location .)
    WHILE           reduce using rule 118 (operand4 -> location .)
    ARROW           shift and go to state 111
    LBRACKET        reduce using rule 61 (array_location -> location .)


state 77

    (67) literal -> boolean_literal .

    TIMES           reduce using rule 67 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 67 (literal -> boolean_literal .)
    MODULO          reduce using rule 67 (literal -> boolean_literal .)
    PLUS            reduce using rule 67 (literal -> boolean_literal .)
    MINUS           reduce using rule 67 (literal -> boolean_literal .)
    LAND            reduce using rule 67 (literal -> boolean_literal .)
    AND             reduce using rule 67 (literal -> boolean_literal .)
    OR              reduce using rule 67 (literal -> boolean_literal .)
    EQ              reduce using rule 67 (literal -> boolean_literal .)
    NE              reduce using rule 67 (literal -> boolean_literal .)
    GT              reduce using rule 67 (literal -> boolean_literal .)
    GEQ             reduce using rule 67 (literal -> boolean_literal .)
    LT              reduce using rule 67 (literal -> boolean_literal .)
    LEQ             reduce using rule 67 (literal -> boolean_literal .)
    IN              reduce using rule 67 (literal -> boolean_literal .)
    SEMI            reduce using rule 67 (literal -> boolean_literal .)
    LBRACKET        reduce using rule 67 (literal -> boolean_literal .)
    THEN            reduce using rule 67 (literal -> boolean_literal .)
    DOWN            reduce using rule 67 (literal -> boolean_literal .)
    TO              reduce using rule 67 (literal -> boolean_literal .)
    BY              reduce using rule 67 (literal -> boolean_literal .)
    RPAREN          reduce using rule 67 (literal -> boolean_literal .)
    COMMA           reduce using rule 67 (literal -> boolean_literal .)
    COLON           reduce using rule 67 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 67 (literal -> boolean_literal .)
    ELSE            reduce using rule 67 (literal -> boolean_literal .)
    ELSIF           reduce using rule 67 (literal -> boolean_literal .)
    FI              reduce using rule 67 (literal -> boolean_literal .)
    WHILE           reduce using rule 67 (literal -> boolean_literal .)


state 78

    (51) location -> identifier .
    (168) procedure_call -> identifier . LPAREN RPAREN
    (169) procedure_call -> identifier . LPAREN parameter_list RPAREN

    ARROW           reduce using rule 51 (location -> identifier .)
    TIMES           reduce using rule 51 (location -> identifier .)
    DIVIDE          reduce using rule 51 (location -> identifier .)
    MODULO          reduce using rule 51 (location -> identifier .)
    PLUS            reduce using rule 51 (location -> identifier .)
    MINUS           reduce using rule 51 (location -> identifier .)
    LAND            reduce using rule 51 (location -> identifier .)
    AND             reduce using rule 51 (location -> identifier .)
    OR              reduce using rule 51 (location -> identifier .)
    EQ              reduce using rule 51 (location -> identifier .)
    NE              reduce using rule 51 (location -> identifier .)
    GT              reduce using rule 51 (location -> identifier .)
    GEQ             reduce using rule 51 (location -> identifier .)
    LT              reduce using rule 51 (location -> identifier .)
    LEQ             reduce using rule 51 (location -> identifier .)
    IN              reduce using rule 51 (location -> identifier .)
    COLON           reduce using rule 51 (location -> identifier .)
    RPAREN          reduce using rule 51 (location -> identifier .)
    COMMA           reduce using rule 51 (location -> identifier .)
    LBRACKET        reduce using rule 51 (location -> identifier .)
    THEN            reduce using rule 51 (location -> identifier .)
    RBRACKET        reduce using rule 51 (location -> identifier .)
    DOWN            reduce using rule 51 (location -> identifier .)
    TO              reduce using rule 51 (location -> identifier .)
    BY              reduce using rule 51 (location -> identifier .)
    EQUALS          reduce using rule 51 (location -> identifier .)
    SEMI            reduce using rule 51 (location -> identifier .)
    ELSE            reduce using rule 51 (location -> identifier .)
    ELSIF           reduce using rule 51 (location -> identifier .)
    FI              reduce using rule 51 (location -> identifier .)
    WHILE           reduce using rule 51 (location -> identifier .)
    LPAREN          shift and go to state 86


state 79

    (83) conditional_expression -> IF . boolean_expression then_expression else_expression FI
    (84) conditional_expression -> IF . boolean_expression then_expression elsif_expression else_expression FI
    (85) boolean_expression -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 141
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 115
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 80

    (10) declaration_list -> declaration .

    SEMI            reduce using rule 10 (declaration_list -> declaration .)
    COMMA           reduce using rule 10 (declaration_list -> declaration .)


state 81

    (15) identifier_list -> identifier .

    EQUALS          reduce using rule 15 (identifier_list -> identifier .)
    COMMA           reduce using rule 15 (identifier_list -> identifier .)
    ID              reduce using rule 15 (identifier_list -> identifier .)
    REF             reduce using rule 15 (identifier_list -> identifier .)
    INT             reduce using rule 15 (identifier_list -> identifier .)
    BOOL            reduce using rule 15 (identifier_list -> identifier .)
    CHAR            reduce using rule 15 (identifier_list -> identifier .)
    CHARS           reduce using rule 15 (identifier_list -> identifier .)
    ARRAY           reduce using rule 15 (identifier_list -> identifier .)


state 82

    (9) declaration_statement -> DCL declaration_list . SEMI
    (11) declaration_list -> declaration_list . COMMA declaration

    SEMI            shift and go to state 143
    COMMA           shift and go to state 142


state 83

    (12) declaration -> identifier_list . mode
    (13) declaration -> identifier_list . mode initialization
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET integer_literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    COMMA           shift and go to state 150
    ID              shift and go to state 26
    REF             shift and go to state 148
    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    CHARS           shift and go to state 152
    ARRAY           shift and go to state 154

    identifier                     shift and go to state 161
    array_mode                     shift and go to state 146
    discrete_mode                  shift and go to state 147
    boolean_mode                   shift and go to state 157
    integer_mode                   shift and go to state 145
    discrete_range_mode            shift and go to state 149
    mode                           shift and go to state 151
    composite_mode                 shift and go to state 158
    reference_mode                 shift and go to state 159
    string_mode                    shift and go to state 155
    character_mode                 shift and go to state 153

state 84

    (175) return_action -> RETURN result .

    SEMI            reduce using rule 175 (return_action -> RETURN result .)


state 85

    (188) procedure_statement -> identifier COLON . procedure_definition SEMI
    (123) action_statement -> identifier COLON . action SEMI
    (189) procedure_definition -> . PROC LPAREN RPAREN SEMI statement_list END
    (190) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END
    (191) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMI statement_list END
    (192) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    PROC            shift and go to state 164
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ID              shift and go to state 26
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    array_slice                    shift and go to state 28
    assignment_action              shift and go to state 11
    array_location                 shift and go to state 27
    builtin_call                   shift and go to state 8
    return_action                  shift and go to state 25
    bracketed_action               shift and go to state 33
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    procedure_definition           shift and go to state 162
    action                         shift and go to state 163
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78

state 86

    (168) procedure_call -> identifier LPAREN . RPAREN
    (169) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (170) parameter_list -> . parameter
    (171) parameter_list -> . parameter_list COMMA parameter
    (172) parameter -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    RPAREN          shift and go to state 167
    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_call                   shift and go to state 8
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    builtin_name                   shift and go to state 24
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    parameter_list                 shift and go to state 165
    expression                     shift and go to state 166
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    parameter                      shift and go to state 168
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 87

    (178) builtin_call -> builtin_name LPAREN . RPAREN
    (179) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (170) parameter_list -> . parameter
    (171) parameter_list -> . parameter_list COMMA parameter
    (172) parameter -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    RPAREN          shift and go to state 170
    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    parameter_list                 shift and go to state 169
    expression                     shift and go to state 166
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    builtin_call                   shift and go to state 8
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    parameter                      shift and go to state 168
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 88

    (57) array_element -> array_location LBRACKET . expression_list RBRACKET
    (60) array_slice -> array_location LBRACKET . expression COLON expression RBRACKET
    (58) expression_list -> . expression
    (59) expression_list -> . expression_list COMMA expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    expression_list                shift and go to state 171
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 172
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 89

    (21) synonym_definition -> identifier_list . mode EQUALS constant_expression
    (22) synonym_definition -> identifier_list . EQUALS constant_expression
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET integer_literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    EQUALS          shift and go to state 173
    COMMA           shift and go to state 150
    ID              shift and go to state 26
    REF             shift and go to state 148
    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    CHARS           shift and go to state 152
    ARRAY           shift and go to state 154

    identifier                     shift and go to state 161
    array_mode                     shift and go to state 146
    discrete_mode                  shift and go to state 147
    boolean_mode                   shift and go to state 157
    integer_mode                   shift and go to state 145
    discrete_range_mode            shift and go to state 149
    mode                           shift and go to state 174
    composite_mode                 shift and go to state 158
    reference_mode                 shift and go to state 159
    string_mode                    shift and go to state 155
    character_mode                 shift and go to state 153

state 90

    (19) synonym_list -> synonym_definition .

    SEMI            reduce using rule 19 (synonym_list -> synonym_definition .)
    COMMA           reduce using rule 19 (synonym_list -> synonym_definition .)


state 91

    (18) synonym_statement -> SYN synonym_list . SEMI
    (20) synonym_list -> synonym_list . COMMA synonym_definition

    SEMI            shift and go to state 176
    COMMA           shift and go to state 175


state 92

    (24) newmode_statement -> TYPE newmode_list . SEMI
    (26) newmode_list -> newmode_list . COMMA mode_definition

    SEMI            shift and go to state 178
    COMMA           shift and go to state 177


state 93

    (27) mode_definition -> identifier_list . EQUALS mode
    (16) identifier_list -> identifier_list . COMMA identifier

    EQUALS          shift and go to state 179
    COMMA           shift and go to state 150


state 94

    (25) newmode_list -> mode_definition .

    SEMI            reduce using rule 25 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 25 (newmode_list -> mode_definition .)


state 95

    (150) control_part -> for_control .
    (151) control_part -> for_control . while_control
    (165) while_control -> . WHILE boolean_expression

    SEMI            reduce using rule 150 (control_part -> for_control .)
    WHILE           shift and go to state 101

    while_control                  shift and go to state 180

state 96

    (123) action_statement -> identifier . COLON action SEMI
    (51) location -> identifier .
    (168) procedure_call -> identifier . LPAREN RPAREN
    (169) procedure_call -> identifier . LPAREN parameter_list RPAREN

    COLON           shift and go to state 181
    ARROW           reduce using rule 51 (location -> identifier .)
    EQUALS          reduce using rule 51 (location -> identifier .)
    PLUS            reduce using rule 51 (location -> identifier .)
    MINUS           reduce using rule 51 (location -> identifier .)
    TIMES           reduce using rule 51 (location -> identifier .)
    DIVIDE          reduce using rule 51 (location -> identifier .)
    MODULO          reduce using rule 51 (location -> identifier .)
    LAND            reduce using rule 51 (location -> identifier .)
    LBRACKET        reduce using rule 51 (location -> identifier .)
    LPAREN          shift and go to state 86


state 97

    (153) for_control -> FOR . iteration
    (154) iteration -> . step_enumeration
    (155) iteration -> . range_enumeration
    (156) step_enumeration -> . identifier EQUALS start_value end_value
    (157) step_enumeration -> . identifier EQUALS start_value step_value end_value
    (158) step_enumeration -> . identifier EQUALS start_value DOWN end_value
    (159) step_enumeration -> . identifier EQUALS start_value step_value DOWN end_value
    (163) range_enumeration -> . identifier IN discrete_mode
    (164) range_enumeration -> . identifier DOWN IN discrete_mode
    (17) identifier -> . ID

    ID              shift and go to state 26

    range_enumeration              shift and go to state 183
    iteration                      shift and go to state 184
    step_enumeration               shift and go to state 182
    identifier                     shift and go to state 185

state 98

    (148) do_action -> DO action_statement_list . OD
    (144) action_statement_list -> action_statement_list . action_statement
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (17) identifier -> . ID
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    OD              shift and go to state 187
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    array_slice                    shift and go to state 28
    array_location                 shift and go to state 27
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 186
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 96

state 99

    (152) control_part -> while_control .

    SEMI            reduce using rule 152 (control_part -> while_control .)


state 100

    (143) action_statement_list -> action_statement .

    ID              reduce using rule 143 (action_statement_list -> action_statement .)
    EXIT            reduce using rule 143 (action_statement_list -> action_statement .)
    RETURN          reduce using rule 143 (action_statement_list -> action_statement .)
    RESULT          reduce using rule 143 (action_statement_list -> action_statement .)
    IF              reduce using rule 143 (action_statement_list -> action_statement .)
    DO              reduce using rule 143 (action_statement_list -> action_statement .)
    ABS             reduce using rule 143 (action_statement_list -> action_statement .)
    ASC             reduce using rule 143 (action_statement_list -> action_statement .)
    NUM             reduce using rule 143 (action_statement_list -> action_statement .)
    UPPER           reduce using rule 143 (action_statement_list -> action_statement .)
    LOWER           reduce using rule 143 (action_statement_list -> action_statement .)
    LENGTH          reduce using rule 143 (action_statement_list -> action_statement .)
    READ            reduce using rule 143 (action_statement_list -> action_statement .)
    PRINT           reduce using rule 143 (action_statement_list -> action_statement .)
    FI              reduce using rule 143 (action_statement_list -> action_statement .)
    OD              reduce using rule 143 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 143 (action_statement_list -> action_statement .)
    ELSIF           reduce using rule 143 (action_statement_list -> action_statement .)


state 101

    (165) while_control -> WHILE . boolean_expression
    (85) boolean_expression -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 188
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 115
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 102

    (149) do_action -> DO control_part . SEMI action_statement_list OD

    SEMI            shift and go to state 189


state 103

    (122) action_statement -> action SEMI .

    OD              reduce using rule 122 (action_statement -> action SEMI .)
    ID              reduce using rule 122 (action_statement -> action SEMI .)
    EXIT            reduce using rule 122 (action_statement -> action SEMI .)
    RETURN          reduce using rule 122 (action_statement -> action SEMI .)
    RESULT          reduce using rule 122 (action_statement -> action SEMI .)
    IF              reduce using rule 122 (action_statement -> action SEMI .)
    DO              reduce using rule 122 (action_statement -> action SEMI .)
    ABS             reduce using rule 122 (action_statement -> action SEMI .)
    ASC             reduce using rule 122 (action_statement -> action SEMI .)
    NUM             reduce using rule 122 (action_statement -> action SEMI .)
    UPPER           reduce using rule 122 (action_statement -> action SEMI .)
    LOWER           reduce using rule 122 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 122 (action_statement -> action SEMI .)
    READ            reduce using rule 122 (action_statement -> action SEMI .)
    PRINT           reduce using rule 122 (action_statement -> action SEMI .)
    DCL             reduce using rule 122 (action_statement -> action SEMI .)
    SYN             reduce using rule 122 (action_statement -> action SEMI .)
    TYPE            reduce using rule 122 (action_statement -> action SEMI .)
    $end            reduce using rule 122 (action_statement -> action SEMI .)
    END             reduce using rule 122 (action_statement -> action SEMI .)
    FI              reduce using rule 122 (action_statement -> action SEMI .)
    ELSE            reduce using rule 122 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 122 (action_statement -> action SEMI .)


state 104

    (137) assigning_operator -> DIVIDE . EQUALS

    EQUALS          shift and go to state 190


state 105

    (136) assigning_operator -> TIMES . EQUALS

    EQUALS          shift and go to state 191


state 106

    (134) assigning_operator -> PLUS . EQUALS

    EQUALS          shift and go to state 192


state 107

    (132) assignment_action -> location assigning_operator . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    literal                        shift and go to state 69
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    operand3                       shift and go to state 70
    expression                     shift and go to state 193
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 108

    (139) assigning_operator -> LAND . EQUALS

    EQUALS          shift and go to state 194


state 109

    (135) assigning_operator -> MINUS . EQUALS

    EQUALS          shift and go to state 195


state 110

    (138) assigning_operator -> MODULO . EQUALS

    EQUALS          shift and go to state 196


state 111

    (56) dereferenced_reference -> location ARROW .

    ARROW           reduce using rule 56 (dereferenced_reference -> location ARROW .)
    TIMES           reduce using rule 56 (dereferenced_reference -> location ARROW .)
    DIVIDE          reduce using rule 56 (dereferenced_reference -> location ARROW .)
    MODULO          reduce using rule 56 (dereferenced_reference -> location ARROW .)
    PLUS            reduce using rule 56 (dereferenced_reference -> location ARROW .)
    MINUS           reduce using rule 56 (dereferenced_reference -> location ARROW .)
    LAND            reduce using rule 56 (dereferenced_reference -> location ARROW .)
    AND             reduce using rule 56 (dereferenced_reference -> location ARROW .)
    OR              reduce using rule 56 (dereferenced_reference -> location ARROW .)
    EQ              reduce using rule 56 (dereferenced_reference -> location ARROW .)
    NE              reduce using rule 56 (dereferenced_reference -> location ARROW .)
    GT              reduce using rule 56 (dereferenced_reference -> location ARROW .)
    GEQ             reduce using rule 56 (dereferenced_reference -> location ARROW .)
    LT              reduce using rule 56 (dereferenced_reference -> location ARROW .)
    LEQ             reduce using rule 56 (dereferenced_reference -> location ARROW .)
    IN              reduce using rule 56 (dereferenced_reference -> location ARROW .)
    THEN            reduce using rule 56 (dereferenced_reference -> location ARROW .)
    LBRACKET        reduce using rule 56 (dereferenced_reference -> location ARROW .)
    COLON           reduce using rule 56 (dereferenced_reference -> location ARROW .)
    RPAREN          reduce using rule 56 (dereferenced_reference -> location ARROW .)
    RBRACKET        reduce using rule 56 (dereferenced_reference -> location ARROW .)
    COMMA           reduce using rule 56 (dereferenced_reference -> location ARROW .)
    WHILE           reduce using rule 56 (dereferenced_reference -> location ARROW .)
    SEMI            reduce using rule 56 (dereferenced_reference -> location ARROW .)
    ELSE            reduce using rule 56 (dereferenced_reference -> location ARROW .)
    ELSIF           reduce using rule 56 (dereferenced_reference -> location ARROW .)
    DOWN            reduce using rule 56 (dereferenced_reference -> location ARROW .)
    TO              reduce using rule 56 (dereferenced_reference -> location ARROW .)
    BY              reduce using rule 56 (dereferenced_reference -> location ARROW .)
    FI              reduce using rule 56 (dereferenced_reference -> location ARROW .)
    EQUALS          reduce using rule 56 (dereferenced_reference -> location ARROW .)


state 112

    (133) assigning_operator -> EQUALS .

    IF              reduce using rule 133 (assigning_operator -> EQUALS .)
    MINUS           reduce using rule 133 (assigning_operator -> EQUALS .)
    NOT             reduce using rule 133 (assigning_operator -> EQUALS .)
    ARROW           reduce using rule 133 (assigning_operator -> EQUALS .)
    ID              reduce using rule 133 (assigning_operator -> EQUALS .)
    LPAREN          reduce using rule 133 (assigning_operator -> EQUALS .)
    ICONST          reduce using rule 133 (assigning_operator -> EQUALS .)
    FALSE           reduce using rule 133 (assigning_operator -> EQUALS .)
    TRUE            reduce using rule 133 (assigning_operator -> EQUALS .)
    CCONST          reduce using rule 133 (assigning_operator -> EQUALS .)
    NULL            reduce using rule 133 (assigning_operator -> EQUALS .)
    SCONST          reduce using rule 133 (assigning_operator -> EQUALS .)
    ABS             reduce using rule 133 (assigning_operator -> EQUALS .)
    ASC             reduce using rule 133 (assigning_operator -> EQUALS .)
    NUM             reduce using rule 133 (assigning_operator -> EQUALS .)
    UPPER           reduce using rule 133 (assigning_operator -> EQUALS .)
    LOWER           reduce using rule 133 (assigning_operator -> EQUALS .)
    LENGTH          reduce using rule 133 (assigning_operator -> EQUALS .)
    READ            reduce using rule 133 (assigning_operator -> EQUALS .)
    PRINT           reduce using rule 133 (assigning_operator -> EQUALS .)


state 113

    (173) exit_action -> EXIT identifier .

    SEMI            reduce using rule 173 (exit_action -> EXIT identifier .)


state 114

    (140) if_action -> IF boolean_expression . then_clause FI
    (141) if_action -> IF boolean_expression . then_clause else_clause FI
    (142) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 197

    then_clause                    shift and go to state 198

state 115

    (85) boolean_expression -> expression .

    THEN            reduce using rule 85 (boolean_expression -> expression .)
    SEMI            reduce using rule 85 (boolean_expression -> expression .)


state 116

    (113) arithmetic_multiplicative_operator -> MODULO .

    MINUS           reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    ARROW           reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    ID              reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    LPAREN          reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    ABS             reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    ASC             reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    NUM             reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    UPPER           reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    LOWER           reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    LENGTH          reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    READ            reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)
    PRINT           reduce using rule 113 (arithmetic_multiplicative_operator -> MODULO .)


state 117

    (112) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    LPAREN          reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    ABS             reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASC             reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    NUM             reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    UPPER           reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    LOWER           reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    LENGTH          reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    READ            reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)
    PRINT           reduce using rule 112 (arithmetic_multiplicative_operator -> DIVIDE .)


state 118

    (110) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    dereferenced_reference         shift and go to state 43
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    literal                        shift and go to state 69
    operand3                       shift and go to state 199
    array_primitive_value          shift and go to state 56
    call_action                    shift and go to state 54
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 119

    (111) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    LPAREN          reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    ABS             reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    ASC             reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    NUM             reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    UPPER           reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    LOWER           reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    LENGTH          reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    READ            reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)
    PRINT           reduce using rule 111 (arithmetic_multiplicative_operator -> TIMES .)


state 120

    (99) relational_operator -> GEQ .

    MINUS           reduce using rule 99 (relational_operator -> GEQ .)
    NOT             reduce using rule 99 (relational_operator -> GEQ .)
    ARROW           reduce using rule 99 (relational_operator -> GEQ .)
    ID              reduce using rule 99 (relational_operator -> GEQ .)
    LPAREN          reduce using rule 99 (relational_operator -> GEQ .)
    ICONST          reduce using rule 99 (relational_operator -> GEQ .)
    FALSE           reduce using rule 99 (relational_operator -> GEQ .)
    TRUE            reduce using rule 99 (relational_operator -> GEQ .)
    CCONST          reduce using rule 99 (relational_operator -> GEQ .)
    NULL            reduce using rule 99 (relational_operator -> GEQ .)
    SCONST          reduce using rule 99 (relational_operator -> GEQ .)
    ABS             reduce using rule 99 (relational_operator -> GEQ .)
    ASC             reduce using rule 99 (relational_operator -> GEQ .)
    NUM             reduce using rule 99 (relational_operator -> GEQ .)
    UPPER           reduce using rule 99 (relational_operator -> GEQ .)
    LOWER           reduce using rule 99 (relational_operator -> GEQ .)
    LENGTH          reduce using rule 99 (relational_operator -> GEQ .)
    READ            reduce using rule 99 (relational_operator -> GEQ .)
    PRINT           reduce using rule 99 (relational_operator -> GEQ .)


state 121

    (92) operator1 -> relational_operator .

    MINUS           reduce using rule 92 (operator1 -> relational_operator .)
    NOT             reduce using rule 92 (operator1 -> relational_operator .)
    ARROW           reduce using rule 92 (operator1 -> relational_operator .)
    ID              reduce using rule 92 (operator1 -> relational_operator .)
    LPAREN          reduce using rule 92 (operator1 -> relational_operator .)
    ICONST          reduce using rule 92 (operator1 -> relational_operator .)
    FALSE           reduce using rule 92 (operator1 -> relational_operator .)
    TRUE            reduce using rule 92 (operator1 -> relational_operator .)
    CCONST          reduce using rule 92 (operator1 -> relational_operator .)
    NULL            reduce using rule 92 (operator1 -> relational_operator .)
    SCONST          reduce using rule 92 (operator1 -> relational_operator .)
    ABS             reduce using rule 92 (operator1 -> relational_operator .)
    ASC             reduce using rule 92 (operator1 -> relational_operator .)
    NUM             reduce using rule 92 (operator1 -> relational_operator .)
    UPPER           reduce using rule 92 (operator1 -> relational_operator .)
    LOWER           reduce using rule 92 (operator1 -> relational_operator .)
    LENGTH          reduce using rule 92 (operator1 -> relational_operator .)
    READ            reduce using rule 92 (operator1 -> relational_operator .)
    PRINT           reduce using rule 92 (operator1 -> relational_operator .)


state 122

    (94) relational_operator -> AND .

    MINUS           reduce using rule 94 (relational_operator -> AND .)
    NOT             reduce using rule 94 (relational_operator -> AND .)
    ARROW           reduce using rule 94 (relational_operator -> AND .)
    ID              reduce using rule 94 (relational_operator -> AND .)
    LPAREN          reduce using rule 94 (relational_operator -> AND .)
    ICONST          reduce using rule 94 (relational_operator -> AND .)
    FALSE           reduce using rule 94 (relational_operator -> AND .)
    TRUE            reduce using rule 94 (relational_operator -> AND .)
    CCONST          reduce using rule 94 (relational_operator -> AND .)
    NULL            reduce using rule 94 (relational_operator -> AND .)
    SCONST          reduce using rule 94 (relational_operator -> AND .)
    ABS             reduce using rule 94 (relational_operator -> AND .)
    ASC             reduce using rule 94 (relational_operator -> AND .)
    NUM             reduce using rule 94 (relational_operator -> AND .)
    UPPER           reduce using rule 94 (relational_operator -> AND .)
    LOWER           reduce using rule 94 (relational_operator -> AND .)
    LENGTH          reduce using rule 94 (relational_operator -> AND .)
    READ            reduce using rule 94 (relational_operator -> AND .)
    PRINT           reduce using rule 94 (relational_operator -> AND .)


state 123

    (101) relational_operator -> LEQ .

    MINUS           reduce using rule 101 (relational_operator -> LEQ .)
    NOT             reduce using rule 101 (relational_operator -> LEQ .)
    ARROW           reduce using rule 101 (relational_operator -> LEQ .)
    ID              reduce using rule 101 (relational_operator -> LEQ .)
    LPAREN          reduce using rule 101 (relational_operator -> LEQ .)
    ICONST          reduce using rule 101 (relational_operator -> LEQ .)
    FALSE           reduce using rule 101 (relational_operator -> LEQ .)
    TRUE            reduce using rule 101 (relational_operator -> LEQ .)
    CCONST          reduce using rule 101 (relational_operator -> LEQ .)
    NULL            reduce using rule 101 (relational_operator -> LEQ .)
    SCONST          reduce using rule 101 (relational_operator -> LEQ .)
    ABS             reduce using rule 101 (relational_operator -> LEQ .)
    ASC             reduce using rule 101 (relational_operator -> LEQ .)
    NUM             reduce using rule 101 (relational_operator -> LEQ .)
    UPPER           reduce using rule 101 (relational_operator -> LEQ .)
    LOWER           reduce using rule 101 (relational_operator -> LEQ .)
    LENGTH          reduce using rule 101 (relational_operator -> LEQ .)
    READ            reduce using rule 101 (relational_operator -> LEQ .)
    PRINT           reduce using rule 101 (relational_operator -> LEQ .)


state 124

    (96) relational_operator -> EQ .

    MINUS           reduce using rule 96 (relational_operator -> EQ .)
    NOT             reduce using rule 96 (relational_operator -> EQ .)
    ARROW           reduce using rule 96 (relational_operator -> EQ .)
    ID              reduce using rule 96 (relational_operator -> EQ .)
    LPAREN          reduce using rule 96 (relational_operator -> EQ .)
    ICONST          reduce using rule 96 (relational_operator -> EQ .)
    FALSE           reduce using rule 96 (relational_operator -> EQ .)
    TRUE            reduce using rule 96 (relational_operator -> EQ .)
    CCONST          reduce using rule 96 (relational_operator -> EQ .)
    NULL            reduce using rule 96 (relational_operator -> EQ .)
    SCONST          reduce using rule 96 (relational_operator -> EQ .)
    ABS             reduce using rule 96 (relational_operator -> EQ .)
    ASC             reduce using rule 96 (relational_operator -> EQ .)
    NUM             reduce using rule 96 (relational_operator -> EQ .)
    UPPER           reduce using rule 96 (relational_operator -> EQ .)
    LOWER           reduce using rule 96 (relational_operator -> EQ .)
    LENGTH          reduce using rule 96 (relational_operator -> EQ .)
    READ            reduce using rule 96 (relational_operator -> EQ .)
    PRINT           reduce using rule 96 (relational_operator -> EQ .)


state 125

    (93) operator1 -> membership_operator .

    MINUS           reduce using rule 93 (operator1 -> membership_operator .)
    NOT             reduce using rule 93 (operator1 -> membership_operator .)
    ARROW           reduce using rule 93 (operator1 -> membership_operator .)
    ID              reduce using rule 93 (operator1 -> membership_operator .)
    LPAREN          reduce using rule 93 (operator1 -> membership_operator .)
    ICONST          reduce using rule 93 (operator1 -> membership_operator .)
    FALSE           reduce using rule 93 (operator1 -> membership_operator .)
    TRUE            reduce using rule 93 (operator1 -> membership_operator .)
    CCONST          reduce using rule 93 (operator1 -> membership_operator .)
    NULL            reduce using rule 93 (operator1 -> membership_operator .)
    SCONST          reduce using rule 93 (operator1 -> membership_operator .)
    ABS             reduce using rule 93 (operator1 -> membership_operator .)
    ASC             reduce using rule 93 (operator1 -> membership_operator .)
    NUM             reduce using rule 93 (operator1 -> membership_operator .)
    UPPER           reduce using rule 93 (operator1 -> membership_operator .)
    LOWER           reduce using rule 93 (operator1 -> membership_operator .)
    LENGTH          reduce using rule 93 (operator1 -> membership_operator .)
    READ            reduce using rule 93 (operator1 -> membership_operator .)
    PRINT           reduce using rule 93 (operator1 -> membership_operator .)


state 126

    (102) membership_operator -> IN .

    MINUS           reduce using rule 102 (membership_operator -> IN .)
    NOT             reduce using rule 102 (membership_operator -> IN .)
    ARROW           reduce using rule 102 (membership_operator -> IN .)
    ID              reduce using rule 102 (membership_operator -> IN .)
    LPAREN          reduce using rule 102 (membership_operator -> IN .)
    ICONST          reduce using rule 102 (membership_operator -> IN .)
    FALSE           reduce using rule 102 (membership_operator -> IN .)
    TRUE            reduce using rule 102 (membership_operator -> IN .)
    CCONST          reduce using rule 102 (membership_operator -> IN .)
    NULL            reduce using rule 102 (membership_operator -> IN .)
    SCONST          reduce using rule 102 (membership_operator -> IN .)
    ABS             reduce using rule 102 (membership_operator -> IN .)
    ASC             reduce using rule 102 (membership_operator -> IN .)
    NUM             reduce using rule 102 (membership_operator -> IN .)
    UPPER           reduce using rule 102 (membership_operator -> IN .)
    LOWER           reduce using rule 102 (membership_operator -> IN .)
    LENGTH          reduce using rule 102 (membership_operator -> IN .)
    READ            reduce using rule 102 (membership_operator -> IN .)
    PRINT           reduce using rule 102 (membership_operator -> IN .)


state 127

    (97) relational_operator -> NE .

    MINUS           reduce using rule 97 (relational_operator -> NE .)
    NOT             reduce using rule 97 (relational_operator -> NE .)
    ARROW           reduce using rule 97 (relational_operator -> NE .)
    ID              reduce using rule 97 (relational_operator -> NE .)
    LPAREN          reduce using rule 97 (relational_operator -> NE .)
    ICONST          reduce using rule 97 (relational_operator -> NE .)
    FALSE           reduce using rule 97 (relational_operator -> NE .)
    TRUE            reduce using rule 97 (relational_operator -> NE .)
    CCONST          reduce using rule 97 (relational_operator -> NE .)
    NULL            reduce using rule 97 (relational_operator -> NE .)
    SCONST          reduce using rule 97 (relational_operator -> NE .)
    ABS             reduce using rule 97 (relational_operator -> NE .)
    ASC             reduce using rule 97 (relational_operator -> NE .)
    NUM             reduce using rule 97 (relational_operator -> NE .)
    UPPER           reduce using rule 97 (relational_operator -> NE .)
    LOWER           reduce using rule 97 (relational_operator -> NE .)
    LENGTH          reduce using rule 97 (relational_operator -> NE .)
    READ            reduce using rule 97 (relational_operator -> NE .)
    PRINT           reduce using rule 97 (relational_operator -> NE .)


state 128

    (98) relational_operator -> GT .

    MINUS           reduce using rule 98 (relational_operator -> GT .)
    NOT             reduce using rule 98 (relational_operator -> GT .)
    ARROW           reduce using rule 98 (relational_operator -> GT .)
    ID              reduce using rule 98 (relational_operator -> GT .)
    LPAREN          reduce using rule 98 (relational_operator -> GT .)
    ICONST          reduce using rule 98 (relational_operator -> GT .)
    FALSE           reduce using rule 98 (relational_operator -> GT .)
    TRUE            reduce using rule 98 (relational_operator -> GT .)
    CCONST          reduce using rule 98 (relational_operator -> GT .)
    NULL            reduce using rule 98 (relational_operator -> GT .)
    SCONST          reduce using rule 98 (relational_operator -> GT .)
    ABS             reduce using rule 98 (relational_operator -> GT .)
    ASC             reduce using rule 98 (relational_operator -> GT .)
    NUM             reduce using rule 98 (relational_operator -> GT .)
    UPPER           reduce using rule 98 (relational_operator -> GT .)
    LOWER           reduce using rule 98 (relational_operator -> GT .)
    LENGTH          reduce using rule 98 (relational_operator -> GT .)
    READ            reduce using rule 98 (relational_operator -> GT .)
    PRINT           reduce using rule 98 (relational_operator -> GT .)


state 129

    (100) relational_operator -> LT .

    MINUS           reduce using rule 100 (relational_operator -> LT .)
    NOT             reduce using rule 100 (relational_operator -> LT .)
    ARROW           reduce using rule 100 (relational_operator -> LT .)
    ID              reduce using rule 100 (relational_operator -> LT .)
    LPAREN          reduce using rule 100 (relational_operator -> LT .)
    ICONST          reduce using rule 100 (relational_operator -> LT .)
    FALSE           reduce using rule 100 (relational_operator -> LT .)
    TRUE            reduce using rule 100 (relational_operator -> LT .)
    CCONST          reduce using rule 100 (relational_operator -> LT .)
    NULL            reduce using rule 100 (relational_operator -> LT .)
    SCONST          reduce using rule 100 (relational_operator -> LT .)
    ABS             reduce using rule 100 (relational_operator -> LT .)
    ASC             reduce using rule 100 (relational_operator -> LT .)
    NUM             reduce using rule 100 (relational_operator -> LT .)
    UPPER           reduce using rule 100 (relational_operator -> LT .)
    LOWER           reduce using rule 100 (relational_operator -> LT .)
    LENGTH          reduce using rule 100 (relational_operator -> LT .)
    READ            reduce using rule 100 (relational_operator -> LT .)
    PRINT           reduce using rule 100 (relational_operator -> LT .)


state 130

    (95) relational_operator -> OR .

    MINUS           reduce using rule 95 (relational_operator -> OR .)
    NOT             reduce using rule 95 (relational_operator -> OR .)
    ARROW           reduce using rule 95 (relational_operator -> OR .)
    ID              reduce using rule 95 (relational_operator -> OR .)
    LPAREN          reduce using rule 95 (relational_operator -> OR .)
    ICONST          reduce using rule 95 (relational_operator -> OR .)
    FALSE           reduce using rule 95 (relational_operator -> OR .)
    TRUE            reduce using rule 95 (relational_operator -> OR .)
    CCONST          reduce using rule 95 (relational_operator -> OR .)
    NULL            reduce using rule 95 (relational_operator -> OR .)
    SCONST          reduce using rule 95 (relational_operator -> OR .)
    ABS             reduce using rule 95 (relational_operator -> OR .)
    ASC             reduce using rule 95 (relational_operator -> OR .)
    NUM             reduce using rule 95 (relational_operator -> OR .)
    UPPER           reduce using rule 95 (relational_operator -> OR .)
    LOWER           reduce using rule 95 (relational_operator -> OR .)
    LENGTH          reduce using rule 95 (relational_operator -> OR .)
    READ            reduce using rule 95 (relational_operator -> OR .)
    PRINT           reduce using rule 95 (relational_operator -> OR .)


state 131

    (91) operand0 -> operand0 operator1 . operand1
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    operand3                       shift and go to state 70
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 200
    literal                        shift and go to state 69
    array_element                  shift and go to state 13
    call_action                    shift and go to state 54
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 132

    (77) value_array_element -> array_primitive_value LBRACKET . expression_list RBRACKET
    (78) value_array_slice -> array_primitive_value LBRACKET . expression COLON expression RBRACKET
    (58) expression_list -> . expression
    (59) expression_list -> . expression_list COMMA expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_call                   shift and go to state 8
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    expression_list                shift and go to state 201
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    builtin_name                   shift and go to state 24
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 202
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    array_primitive_value          shift and go to state 56
    boolean_literal                shift and go to state 77
    location                       shift and go to state 76
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 133

    (121) referenced_location -> ARROW location .
    (56) dereferenced_reference -> location . ARROW
    (61) array_location -> location .

    TIMES           reduce using rule 121 (referenced_location -> ARROW location .)
    DIVIDE          reduce using rule 121 (referenced_location -> ARROW location .)
    MODULO          reduce using rule 121 (referenced_location -> ARROW location .)
    PLUS            reduce using rule 121 (referenced_location -> ARROW location .)
    MINUS           reduce using rule 121 (referenced_location -> ARROW location .)
    LAND            reduce using rule 121 (referenced_location -> ARROW location .)
    AND             reduce using rule 121 (referenced_location -> ARROW location .)
    OR              reduce using rule 121 (referenced_location -> ARROW location .)
    EQ              reduce using rule 121 (referenced_location -> ARROW location .)
    NE              reduce using rule 121 (referenced_location -> ARROW location .)
    GT              reduce using rule 121 (referenced_location -> ARROW location .)
    GEQ             reduce using rule 121 (referenced_location -> ARROW location .)
    LT              reduce using rule 121 (referenced_location -> ARROW location .)
    LEQ             reduce using rule 121 (referenced_location -> ARROW location .)
    IN              reduce using rule 121 (referenced_location -> ARROW location .)
    RPAREN          reduce using rule 121 (referenced_location -> ARROW location .)
    COMMA           reduce using rule 121 (referenced_location -> ARROW location .)
    SEMI            reduce using rule 121 (referenced_location -> ARROW location .)
    THEN            reduce using rule 121 (referenced_location -> ARROW location .)
    COLON           reduce using rule 121 (referenced_location -> ARROW location .)
    RBRACKET        reduce using rule 121 (referenced_location -> ARROW location .)
    ELSE            reduce using rule 121 (referenced_location -> ARROW location .)
    ELSIF           reduce using rule 121 (referenced_location -> ARROW location .)
    DOWN            reduce using rule 121 (referenced_location -> ARROW location .)
    TO              reduce using rule 121 (referenced_location -> ARROW location .)
    BY              reduce using rule 121 (referenced_location -> ARROW location .)
    FI              reduce using rule 121 (referenced_location -> ARROW location .)
    WHILE           reduce using rule 121 (referenced_location -> ARROW location .)
    ARROW           shift and go to state 111
    LBRACKET        reduce using rule 61 (array_location -> location .)


state 134

    (106) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    LPAREN          reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    ABS             reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    ASC             reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    NUM             reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    UPPER           reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    LOWER           reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    LENGTH          reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    READ            reduce using rule 106 (arithmetic_additive_operator -> PLUS .)
    PRINT           reduce using rule 106 (arithmetic_additive_operator -> PLUS .)


state 135

    (105) operand1 -> operand1 string_concatenation_operator . operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 203
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    call_action                    shift and go to state 54
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 136

    (108) string_concatenation_operator -> LAND .

    MINUS           reduce using rule 108 (string_concatenation_operator -> LAND .)
    NOT             reduce using rule 108 (string_concatenation_operator -> LAND .)
    ARROW           reduce using rule 108 (string_concatenation_operator -> LAND .)
    ID              reduce using rule 108 (string_concatenation_operator -> LAND .)
    LPAREN          reduce using rule 108 (string_concatenation_operator -> LAND .)
    ICONST          reduce using rule 108 (string_concatenation_operator -> LAND .)
    FALSE           reduce using rule 108 (string_concatenation_operator -> LAND .)
    TRUE            reduce using rule 108 (string_concatenation_operator -> LAND .)
    CCONST          reduce using rule 108 (string_concatenation_operator -> LAND .)
    NULL            reduce using rule 108 (string_concatenation_operator -> LAND .)
    SCONST          reduce using rule 108 (string_concatenation_operator -> LAND .)
    ABS             reduce using rule 108 (string_concatenation_operator -> LAND .)
    ASC             reduce using rule 108 (string_concatenation_operator -> LAND .)
    NUM             reduce using rule 108 (string_concatenation_operator -> LAND .)
    UPPER           reduce using rule 108 (string_concatenation_operator -> LAND .)
    LOWER           reduce using rule 108 (string_concatenation_operator -> LAND .)
    LENGTH          reduce using rule 108 (string_concatenation_operator -> LAND .)
    READ            reduce using rule 108 (string_concatenation_operator -> LAND .)
    PRINT           reduce using rule 108 (string_concatenation_operator -> LAND .)


state 137

    (107) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    LPAREN          reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    ABS             reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    ASC             reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    NUM             reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    UPPER           reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    LOWER           reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    LENGTH          reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    READ            reduce using rule 107 (arithmetic_additive_operator -> MINUS .)
    PRINT           reduce using rule 107 (arithmetic_additive_operator -> MINUS .)


state 138

    (104) operand1 -> operand1 arithmetic_additive_operator . operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    dereferenced_reference         shift and go to state 43
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 204
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    array_primitive_value          shift and go to state 56
    call_action                    shift and go to state 54
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 139

    (115) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    LAND            reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    EQ              reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    NE              reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    GT              reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    GEQ             reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    LT              reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    LEQ             reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 115 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 115 (operand3 -> monadic_operator operand4 .)


state 140

    (80) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 205


state 141

    (83) conditional_expression -> IF boolean_expression . then_expression else_expression FI
    (84) conditional_expression -> IF boolean_expression . then_expression elsif_expression else_expression FI
    (86) then_expression -> . THEN expression

    THEN            shift and go to state 206

    then_expression                shift and go to state 207

state 142

    (11) declaration_list -> declaration_list COMMA . declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 26

    declaration                    shift and go to state 208
    identifier                     shift and go to state 81
    identifier_list                shift and go to state 83

state 143

    (9) declaration_statement -> DCL declaration_list SEMI .

    END             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ABS             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ASC             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)


state 144

    (38) character_mode -> CHAR .

    LPAREN          reduce using rule 38 (character_mode -> CHAR .)
    SEMI            reduce using rule 38 (character_mode -> CHAR .)
    COMMA           reduce using rule 38 (character_mode -> CHAR .)
    WHILE           reduce using rule 38 (character_mode -> CHAR .)
    LOC             reduce using rule 38 (character_mode -> CHAR .)
    RPAREN          reduce using rule 38 (character_mode -> CHAR .)
    EQUALS          reduce using rule 38 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 38 (character_mode -> CHAR .)


state 145

    (32) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    EQUALS          reduce using rule 32 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 32 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 32 (discrete_mode -> integer_mode .)
    WHILE           reduce using rule 32 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 32 (discrete_mode -> integer_mode .)


state 146

    (44) composite_mode -> array_mode .

    RPAREN          reduce using rule 44 (composite_mode -> array_mode .)
    LOC             reduce using rule 44 (composite_mode -> array_mode .)
    EQUALS          reduce using rule 44 (composite_mode -> array_mode .)
    SEMI            reduce using rule 44 (composite_mode -> array_mode .)
    COMMA           reduce using rule 44 (composite_mode -> array_mode .)


state 147

    (29) mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    EQUALS          reduce using rule 29 (mode -> discrete_mode .)
    SEMI            reduce using rule 29 (mode -> discrete_mode .)
    COMMA           reduce using rule 29 (mode -> discrete_mode .)
    LOC             reduce using rule 29 (mode -> discrete_mode .)
    RPAREN          reduce using rule 29 (mode -> discrete_mode .)
    LPAREN          shift and go to state 209


state 148

    (42) reference_mode -> REF . mode
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET integer_literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    ID              shift and go to state 26
    REF             shift and go to state 148
    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    CHARS           shift and go to state 152
    ARRAY           shift and go to state 154

    array_mode                     shift and go to state 146
    discrete_mode                  shift and go to state 147
    boolean_mode                   shift and go to state 157
    integer_mode                   shift and go to state 145
    discrete_range_mode            shift and go to state 149
    mode                           shift and go to state 210
    composite_mode                 shift and go to state 158
    identifier                     shift and go to state 161
    reference_mode                 shift and go to state 159
    string_mode                    shift and go to state 155
    character_mode                 shift and go to state 153

state 149

    (35) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    EQUALS          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 35 (discrete_mode -> discrete_range_mode .)


state 150

    (16) identifier_list -> identifier_list COMMA . identifier
    (17) identifier -> . ID

    ID              shift and go to state 26

    identifier                     shift and go to state 211

state 151

    (12) declaration -> identifier_list mode .
    (13) declaration -> identifier_list mode . initialization
    (14) initialization -> . EQUALS expression

    SEMI            reduce using rule 12 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 12 (declaration -> identifier_list mode .)
    EQUALS          shift and go to state 213

    initialization                 shift and go to state 212

state 152

    (45) string_mode -> CHARS . LBRACKET integer_literal RBRACKET

    LBRACKET        shift and go to state 214


state 153

    (34) discrete_mode -> character_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    EQUALS          reduce using rule 34 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 34 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    LOC             reduce using rule 34 (discrete_mode -> character_mode .)
    WHILE           reduce using rule 34 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 34 (discrete_mode -> character_mode .)


state 154

    (46) array_mode -> ARRAY . LBRACKET list_index_mode RBRACKET mode

    LBRACKET        shift and go to state 215


state 155

    (43) composite_mode -> string_mode .

    RPAREN          reduce using rule 43 (composite_mode -> string_mode .)
    LOC             reduce using rule 43 (composite_mode -> string_mode .)
    EQUALS          reduce using rule 43 (composite_mode -> string_mode .)
    SEMI            reduce using rule 43 (composite_mode -> string_mode .)
    COMMA           reduce using rule 43 (composite_mode -> string_mode .)


state 156

    (36) integer_mode -> INT .

    LPAREN          reduce using rule 36 (integer_mode -> INT .)
    RBRACKET        reduce using rule 36 (integer_mode -> INT .)
    COMMA           reduce using rule 36 (integer_mode -> INT .)
    EQUALS          reduce using rule 36 (integer_mode -> INT .)
    RPAREN          reduce using rule 36 (integer_mode -> INT .)
    LOC             reduce using rule 36 (integer_mode -> INT .)
    SEMI            reduce using rule 36 (integer_mode -> INT .)
    WHILE           reduce using rule 36 (integer_mode -> INT .)


state 157

    (33) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    EQUALS          reduce using rule 33 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 33 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 33 (discrete_mode -> boolean_mode .)
    WHILE           reduce using rule 33 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 33 (discrete_mode -> boolean_mode .)


state 158

    (31) mode -> composite_mode .

    EQUALS          reduce using rule 31 (mode -> composite_mode .)
    SEMI            reduce using rule 31 (mode -> composite_mode .)
    COMMA           reduce using rule 31 (mode -> composite_mode .)
    LOC             reduce using rule 31 (mode -> composite_mode .)
    RPAREN          reduce using rule 31 (mode -> composite_mode .)


state 159

    (30) mode -> reference_mode .

    EQUALS          reduce using rule 30 (mode -> reference_mode .)
    SEMI            reduce using rule 30 (mode -> reference_mode .)
    COMMA           reduce using rule 30 (mode -> reference_mode .)
    LOC             reduce using rule 30 (mode -> reference_mode .)
    RPAREN          reduce using rule 30 (mode -> reference_mode .)


state 160

    (37) boolean_mode -> BOOL .

    LPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    WHILE           reduce using rule 37 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 37 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 37 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 37 (boolean_mode -> BOOL .)
    EQUALS          reduce using rule 37 (boolean_mode -> BOOL .)
    LOC             reduce using rule 37 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 37 (boolean_mode -> BOOL .)


state 161

    (28) mode -> identifier .
    (39) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    EQUALS          reduce using rule 28 (mode -> identifier .)
    SEMI            reduce using rule 28 (mode -> identifier .)
    COMMA           reduce using rule 28 (mode -> identifier .)
    LOC             reduce using rule 28 (mode -> identifier .)
    RPAREN          reduce using rule 28 (mode -> identifier .)
    LPAREN          shift and go to state 216


state 162

    (188) procedure_statement -> identifier COLON procedure_definition . SEMI

    SEMI            shift and go to state 217


state 163

    (123) action_statement -> identifier COLON action . SEMI

    SEMI            shift and go to state 218


state 164

    (189) procedure_definition -> PROC . LPAREN RPAREN SEMI statement_list END
    (190) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMI statement_list END
    (191) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMI statement_list END
    (192) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END

    LPAREN          shift and go to state 219


state 165

    (169) procedure_call -> identifier LPAREN parameter_list . RPAREN
    (171) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 221
    COMMA           shift and go to state 220


state 166

    (172) parameter -> expression .

    RPAREN          reduce using rule 172 (parameter -> expression .)
    COMMA           reduce using rule 172 (parameter -> expression .)


state 167

    (168) procedure_call -> identifier LPAREN RPAREN .

    ARROW           reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    TIMES           reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    DIVIDE          reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    MODULO          reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    PLUS            reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    MINUS           reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    LAND            reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    AND             reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    OR              reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    EQ              reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    NE              reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    GT              reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    GEQ             reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    LT              reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    LEQ             reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    IN              reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    THEN            reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    LBRACKET        reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    SEMI            reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    EQUALS          reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    RBRACKET        reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    RPAREN          reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    COMMA           reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    COLON           reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    ELSE            reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    ELSIF           reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    DOWN            reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    TO              reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    BY              reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    FI              reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)
    WHILE           reduce using rule 168 (procedure_call -> identifier LPAREN RPAREN .)


state 168

    (170) parameter_list -> parameter .

    RPAREN          reduce using rule 170 (parameter_list -> parameter .)
    COMMA           reduce using rule 170 (parameter_list -> parameter .)


state 169

    (179) builtin_call -> builtin_name LPAREN parameter_list . RPAREN
    (171) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 222
    COMMA           shift and go to state 220


state 170

    (178) builtin_call -> builtin_name LPAREN RPAREN .

    ARROW           reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    MODULO          reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    LAND            reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQ              reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    NE              reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    GT              reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    GEQ             reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    LT              reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    LEQ             reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    SEMI            reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQUALS          reduce using rule 178 (builtin_call -> builtin_name LPAREN RPAREN .)


state 171

    (57) array_element -> array_location LBRACKET expression_list . RBRACKET
    (59) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 224
    COMMA           shift and go to state 223


state 172

    (60) array_slice -> array_location LBRACKET expression . COLON expression RBRACKET
    (58) expression_list -> expression .

    COLON           shift and go to state 225
    RBRACKET        reduce using rule 58 (expression_list -> expression .)
    COMMA           reduce using rule 58 (expression_list -> expression .)


state 173

    (22) synonym_definition -> identifier_list EQUALS . constant_expression
    (23) constant_expression -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_call                   shift and go to state 8
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    location                       shift and go to state 76
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    builtin_name                   shift and go to state 24
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 227
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    constant_expression            shift and go to state 226
    boolean_literal                shift and go to state 77
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 174

    (21) synonym_definition -> identifier_list mode . EQUALS constant_expression

    EQUALS          shift and go to state 228


state 175

    (20) synonym_list -> synonym_list COMMA . synonym_definition
    (21) synonym_definition -> . identifier_list mode EQUALS constant_expression
    (22) synonym_definition -> . identifier_list EQUALS constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 26

    identifier_list                shift and go to state 89
    synonym_definition             shift and go to state 229
    identifier                     shift and go to state 81

state 176

    (18) synonym_statement -> SYN synonym_list SEMI .

    END             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    DCL             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ABS             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ASC             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)


state 177

    (26) newmode_list -> newmode_list COMMA . mode_definition
    (27) mode_definition -> . identifier_list EQUALS mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 26

    identifier_list                shift and go to state 93
    mode_definition                shift and go to state 230
    identifier                     shift and go to state 81

state 178

    (24) newmode_statement -> TYPE newmode_list SEMI .

    END             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DCL             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ABS             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ASC             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)


state 179

    (27) mode_definition -> identifier_list EQUALS . mode
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET integer_literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    ID              shift and go to state 26
    REF             shift and go to state 148
    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    CHARS           shift and go to state 152
    ARRAY           shift and go to state 154

    array_mode                     shift and go to state 146
    discrete_mode                  shift and go to state 147
    boolean_mode                   shift and go to state 157
    integer_mode                   shift and go to state 145
    discrete_range_mode            shift and go to state 149
    mode                           shift and go to state 231
    composite_mode                 shift and go to state 158
    identifier                     shift and go to state 161
    reference_mode                 shift and go to state 159
    string_mode                    shift and go to state 155
    character_mode                 shift and go to state 153

state 180

    (151) control_part -> for_control while_control .

    SEMI            reduce using rule 151 (control_part -> for_control while_control .)


state 181

    (123) action_statement -> identifier COLON . action SEMI
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ID              shift and go to state 26
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    assignment_action              shift and go to state 11
    array_location                 shift and go to state 27
    builtin_call                   shift and go to state 8
    array_slice                    shift and go to state 28
    return_action                  shift and go to state 25
    bracketed_action               shift and go to state 33
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    action                         shift and go to state 163
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78

state 182

    (154) iteration -> step_enumeration .

    WHILE           reduce using rule 154 (iteration -> step_enumeration .)
    SEMI            reduce using rule 154 (iteration -> step_enumeration .)


state 183

    (155) iteration -> range_enumeration .

    WHILE           reduce using rule 155 (iteration -> range_enumeration .)
    SEMI            reduce using rule 155 (iteration -> range_enumeration .)


state 184

    (153) for_control -> FOR iteration .

    WHILE           reduce using rule 153 (for_control -> FOR iteration .)
    SEMI            reduce using rule 153 (for_control -> FOR iteration .)


state 185

    (156) step_enumeration -> identifier . EQUALS start_value end_value
    (157) step_enumeration -> identifier . EQUALS start_value step_value end_value
    (158) step_enumeration -> identifier . EQUALS start_value DOWN end_value
    (159) step_enumeration -> identifier . EQUALS start_value step_value DOWN end_value
    (163) range_enumeration -> identifier . IN discrete_mode
    (164) range_enumeration -> identifier . DOWN IN discrete_mode

    EQUALS          shift and go to state 234
    IN              shift and go to state 232
    DOWN            shift and go to state 233


state 186

    (144) action_statement_list -> action_statement_list action_statement .

    ID              reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    EXIT            reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    RETURN          reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    RESULT          reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    IF              reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    DO              reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    ABS             reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    ASC             reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    NUM             reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    UPPER           reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    LOWER           reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    LENGTH          reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    READ            reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    PRINT           reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    FI              reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    OD              reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    ELSE            reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)
    ELSIF           reduce using rule 144 (action_statement_list -> action_statement_list action_statement .)


state 187

    (148) do_action -> DO action_statement_list OD .

    SEMI            reduce using rule 148 (do_action -> DO action_statement_list OD .)


state 188

    (165) while_control -> WHILE boolean_expression .

    SEMI            reduce using rule 165 (while_control -> WHILE boolean_expression .)


state 189

    (149) do_action -> DO control_part SEMI . action_statement_list OD
    (143) action_statement_list -> . action_statement
    (144) action_statement_list -> . action_statement_list action_statement
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (17) identifier -> . ID
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    assignment_action              shift and go to state 11
    action_statement_list          shift and go to state 235
    array_location                 shift and go to state 27
    builtin_call                   shift and go to state 8
    array_slice                    shift and go to state 28
    return_action                  shift and go to state 25
    action_statement               shift and go to state 100
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 33
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 96

state 190

    (137) assigning_operator -> DIVIDE EQUALS .

    IF              reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    MINUS           reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    NOT             reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    ARROW           reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    ID              reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    LPAREN          reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    ICONST          reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    FALSE           reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    TRUE            reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    CCONST          reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    NULL            reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    SCONST          reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    ABS             reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    ASC             reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    NUM             reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    UPPER           reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    LOWER           reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    LENGTH          reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    READ            reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)
    PRINT           reduce using rule 137 (assigning_operator -> DIVIDE EQUALS .)


state 191

    (136) assigning_operator -> TIMES EQUALS .

    IF              reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    MINUS           reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    NOT             reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    ARROW           reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    ID              reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    LPAREN          reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    ICONST          reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    FALSE           reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    TRUE            reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    CCONST          reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    NULL            reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    SCONST          reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    ABS             reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    ASC             reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    NUM             reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    UPPER           reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    LOWER           reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    LENGTH          reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    READ            reduce using rule 136 (assigning_operator -> TIMES EQUALS .)
    PRINT           reduce using rule 136 (assigning_operator -> TIMES EQUALS .)


state 192

    (134) assigning_operator -> PLUS EQUALS .

    IF              reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    MINUS           reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    NOT             reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    ARROW           reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    ID              reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    LPAREN          reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    ICONST          reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    FALSE           reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    TRUE            reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    CCONST          reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    NULL            reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    SCONST          reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    ABS             reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    ASC             reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    NUM             reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    UPPER           reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    LOWER           reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    LENGTH          reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    READ            reduce using rule 134 (assigning_operator -> PLUS EQUALS .)
    PRINT           reduce using rule 134 (assigning_operator -> PLUS EQUALS .)


state 193

    (132) assignment_action -> location assigning_operator expression .

    SEMI            reduce using rule 132 (assignment_action -> location assigning_operator expression .)


state 194

    (139) assigning_operator -> LAND EQUALS .

    IF              reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    MINUS           reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    NOT             reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    ARROW           reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    ID              reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    LPAREN          reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    ICONST          reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    FALSE           reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    TRUE            reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    CCONST          reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    NULL            reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    SCONST          reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    ABS             reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    ASC             reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    NUM             reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    UPPER           reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    LOWER           reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    LENGTH          reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    READ            reduce using rule 139 (assigning_operator -> LAND EQUALS .)
    PRINT           reduce using rule 139 (assigning_operator -> LAND EQUALS .)


state 195

    (135) assigning_operator -> MINUS EQUALS .

    IF              reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    MINUS           reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    NOT             reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    ARROW           reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    ID              reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    LPAREN          reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    ICONST          reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    FALSE           reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    TRUE            reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    CCONST          reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    NULL            reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    SCONST          reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    ABS             reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    ASC             reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    NUM             reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    UPPER           reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    LOWER           reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    LENGTH          reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    READ            reduce using rule 135 (assigning_operator -> MINUS EQUALS .)
    PRINT           reduce using rule 135 (assigning_operator -> MINUS EQUALS .)


state 196

    (138) assigning_operator -> MODULO EQUALS .

    IF              reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    MINUS           reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    NOT             reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    ARROW           reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    ID              reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    LPAREN          reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    ICONST          reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    FALSE           reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    TRUE            reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    CCONST          reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    NULL            reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    SCONST          reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    ABS             reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    ASC             reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    NUM             reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    UPPER           reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    LOWER           reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    LENGTH          reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    READ            reduce using rule 138 (assigning_operator -> MODULO EQUALS .)
    PRINT           reduce using rule 138 (assigning_operator -> MODULO EQUALS .)


state 197

    (142) then_clause -> THEN . action_statement_list
    (143) action_statement_list -> . action_statement
    (144) action_statement_list -> . action_statement_list action_statement
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (17) identifier -> . ID
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    action_statement_list          shift and go to state 236
    array_slice                    shift and go to state 28
    array_location                 shift and go to state 27
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 100
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 96

state 198

    (140) if_action -> IF boolean_expression then_clause . FI
    (141) if_action -> IF boolean_expression then_clause . else_clause FI
    (145) else_clause -> . ELSE action_statement_list
    (146) else_clause -> . ELSIF boolean_expression then_clause
    (147) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              shift and go to state 240
    ELSE            shift and go to state 238
    ELSIF           shift and go to state 239

    else_clause                    shift and go to state 237

state 199

    (110) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LAND            reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQ              reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NE              reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GT              reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GEQ             reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LT              reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LEQ             reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 110 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 200

    (91) operand0 -> operand0 operator1 operand1 .
    (104) operand1 -> operand1 . arithmetic_additive_operator operand2
    (105) operand1 -> operand1 . string_concatenation_operator operand2
    (106) arithmetic_additive_operator -> . PLUS
    (107) arithmetic_additive_operator -> . MINUS
    (108) string_concatenation_operator -> . LAND

    AND             reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    EQ              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    NE              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    GT              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    GEQ             reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    LT              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    LEQ             reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 134
    MINUS           shift and go to state 137
    LAND            shift and go to state 136

    string_concatenation_operator  shift and go to state 135
    arithmetic_additive_operator   shift and go to state 138

state 201

    (77) value_array_element -> array_primitive_value LBRACKET expression_list . RBRACKET
    (59) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 241
    COMMA           shift and go to state 223


state 202

    (78) value_array_slice -> array_primitive_value LBRACKET expression . COLON expression RBRACKET
    (58) expression_list -> expression .

    COLON           shift and go to state 242
    RBRACKET        reduce using rule 58 (expression_list -> expression .)
    COMMA           reduce using rule 58 (expression_list -> expression .)


state 203

    (105) operand1 -> operand1 string_concatenation_operator operand2 .
    (110) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (111) arithmetic_multiplicative_operator -> . TIMES
    (112) arithmetic_multiplicative_operator -> . DIVIDE
    (113) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    MINUS           reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    LAND            reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    AND             reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    OR              reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    EQ              reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    NE              reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    GT              reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    GEQ             reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    LT              reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    LEQ             reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    IN              reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    COLON           reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    ELSE            reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    ELSIF           reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    RPAREN          reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    RBRACKET        reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    SEMI            reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    COMMA           reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    THEN            reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    WHILE           reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    DOWN            reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    TO              reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    BY              reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    FI              reduce using rule 105 (operand1 -> operand1 string_concatenation_operator operand2 .)
    TIMES           shift and go to state 119
    DIVIDE          shift and go to state 117
    MODULO          shift and go to state 116

    arithmetic_multiplicative_operator shift and go to state 118

state 204

    (104) operand1 -> operand1 arithmetic_additive_operator operand2 .
    (110) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (111) arithmetic_multiplicative_operator -> . TIMES
    (112) arithmetic_multiplicative_operator -> . DIVIDE
    (113) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    MINUS           reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    LAND            reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    AND             reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    OR              reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    EQ              reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    NE              reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    GT              reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    GEQ             reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    LT              reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    LEQ             reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    IN              reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    COLON           reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    ELSE            reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    ELSIF           reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    RPAREN          reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    RBRACKET        reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    SEMI            reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    COMMA           reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    THEN            reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    WHILE           reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    DOWN            reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    TO              reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    BY              reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    FI              reduce using rule 104 (operand1 -> operand1 arithmetic_additive_operator operand2 .)
    TIMES           shift and go to state 119
    DIVIDE          shift and go to state 117
    MODULO          shift and go to state 116

    arithmetic_multiplicative_operator shift and go to state 118

state 205

    (80) parenthesized_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 80 (parenthesized_expression -> LPAREN expression RPAREN .)


state 206

    (86) then_expression -> THEN . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 243
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 207

    (83) conditional_expression -> IF boolean_expression then_expression . else_expression FI
    (84) conditional_expression -> IF boolean_expression then_expression . elsif_expression else_expression FI
    (87) else_expression -> . ELSE expression
    (88) elsif_expression -> . ELSIF boolean_expression then_expression
    (89) elsif_expression -> . elsif_expression ELSIF boolean_expression then_expression

    ELSE            shift and go to state 244
    ELSIF           shift and go to state 247

    elsif_expression               shift and go to state 246
    else_expression                shift and go to state 245

state 208

    (11) declaration_list -> declaration_list COMMA declaration .

    SEMI            reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)


state 209

    (40) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (41) literal_range -> . expression COLON expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    array_location                 shift and go to state 27
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 249
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    literal_range                  shift and go to state 248
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 210

    (42) reference_mode -> REF mode .

    EQUALS          reduce using rule 42 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 42 (reference_mode -> REF mode .)
    LOC             reduce using rule 42 (reference_mode -> REF mode .)
    SEMI            reduce using rule 42 (reference_mode -> REF mode .)
    COMMA           reduce using rule 42 (reference_mode -> REF mode .)


state 211

    (16) identifier_list -> identifier_list COMMA identifier .

    EQUALS          reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)


state 212

    (13) declaration -> identifier_list mode initialization .

    SEMI            reduce using rule 13 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 13 (declaration -> identifier_list mode initialization .)


state 213

    (14) initialization -> EQUALS . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 250
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 214

    (45) string_mode -> CHARS LBRACKET . integer_literal RBRACKET
    (71) integer_literal -> . ICONST

    ICONST          shift and go to state 71

    integer_literal                shift and go to state 251

state 215

    (46) array_mode -> ARRAY LBRACKET . list_index_mode RBRACKET mode
    (47) list_index_mode -> . index_mode
    (48) list_index_mode -> . list_index_mode COMMA index_mode
    (49) index_mode -> . discrete_mode
    (50) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (41) literal_range -> . expression COLON expression
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (17) identifier -> . ID
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    ID              shift and go to state 26
    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    integer_literal                shift and go to state 45
    discrete_mode                  shift and go to state 252
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    primitive_value                shift and go to state 74
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    builtin_call                   shift and go to state 8
    character_string_literal       shift and go to state 51
    array_element                  shift and go to state 13
    call_action                    shift and go to state 54
    operand0                       shift and go to state 55
    integer_mode                   shift and go to state 145
    boolean_mode                   shift and go to state 157
    array_primitive_value          shift and go to state 56
    index_mode                     shift and go to state 253
    list_index_mode                shift and go to state 254
    empty_literal                  shift and go to state 63
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 255
    builtin_name                   shift and go to state 24
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    value_array_slice              shift and go to state 62
    discrete_range_mode            shift and go to state 149
    literal_range                  shift and go to state 256
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    character_mode                 shift and go to state 153
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 249
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    array_location                 shift and go to state 27

state 216

    (39) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (41) literal_range -> . expression COLON expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    array_location                 shift and go to state 27
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 249
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    literal_range                  shift and go to state 257
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 217

    (188) procedure_statement -> identifier COLON procedure_definition SEMI .

    END             reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    DCL             reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    SYN             reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    TYPE            reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    ID              reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    EXIT            reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    RETURN          reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    RESULT          reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    IF              reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    DO              reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    ABS             reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    ASC             reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    NUM             reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    UPPER           reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    LOWER           reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    LENGTH          reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    READ            reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    PRINT           reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)
    $end            reduce using rule 188 (procedure_statement -> identifier COLON procedure_definition SEMI .)


state 218

    (123) action_statement -> identifier COLON action SEMI .

    OD              reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    ID              reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    EXIT            reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    RETURN          reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    RESULT          reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    IF              reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    DO              reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    ABS             reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    ASC             reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    NUM             reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    UPPER           reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    LOWER           reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    LENGTH          reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    READ            reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    PRINT           reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    DCL             reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    SYN             reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    TYPE            reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    $end            reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    END             reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    FI              reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    ELSE            reduce using rule 123 (action_statement -> identifier COLON action SEMI .)
    ELSIF           reduce using rule 123 (action_statement -> identifier COLON action SEMI .)


state 219

    (189) procedure_definition -> PROC LPAREN . RPAREN SEMI statement_list END
    (190) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMI statement_list END
    (191) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMI statement_list END
    (192) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI statement_list END
    (193) formal_parameter_list -> . formal_parameter
    (194) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (195) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    RPAREN          shift and go to state 261
    ID              shift and go to state 26

    formal_parameter               shift and go to state 258
    identifier_list                shift and go to state 259
    identifier                     shift and go to state 81
    formal_parameter_list          shift and go to state 260

state 220

    (171) parameter_list -> parameter_list COMMA . parameter
    (172) parameter -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_call                   shift and go to state 8
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    builtin_name                   shift and go to state 24
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 166
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    parameter                      shift and go to state 262
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 221

    (169) procedure_call -> identifier LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LAND            reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    AND             reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    OR              reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    NE              reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GT              reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LT              reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    IN              reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TO              reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    BY              reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    FI              reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 169 (procedure_call -> identifier LPAREN parameter_list RPAREN .)


state 222

    (179) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LAND            reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    NE              reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GT              reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LT              reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 179 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 223

    (59) expression_list -> expression_list COMMA . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 263
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 224

    (57) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LAND            reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NE              reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GEQ             reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LEQ             reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUALS          reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 57 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 225

    (60) array_slice -> array_location LBRACKET expression COLON . expression RBRACKET
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 264
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 226

    (22) synonym_definition -> identifier_list EQUALS constant_expression .

    SEMI            reduce using rule 22 (synonym_definition -> identifier_list EQUALS constant_expression .)
    COMMA           reduce using rule 22 (synonym_definition -> identifier_list EQUALS constant_expression .)


state 227

    (23) constant_expression -> expression .

    SEMI            reduce using rule 23 (constant_expression -> expression .)
    COMMA           reduce using rule 23 (constant_expression -> expression .)


state 228

    (21) synonym_definition -> identifier_list mode EQUALS . constant_expression
    (23) constant_expression -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_call                   shift and go to state 8
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    location                       shift and go to state 76
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    builtin_name                   shift and go to state 24
    operand2                       shift and go to state 48
    value_array_element            shift and go to state 50
    operand4                       shift and go to state 49
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    constant_expression            shift and go to state 265
    expression                     shift and go to state 227
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    boolean_literal                shift and go to state 77
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 229

    (20) synonym_list -> synonym_list COMMA synonym_definition .

    SEMI            reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)
    COMMA           reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)


state 230

    (26) newmode_list -> newmode_list COMMA mode_definition .

    SEMI            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)


state 231

    (27) mode_definition -> identifier_list EQUALS mode .

    SEMI            reduce using rule 27 (mode_definition -> identifier_list EQUALS mode .)
    COMMA           reduce using rule 27 (mode_definition -> identifier_list EQUALS mode .)


state 232

    (163) range_enumeration -> identifier IN . discrete_mode
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    ID              shift and go to state 26

    identifier                     shift and go to state 267
    discrete_mode                  shift and go to state 266
    discrete_range_mode            shift and go to state 149
    integer_mode                   shift and go to state 145
    boolean_mode                   shift and go to state 157
    character_mode                 shift and go to state 153

state 233

    (164) range_enumeration -> identifier DOWN . IN discrete_mode

    IN              shift and go to state 268


state 234

    (156) step_enumeration -> identifier EQUALS . start_value end_value
    (157) step_enumeration -> identifier EQUALS . start_value step_value end_value
    (158) step_enumeration -> identifier EQUALS . start_value DOWN end_value
    (159) step_enumeration -> identifier EQUALS . start_value step_value DOWN end_value
    (160) start_value -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 77
    expression                     shift and go to state 269
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    start_value                    shift and go to state 270
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 235

    (149) do_action -> DO control_part SEMI action_statement_list . OD
    (144) action_statement_list -> action_statement_list . action_statement
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (17) identifier -> . ID
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    OD              shift and go to state 271
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    assignment_action              shift and go to state 11
    array_location                 shift and go to state 27
    builtin_call                   shift and go to state 8
    array_slice                    shift and go to state 28
    return_action                  shift and go to state 25
    action_statement               shift and go to state 186
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 33
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 96

state 236

    (142) then_clause -> THEN action_statement_list .
    (144) action_statement_list -> action_statement_list . action_statement
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (17) identifier -> . ID
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    FI              reduce using rule 142 (then_clause -> THEN action_statement_list .)
    ELSE            reduce using rule 142 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 142 (then_clause -> THEN action_statement_list .)
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    array_slice                    shift and go to state 28
    array_location                 shift and go to state 27
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 186
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 96

state 237

    (141) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 272


state 238

    (145) else_clause -> ELSE . action_statement_list
    (143) action_statement_list -> . action_statement
    (144) action_statement_list -> . action_statement_list action_statement
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (17) identifier -> . ID
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    action_statement_list          shift and go to state 273
    array_slice                    shift and go to state 28
    array_location                 shift and go to state 27
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 100
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 96

state 239

    (146) else_clause -> ELSIF . boolean_expression then_clause
    (147) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (85) boolean_expression -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_call                   shift and go to state 8
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    builtin_name                   shift and go to state 24
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 274
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 115
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    boolean_literal                shift and go to state 77
    location                       shift and go to state 76
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 240

    (140) if_action -> IF boolean_expression then_clause FI .

    SEMI            reduce using rule 140 (if_action -> IF boolean_expression then_clause FI .)


state 241

    (77) value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .

    TIMES           reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LAND            reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    NE              reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    GEQ             reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LEQ             reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 77 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)


state 242

    (78) value_array_slice -> array_primitive_value LBRACKET expression COLON . expression RBRACKET
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_call                   shift and go to state 8
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    builtin_name                   shift and go to state 24
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 275
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    array_primitive_value          shift and go to state 56
    boolean_literal                shift and go to state 77
    location                       shift and go to state 76
    call_action                    shift and go to state 54
    identifier                     shift and go to state 78
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    character_string_literal       shift and go to state 51

state 243

    (86) then_expression -> THEN expression .

    ELSIF           reduce using rule 86 (then_expression -> THEN expression .)
    ELSE            reduce using rule 86 (then_expression -> THEN expression .)


state 244

    (87) else_expression -> ELSE . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 276
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 245

    (83) conditional_expression -> IF boolean_expression then_expression else_expression . FI

    FI              shift and go to state 277


state 246

    (84) conditional_expression -> IF boolean_expression then_expression elsif_expression . else_expression FI
    (89) elsif_expression -> elsif_expression . ELSIF boolean_expression then_expression
    (87) else_expression -> . ELSE expression

    ELSIF           shift and go to state 279
    ELSE            shift and go to state 244

    else_expression                shift and go to state 278

state 247

    (88) elsif_expression -> ELSIF . boolean_expression then_expression
    (85) boolean_expression -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 280
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 115
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 248

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 281


state 249

    (41) literal_range -> expression . COLON expression

    COLON           shift and go to state 282


state 250

    (14) initialization -> EQUALS expression .

    SEMI            reduce using rule 14 (initialization -> EQUALS expression .)
    COMMA           reduce using rule 14 (initialization -> EQUALS expression .)


state 251

    (45) string_mode -> CHARS LBRACKET integer_literal . RBRACKET

    RBRACKET        shift and go to state 283


state 252

    (49) index_mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACKET        reduce using rule 49 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 49 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 209


state 253

    (47) list_index_mode -> index_mode .

    RBRACKET        reduce using rule 47 (list_index_mode -> index_mode .)
    COMMA           reduce using rule 47 (list_index_mode -> index_mode .)


state 254

    (46) array_mode -> ARRAY LBRACKET list_index_mode . RBRACKET mode
    (48) list_index_mode -> list_index_mode . COMMA index_mode

    RBRACKET        shift and go to state 285
    COMMA           shift and go to state 284


state 255

    (39) discrete_range_mode -> identifier . LPAREN literal_range RPAREN
    (51) location -> identifier .
    (168) procedure_call -> identifier . LPAREN RPAREN
    (169) procedure_call -> identifier . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 286
    ARROW           reduce using rule 51 (location -> identifier .)
    TIMES           reduce using rule 51 (location -> identifier .)
    DIVIDE          reduce using rule 51 (location -> identifier .)
    MODULO          reduce using rule 51 (location -> identifier .)
    PLUS            reduce using rule 51 (location -> identifier .)
    MINUS           reduce using rule 51 (location -> identifier .)
    LAND            reduce using rule 51 (location -> identifier .)
    AND             reduce using rule 51 (location -> identifier .)
    OR              reduce using rule 51 (location -> identifier .)
    EQ              reduce using rule 51 (location -> identifier .)
    NE              reduce using rule 51 (location -> identifier .)
    GT              reduce using rule 51 (location -> identifier .)
    GEQ             reduce using rule 51 (location -> identifier .)
    LT              reduce using rule 51 (location -> identifier .)
    LEQ             reduce using rule 51 (location -> identifier .)
    IN              reduce using rule 51 (location -> identifier .)
    COLON           reduce using rule 51 (location -> identifier .)
    LBRACKET        reduce using rule 51 (location -> identifier .)


state 256

    (50) index_mode -> literal_range .

    RBRACKET        reduce using rule 50 (index_mode -> literal_range .)
    COMMA           reduce using rule 50 (index_mode -> literal_range .)


state 257

    (39) discrete_range_mode -> identifier LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 287


state 258

    (193) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 193 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 193 (formal_parameter_list -> formal_parameter .)


state 259

    (195) formal_parameter -> identifier_list . parameter_spec
    (16) identifier_list -> identifier_list . COMMA identifier
    (196) parameter_spec -> . mode
    (197) parameter_spec -> . mode LOC
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET integer_literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    COMMA           shift and go to state 150
    ID              shift and go to state 26
    REF             shift and go to state 148
    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    CHARS           shift and go to state 152
    ARRAY           shift and go to state 154

    identifier                     shift and go to state 161
    array_mode                     shift and go to state 146
    discrete_mode                  shift and go to state 147
    boolean_mode                   shift and go to state 157
    integer_mode                   shift and go to state 145
    discrete_range_mode            shift and go to state 149
    mode                           shift and go to state 288
    composite_mode                 shift and go to state 158
    reference_mode                 shift and go to state 159
    parameter_spec                 shift and go to state 289
    string_mode                    shift and go to state 155
    character_mode                 shift and go to state 153

state 260

    (190) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMI statement_list END
    (192) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI statement_list END
    (194) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 290
    COMMA           shift and go to state 291


state 261

    (189) procedure_definition -> PROC LPAREN RPAREN . SEMI statement_list END
    (191) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMI statement_list END
    (198) result_spec -> . RETURNS LPAREN mode RPAREN
    (199) result_spec -> . RETURNS LPAREN mode LOC RPAREN

    SEMI            shift and go to state 294
    RETURNS         shift and go to state 293

    result_spec                    shift and go to state 292

state 262

    (171) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 171 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 171 (parameter_list -> parameter_list COMMA parameter .)


state 263

    (59) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 59 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 59 (expression_list -> expression_list COMMA expression .)


state 264

    (60) array_slice -> array_location LBRACKET expression COLON expression . RBRACKET

    RBRACKET        shift and go to state 295


state 265

    (21) synonym_definition -> identifier_list mode EQUALS constant_expression .

    SEMI            reduce using rule 21 (synonym_definition -> identifier_list mode EQUALS constant_expression .)
    COMMA           reduce using rule 21 (synonym_definition -> identifier_list mode EQUALS constant_expression .)


state 266

    (163) range_enumeration -> identifier IN discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 163 (range_enumeration -> identifier IN discrete_mode .)
    SEMI            reduce using rule 163 (range_enumeration -> identifier IN discrete_mode .)
    LPAREN          shift and go to state 209


state 267

    (39) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 216


state 268

    (164) range_enumeration -> identifier DOWN IN . discrete_mode
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    ID              shift and go to state 26

    identifier                     shift and go to state 267
    discrete_mode                  shift and go to state 296
    discrete_range_mode            shift and go to state 149
    integer_mode                   shift and go to state 145
    boolean_mode                   shift and go to state 157
    character_mode                 shift and go to state 153

state 269

    (160) start_value -> expression .

    DOWN            reduce using rule 160 (start_value -> expression .)
    TO              reduce using rule 160 (start_value -> expression .)
    BY              reduce using rule 160 (start_value -> expression .)


state 270

    (156) step_enumeration -> identifier EQUALS start_value . end_value
    (157) step_enumeration -> identifier EQUALS start_value . step_value end_value
    (158) step_enumeration -> identifier EQUALS start_value . DOWN end_value
    (159) step_enumeration -> identifier EQUALS start_value . step_value DOWN end_value
    (162) end_value -> . TO expression
    (161) step_value -> . BY expression

    DOWN            shift and go to state 301
    TO              shift and go to state 298
    BY              shift and go to state 297

    step_value                     shift and go to state 299
    end_value                      shift and go to state 300

state 271

    (149) do_action -> DO control_part SEMI action_statement_list OD .

    SEMI            reduce using rule 149 (do_action -> DO control_part SEMI action_statement_list OD .)


state 272

    (141) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMI            reduce using rule 141 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 273

    (145) else_clause -> ELSE action_statement_list .
    (144) action_statement_list -> action_statement_list . action_statement
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (17) identifier -> . ID
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    FI              reduce using rule 145 (else_clause -> ELSE action_statement_list .)
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    array_slice                    shift and go to state 28
    array_location                 shift and go to state 27
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 186
    do_action                      shift and go to state 12
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 96

state 274

    (146) else_clause -> ELSIF boolean_expression . then_clause
    (147) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (142) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 197

    then_clause                    shift and go to state 302

state 275

    (78) value_array_slice -> array_primitive_value LBRACKET expression COLON expression . RBRACKET

    RBRACKET        shift and go to state 303


state 276

    (87) else_expression -> ELSE expression .

    FI              reduce using rule 87 (else_expression -> ELSE expression .)


state 277

    (83) conditional_expression -> IF boolean_expression then_expression else_expression FI .

    SEMI            reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COMMA           reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COLON           reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RPAREN          reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    THEN            reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    WHILE           reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DOWN            reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    TO              reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    BY              reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    FI              reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSE            reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSIF           reduce using rule 83 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)


state 278

    (84) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 304


state 279

    (89) elsif_expression -> elsif_expression ELSIF . boolean_expression then_expression
    (85) boolean_expression -> . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 305
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 115
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 280

    (88) elsif_expression -> ELSIF boolean_expression . then_expression
    (86) then_expression -> . THEN expression

    THEN            shift and go to state 206

    then_expression                shift and go to state 306

state 281

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    EQUALS          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 282

    (41) literal_range -> expression COLON . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 307
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 283

    (45) string_mode -> CHARS LBRACKET integer_literal RBRACKET .

    EQUALS          reduce using rule 45 (string_mode -> CHARS LBRACKET integer_literal RBRACKET .)
    SEMI            reduce using rule 45 (string_mode -> CHARS LBRACKET integer_literal RBRACKET .)
    COMMA           reduce using rule 45 (string_mode -> CHARS LBRACKET integer_literal RBRACKET .)
    LOC             reduce using rule 45 (string_mode -> CHARS LBRACKET integer_literal RBRACKET .)
    RPAREN          reduce using rule 45 (string_mode -> CHARS LBRACKET integer_literal RBRACKET .)


state 284

    (48) list_index_mode -> list_index_mode COMMA . index_mode
    (49) index_mode -> . discrete_mode
    (50) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (41) literal_range -> . expression COLON expression
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (17) identifier -> . ID
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    ID              shift and go to state 26
    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    integer_literal                shift and go to state 45
    discrete_mode                  shift and go to state 252
    array_slice                    shift and go to state 28
    operand2                       shift and go to state 48
    primitive_value                shift and go to state 74
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    builtin_call                   shift and go to state 8
    character_string_literal       shift and go to state 51
    array_element                  shift and go to state 13
    call_action                    shift and go to state 54
    operand0                       shift and go to state 55
    integer_mode                   shift and go to state 145
    boolean_mode                   shift and go to state 157
    array_primitive_value          shift and go to state 56
    index_mode                     shift and go to state 308
    empty_literal                  shift and go to state 63
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 255
    builtin_name                   shift and go to state 24
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    value_array_slice              shift and go to state 62
    discrete_range_mode            shift and go to state 149
    literal_range                  shift and go to state 256
    monadic_operator               shift and go to state 65
    character_literal              shift and go to state 47
    referenced_location            shift and go to state 66
    character_mode                 shift and go to state 153
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 249
    boolean_literal                shift and go to state 77
    location                       shift and go to state 76
    array_location                 shift and go to state 27

state 285

    (46) array_mode -> ARRAY LBRACKET list_index_mode RBRACKET . mode
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET integer_literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    ID              shift and go to state 26
    REF             shift and go to state 148
    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    CHARS           shift and go to state 152
    ARRAY           shift and go to state 154

    array_mode                     shift and go to state 146
    discrete_mode                  shift and go to state 147
    boolean_mode                   shift and go to state 157
    integer_mode                   shift and go to state 145
    discrete_range_mode            shift and go to state 149
    mode                           shift and go to state 309
    composite_mode                 shift and go to state 158
    identifier                     shift and go to state 161
    reference_mode                 shift and go to state 159
    string_mode                    shift and go to state 155
    character_mode                 shift and go to state 153

state 286

    (39) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (168) procedure_call -> identifier LPAREN . RPAREN
    (169) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (41) literal_range -> . expression COLON expression
    (170) parameter_list -> . parameter
    (171) parameter_list -> . parameter_list COMMA parameter
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (172) parameter -> . expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    RPAREN          shift and go to state 167
    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_call                   shift and go to state 8
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    builtin_name                   shift and go to state 24
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    array_location                 shift and go to state 27
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    parameter_list                 shift and go to state 165
    expression                     shift and go to state 310
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    parameter                      shift and go to state 168
    call_action                    shift and go to state 54
    literal_range                  shift and go to state 257
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 287

    (39) discrete_range_mode -> identifier LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    EQUALS          reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    LOC             reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)


state 288

    (196) parameter_spec -> mode .
    (197) parameter_spec -> mode . LOC

    RPAREN          reduce using rule 196 (parameter_spec -> mode .)
    COMMA           reduce using rule 196 (parameter_spec -> mode .)
    LOC             shift and go to state 311


state 289

    (195) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 195 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 195 (formal_parameter -> identifier_list parameter_spec .)


state 290

    (190) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMI statement_list END
    (192) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI statement_list END
    (198) result_spec -> . RETURNS LPAREN mode RPAREN
    (199) result_spec -> . RETURNS LPAREN mode LOC RPAREN

    SEMI            shift and go to state 313
    RETURNS         shift and go to state 293

    result_spec                    shift and go to state 312

state 291

    (194) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (195) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 26

    formal_parameter               shift and go to state 314
    identifier_list                shift and go to state 259
    identifier                     shift and go to state 81

state 292

    (191) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMI statement_list END

    SEMI            shift and go to state 315


state 293

    (198) result_spec -> RETURNS . LPAREN mode RPAREN
    (199) result_spec -> RETURNS . LPAREN mode LOC RPAREN

    LPAREN          shift and go to state 316


state 294

    (189) procedure_definition -> PROC LPAREN RPAREN SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    statement                      shift and go to state 2
    statement_list                 shift and go to state 317
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 295

    (60) array_slice -> array_location LBRACKET expression COLON expression RBRACKET .

    ARROW           reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    EQUALS          reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    MODULO          reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    GEQ             reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    LEQ             reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    IN              reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    SEMI            reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    THEN            reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    ELSE            reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    ELSIF           reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    DOWN            reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    TO              reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    BY              reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    FI              reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 60 (array_slice -> array_location LBRACKET expression COLON expression RBRACKET .)


state 296

    (164) range_enumeration -> identifier DOWN IN discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 164 (range_enumeration -> identifier DOWN IN discrete_mode .)
    SEMI            reduce using rule 164 (range_enumeration -> identifier DOWN IN discrete_mode .)
    LPAREN          shift and go to state 209


state 297

    (161) step_value -> BY . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 318
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 298

    (162) end_value -> TO . expression
    (81) expression -> . operand0
    (82) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (83) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (84) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (103) operand1 -> . operand2
    (104) operand1 -> . operand1 arithmetic_additive_operator operand2
    (105) operand1 -> . operand1 string_concatenation_operator operand2
    (109) operand2 -> . operand3
    (110) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (114) operand3 -> . operand4
    (115) operand3 -> . monadic_operator operand4
    (118) operand4 -> . location
    (119) operand4 -> . referenced_location
    (120) operand4 -> . primitive_value
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (121) referenced_location -> . ARROW location
    (62) primitive_value -> . literal
    (63) primitive_value -> . value_array_element
    (64) primitive_value -> . value_array_slice
    (65) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (66) literal -> . integer_literal
    (67) literal -> . boolean_literal
    (68) literal -> . character_literal
    (69) literal -> . empty_literal
    (70) literal -> . character_string_literal
    (77) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (78) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (80) parenthesized_expression -> . LPAREN expression RPAREN
    (61) array_location -> . location
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (71) integer_literal -> . ICONST
    (72) boolean_literal -> . FALSE
    (73) boolean_literal -> . TRUE
    (74) character_literal -> . CCONST
    (75) empty_literal -> . NULL
    (76) character_string_literal -> . SCONST
    (79) array_primitive_value -> . primitive_value
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT

    IF              shift and go to state 79
    MINUS           shift and go to state 57
    NOT             shift and go to state 68
    ARROW           shift and go to state 58
    ID              shift and go to state 26
    LPAREN          shift and go to state 67
    ICONST          shift and go to state 71
    FALSE           shift and go to state 75
    TRUE            shift and go to state 64
    CCONST          shift and go to state 73
    NULL            shift and go to state 52
    SCONST          shift and go to state 46
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    empty_literal                  shift and go to state 63
    integer_literal                shift and go to state 45
    parenthesized_expression       shift and go to state 60
    conditional_expression         shift and go to state 61
    dereferenced_reference         shift and go to state 43
    array_primitive_value          shift and go to state 56
    value_array_slice              shift and go to state 62
    character_literal              shift and go to state 47
    operand2                       shift and go to state 48
    operand4                       shift and go to state 49
    value_array_element            shift and go to state 50
    array_element                  shift and go to state 13
    monadic_operator               shift and go to state 65
    array_slice                    shift and go to state 28
    referenced_location            shift and go to state 66
    operand1                       shift and go to state 59
    literal                        shift and go to state 69
    operand3                       shift and go to state 70
    expression                     shift and go to state 319
    operand0                       shift and go to state 55
    primitive_value                shift and go to state 74
    location                       shift and go to state 76
    boolean_literal                shift and go to state 77
    builtin_call                   shift and go to state 8
    call_action                    shift and go to state 54
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 78
    character_string_literal       shift and go to state 51

state 299

    (157) step_enumeration -> identifier EQUALS start_value step_value . end_value
    (159) step_enumeration -> identifier EQUALS start_value step_value . DOWN end_value
    (162) end_value -> . TO expression

    DOWN            shift and go to state 321
    TO              shift and go to state 298

    end_value                      shift and go to state 320

state 300

    (156) step_enumeration -> identifier EQUALS start_value end_value .

    WHILE           reduce using rule 156 (step_enumeration -> identifier EQUALS start_value end_value .)
    SEMI            reduce using rule 156 (step_enumeration -> identifier EQUALS start_value end_value .)


state 301

    (158) step_enumeration -> identifier EQUALS start_value DOWN . end_value
    (162) end_value -> . TO expression

    TO              shift and go to state 298

    end_value                      shift and go to state 322

state 302

    (146) else_clause -> ELSIF boolean_expression then_clause .
    (147) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (145) else_clause -> . ELSE action_statement_list
    (146) else_clause -> . ELSIF boolean_expression then_clause
    (147) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              reduce using rule 146 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 238
    ELSIF           shift and go to state 239

    else_clause                    shift and go to state 323

state 303

    (78) value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .

    TIMES           reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    MODULO          reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    GEQ             reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LEQ             reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    IN              reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    SEMI            reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    THEN            reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSE            reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSIF           reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    DOWN            reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    TO              reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    BY              reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    FI              reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 78 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)


state 304

    (84) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .

    SEMI            reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    WHILE           reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 84 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)


state 305

    (89) elsif_expression -> elsif_expression ELSIF boolean_expression . then_expression
    (86) then_expression -> . THEN expression

    THEN            shift and go to state 206

    then_expression                shift and go to state 324

state 306

    (88) elsif_expression -> ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 88 (elsif_expression -> ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 88 (elsif_expression -> ELSIF boolean_expression then_expression .)


state 307

    (41) literal_range -> expression COLON expression .

    RPAREN          reduce using rule 41 (literal_range -> expression COLON expression .)
    RBRACKET        reduce using rule 41 (literal_range -> expression COLON expression .)
    COMMA           reduce using rule 41 (literal_range -> expression COLON expression .)


state 308

    (48) list_index_mode -> list_index_mode COMMA index_mode .

    RBRACKET        reduce using rule 48 (list_index_mode -> list_index_mode COMMA index_mode .)
    COMMA           reduce using rule 48 (list_index_mode -> list_index_mode COMMA index_mode .)


state 309

    (46) array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .

    EQUALS          reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)
    SEMI            reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)
    COMMA           reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)
    LOC             reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)
    RPAREN          reduce using rule 46 (array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode .)


state 310

    (41) literal_range -> expression . COLON expression
    (172) parameter -> expression .

    COLON           shift and go to state 282
    RPAREN          reduce using rule 172 (parameter -> expression .)
    COMMA           reduce using rule 172 (parameter -> expression .)


state 311

    (197) parameter_spec -> mode LOC .

    RPAREN          reduce using rule 197 (parameter_spec -> mode LOC .)
    COMMA           reduce using rule 197 (parameter_spec -> mode LOC .)


state 312

    (192) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI statement_list END

    SEMI            shift and go to state 325


state 313

    (190) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    statement                      shift and go to state 2
    statement_list                 shift and go to state 326
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    if_action                      shift and go to state 19
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 314

    (194) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 194 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 194 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 315

    (191) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    statement                      shift and go to state 2
    statement_list                 shift and go to state 327
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    if_action                      shift and go to state 19
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    array_location                 shift and go to state 27
    bracketed_action               shift and go to state 33
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 316

    (198) result_spec -> RETURNS LPAREN . mode RPAREN
    (199) result_spec -> RETURNS LPAREN . mode LOC RPAREN
    (28) mode -> . identifier
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (17) identifier -> . ID
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) reference_mode -> . REF mode
    (43) composite_mode -> . string_mode
    (44) composite_mode -> . array_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (45) string_mode -> . CHARS LBRACKET integer_literal RBRACKET
    (46) array_mode -> . ARRAY LBRACKET list_index_mode RBRACKET mode

    ID              shift and go to state 26
    REF             shift and go to state 148
    INT             shift and go to state 156
    BOOL            shift and go to state 160
    CHAR            shift and go to state 144
    CHARS           shift and go to state 152
    ARRAY           shift and go to state 154

    array_mode                     shift and go to state 146
    discrete_mode                  shift and go to state 147
    boolean_mode                   shift and go to state 157
    integer_mode                   shift and go to state 145
    discrete_range_mode            shift and go to state 149
    mode                           shift and go to state 328
    composite_mode                 shift and go to state 158
    identifier                     shift and go to state 161
    reference_mode                 shift and go to state 159
    string_mode                    shift and go to state 155
    character_mode                 shift and go to state 153

state 317

    (189) procedure_definition -> PROC LPAREN RPAREN SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    END             shift and go to state 329
    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    statement                      shift and go to state 44
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 318

    (161) step_value -> BY expression .

    DOWN            reduce using rule 161 (step_value -> BY expression .)
    TO              reduce using rule 161 (step_value -> BY expression .)


state 319

    (162) end_value -> TO expression .

    WHILE           reduce using rule 162 (end_value -> TO expression .)
    SEMI            reduce using rule 162 (end_value -> TO expression .)


state 320

    (157) step_enumeration -> identifier EQUALS start_value step_value end_value .

    WHILE           reduce using rule 157 (step_enumeration -> identifier EQUALS start_value step_value end_value .)
    SEMI            reduce using rule 157 (step_enumeration -> identifier EQUALS start_value step_value end_value .)


state 321

    (159) step_enumeration -> identifier EQUALS start_value step_value DOWN . end_value
    (162) end_value -> . TO expression

    TO              shift and go to state 298

    end_value                      shift and go to state 330

state 322

    (158) step_enumeration -> identifier EQUALS start_value DOWN end_value .

    WHILE           reduce using rule 158 (step_enumeration -> identifier EQUALS start_value DOWN end_value .)
    SEMI            reduce using rule 158 (step_enumeration -> identifier EQUALS start_value DOWN end_value .)


state 323

    (147) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 147 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 324

    (89) elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 89 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 89 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)


state 325

    (192) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    statement                      shift and go to state 2
    statement_list                 shift and go to state 331
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    array_location                 shift and go to state 27
    bracketed_action               shift and go to state 33
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 326

    (190) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    END             shift and go to state 332
    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    bracketed_action               shift and go to state 33
    statement                      shift and go to state 44
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    if_action                      shift and go to state 19
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    array_location                 shift and go to state 27
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 327

    (191) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    END             shift and go to state 333
    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    statement                      shift and go to state 44
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    if_action                      shift and go to state 19
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    array_location                 shift and go to state 27
    bracketed_action               shift and go to state 33
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 328

    (198) result_spec -> RETURNS LPAREN mode . RPAREN
    (199) result_spec -> RETURNS LPAREN mode . LOC RPAREN

    RPAREN          shift and go to state 334
    LOC             shift and go to state 335


state 329

    (189) procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END .

    SEMI            reduce using rule 189 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END .)


state 330

    (159) step_enumeration -> identifier EQUALS start_value step_value DOWN end_value .

    WHILE           reduce using rule 159 (step_enumeration -> identifier EQUALS start_value step_value DOWN end_value .)
    SEMI            reduce using rule 159 (step_enumeration -> identifier EQUALS start_value step_value DOWN end_value .)


state 331

    (192) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (188) procedure_statement -> . identifier COLON procedure_definition SEMI
    (122) action_statement -> . action SEMI
    (123) action_statement -> . identifier COLON action SEMI
    (17) identifier -> . ID
    (124) action -> . bracketed_action
    (125) action -> . assignment_action
    (126) action -> . call_action
    (127) action -> . exit_action
    (128) action -> . return_action
    (129) action -> . result_action
    (130) bracketed_action -> . if_action
    (131) bracketed_action -> . do_action
    (132) assignment_action -> . location assigning_operator expression
    (166) call_action -> . procedure_call
    (167) call_action -> . builtin_call
    (173) exit_action -> . EXIT identifier
    (174) return_action -> . RETURN
    (175) return_action -> . RETURN result
    (176) result_action -> . RESULT result
    (140) if_action -> . IF boolean_expression then_clause FI
    (141) if_action -> . IF boolean_expression then_clause else_clause FI
    (148) do_action -> . DO action_statement_list OD
    (149) do_action -> . DO control_part SEMI action_statement_list OD
    (51) location -> . identifier
    (52) location -> . dereferenced_reference
    (53) location -> . array_element
    (54) location -> . array_slice
    (55) location -> . call_action
    (168) procedure_call -> . identifier LPAREN RPAREN
    (169) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (178) builtin_call -> . builtin_name LPAREN RPAREN
    (179) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (56) dereferenced_reference -> . location ARROW
    (57) array_element -> . array_location LBRACKET expression_list RBRACKET
    (60) array_slice -> . array_location LBRACKET expression COLON expression RBRACKET
    (180) builtin_name -> . ABS
    (181) builtin_name -> . ASC
    (182) builtin_name -> . NUM
    (183) builtin_name -> . UPPER
    (184) builtin_name -> . LOWER
    (185) builtin_name -> . LENGTH
    (186) builtin_name -> . READ
    (187) builtin_name -> . PRINT
    (61) array_location -> . location

    END             shift and go to state 336
    DCL             shift and go to state 9
    SYN             shift and go to state 29
    TYPE            shift and go to state 30
    ID              shift and go to state 26
    EXIT            shift and go to state 39
    RETURN          shift and go to state 21
    RESULT          shift and go to state 6
    IF              shift and go to state 42
    DO              shift and go to state 35
    ABS             shift and go to state 41
    ASC             shift and go to state 40
    NUM             shift and go to state 1
    UPPER           shift and go to state 20
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 7
    READ            shift and go to state 10
    PRINT           shift and go to state 17

    builtin_name                   shift and go to state 24
    statement                      shift and go to state 44
    synonym_statement              shift and go to state 4
    newmode_statement              shift and go to state 5
    array_slice                    shift and go to state 28
    builtin_call                   shift and go to state 8
    assignment_action              shift and go to state 11
    return_action                  shift and go to state 25
    action_statement               shift and go to state 32
    do_action                      shift and go to state 12
    procedure_statement            shift and go to state 34
    array_element                  shift and go to state 13
    action                         shift and go to state 36
    declaration_statement          shift and go to state 14
    call_action                    shift and go to state 15
    dereferenced_reference         shift and go to state 43
    exit_action                    shift and go to state 16
    result_action                  shift and go to state 37
    location                       shift and go to state 38
    if_action                      shift and go to state 19
    array_location                 shift and go to state 27
    bracketed_action               shift and go to state 33
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 23

state 332

    (190) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END .

    SEMI            reduce using rule 190 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END .)


state 333

    (191) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END .

    SEMI            reduce using rule 191 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END .)


state 334

    (198) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 198 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 335

    (199) result_spec -> RETURNS LPAREN mode LOC . RPAREN

    RPAREN          shift and go to state 337


state 336

    (192) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END .

    SEMI            reduce using rule 192 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END .)


state 337

    (199) result_spec -> RETURNS LPAREN mode LOC RPAREN .

    SEMI            reduce using rule 199 (result_spec -> RETURNS LPAREN mode LOC RPAREN .)

