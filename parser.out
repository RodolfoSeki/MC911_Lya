Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    EXIT
    AND
    BY
    LPAREN
    RESULT
    ABS
    NUM
    OD
    MINUS
    TO
    REF
    TRUE
    SCONST
    NE
    UPPER
    ELSIF
    GT
    ARROW
    TYPE
    RETURN
    IN
    NOT
    READ
    LEQ
    LOWER
    RETURNS
    GEQ
    LOC
    RBRACKET
    DOWN
    SYN
    CCONST
    LT
    ASC
    ELSE
    FOR
    THEN
    FALSE
    LBRACKET
    COLON
    LENGTH
    CHARS
    PRINT
    FI
    DO
    WHILE
    EQ
    PLUS
    ARRAY
    OR
    NULL
    END
    IF
    RPAREN
    PROC

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration_statement
Rule 5     declaration_statement -> DCL declaration_list SEMI
Rule 6     declaration_list -> declaration
Rule 7     declaration_list -> declaration_list COMMA declaration
Rule 8     declaration -> identifier_list mode
Rule 9     declaration -> identifier_list mode initialization
Rule 10    initialization -> EQUALS expression
Rule 11    identifier_list -> identifier
Rule 12    identifier_list -> identifier_list COMMA identifier
Rule 13    identifier -> ID
Rule 14    mode -> discrete_mode
Rule 15    discrete_mode -> primitive_mode
Rule 16    primitive_mode -> INT
Rule 17    primitive_mode -> BOOL
Rule 18    primitive_mode -> CHAR
Rule 19    expression -> operand0
Rule 20    operand0 -> operand1
Rule 21    operand1 -> operand2
Rule 22    operand2 -> operand3
Rule 23    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 24    operand3 -> ICONST
Rule 25    arithmetic_multiplicative_operator -> TIMES
Rule 26    arithmetic_multiplicative_operator -> DIVIDE
Rule 27    arithmetic_multiplicative_operator -> MODULO

Terminals, with rules where they appear

ABS                  : 
AND                  : 
ARRAY                : 
ARROW                : 
ASC                  : 
BOOL                 : 17
BY                   : 
CCONST               : 
CHAR                 : 18
CHARS                : 
COLON                : 
COMMA                : 7 12
DCL                  : 5
DIVIDE               : 26
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQ                   : 
EQUALS               : 10
EXIT                 : 
FALSE                : 
FI                   : 
FOR                  : 
GEQ                  : 
GT                   : 
ICONST               : 24
ID                   : 13
IF                   : 
IN                   : 
INT                  : 16
LBRACKET             : 
LENGTH               : 
LEQ                  : 
LOC                  : 
LOWER                : 
LPAREN               : 
LT                   : 
MINUS                : 
MODULO               : 27
NE                   : 
NOT                  : 
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 
PLUS                 : 
PRINT                : 
PROC                 : 
RBRACKET             : 
READ                 : 
REF                  : 
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 
SCONST               : 
SEMI                 : 5
SYN                  : 
THEN                 : 
TIMES                : 25
TO                   : 
TRUE                 : 
TYPE                 : 
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_multiplicative_operator : 23
declaration          : 6 7
declaration_list     : 5 7
declaration_statement : 4
discrete_mode        : 14
expression           : 10
identifier           : 11 12
identifier_list      : 8 9 12
initialization       : 9
mode                 : 8 9
operand0             : 19
operand1             : 20
operand2             : 21 23
operand3             : 22 23
primitive_mode       : 15
program              : 0
statement            : 2 3
statement_list       : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) declaration_statement -> . DCL declaration_list SEMI

    DCL             shift and go to state 2

    statement_list                 shift and go to state 4
    statement                      shift and go to state 5
    declaration_statement          shift and go to state 1
    program                        shift and go to state 3

state 1

    (4) statement -> declaration_statement .

    DCL             reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 2

    (5) declaration_statement -> DCL . declaration_list SEMI
    (6) declaration_list -> . declaration
    (7) declaration_list -> . declaration_list COMMA declaration
    (8) declaration -> . identifier_list mode
    (9) declaration -> . identifier_list mode initialization
    (11) identifier_list -> . identifier
    (12) identifier_list -> . identifier_list COMMA identifier
    (13) identifier -> . ID

    ID              shift and go to state 9

    declaration_list               shift and go to state 6
    declaration                    shift and go to state 8
    identifier_list                shift and go to state 10
    identifier                     shift and go to state 7

state 3

    (0) S' -> program .



state 4

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) declaration_statement -> . DCL declaration_list SEMI

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 2

    statement                      shift and go to state 11
    declaration_statement          shift and go to state 1

state 5

    (2) statement_list -> statement .

    DCL             reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 6

    (5) declaration_statement -> DCL declaration_list . SEMI
    (7) declaration_list -> declaration_list . COMMA declaration

    SEMI            shift and go to state 12
    COMMA           shift and go to state 13


state 7

    (11) identifier_list -> identifier .

    COMMA           reduce using rule 11 (identifier_list -> identifier .)
    INT             reduce using rule 11 (identifier_list -> identifier .)
    BOOL            reduce using rule 11 (identifier_list -> identifier .)
    CHAR            reduce using rule 11 (identifier_list -> identifier .)


state 8

    (6) declaration_list -> declaration .

    SEMI            reduce using rule 6 (declaration_list -> declaration .)
    COMMA           reduce using rule 6 (declaration_list -> declaration .)


state 9

    (13) identifier -> ID .

    COMMA           reduce using rule 13 (identifier -> ID .)
    INT             reduce using rule 13 (identifier -> ID .)
    BOOL            reduce using rule 13 (identifier -> ID .)
    CHAR            reduce using rule 13 (identifier -> ID .)


state 10

    (8) declaration -> identifier_list . mode
    (9) declaration -> identifier_list . mode initialization
    (12) identifier_list -> identifier_list . COMMA identifier
    (14) mode -> . discrete_mode
    (15) discrete_mode -> . primitive_mode
    (16) primitive_mode -> . INT
    (17) primitive_mode -> . BOOL
    (18) primitive_mode -> . CHAR

    COMMA           shift and go to state 17
    INT             shift and go to state 15
    BOOL            shift and go to state 14
    CHAR            shift and go to state 16

    primitive_mode                 shift and go to state 18
    discrete_mode                  shift and go to state 19
    mode                           shift and go to state 20

state 11

    (3) statement_list -> statement_list statement .

    DCL             reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 12

    (5) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 5 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 5 (declaration_statement -> DCL declaration_list SEMI .)


state 13

    (7) declaration_list -> declaration_list COMMA . declaration
    (8) declaration -> . identifier_list mode
    (9) declaration -> . identifier_list mode initialization
    (11) identifier_list -> . identifier
    (12) identifier_list -> . identifier_list COMMA identifier
    (13) identifier -> . ID

    ID              shift and go to state 9

    declaration                    shift and go to state 21
    identifier_list                shift and go to state 10
    identifier                     shift and go to state 7

state 14

    (17) primitive_mode -> BOOL .

    EQUALS          reduce using rule 17 (primitive_mode -> BOOL .)
    SEMI            reduce using rule 17 (primitive_mode -> BOOL .)
    COMMA           reduce using rule 17 (primitive_mode -> BOOL .)


state 15

    (16) primitive_mode -> INT .

    EQUALS          reduce using rule 16 (primitive_mode -> INT .)
    SEMI            reduce using rule 16 (primitive_mode -> INT .)
    COMMA           reduce using rule 16 (primitive_mode -> INT .)


state 16

    (18) primitive_mode -> CHAR .

    EQUALS          reduce using rule 18 (primitive_mode -> CHAR .)
    SEMI            reduce using rule 18 (primitive_mode -> CHAR .)
    COMMA           reduce using rule 18 (primitive_mode -> CHAR .)


state 17

    (12) identifier_list -> identifier_list COMMA . identifier
    (13) identifier -> . ID

    ID              shift and go to state 9

    identifier                     shift and go to state 22

state 18

    (15) discrete_mode -> primitive_mode .

    EQUALS          reduce using rule 15 (discrete_mode -> primitive_mode .)
    SEMI            reduce using rule 15 (discrete_mode -> primitive_mode .)
    COMMA           reduce using rule 15 (discrete_mode -> primitive_mode .)


state 19

    (14) mode -> discrete_mode .

    EQUALS          reduce using rule 14 (mode -> discrete_mode .)
    SEMI            reduce using rule 14 (mode -> discrete_mode .)
    COMMA           reduce using rule 14 (mode -> discrete_mode .)


state 20

    (8) declaration -> identifier_list mode .
    (9) declaration -> identifier_list mode . initialization
    (10) initialization -> . EQUALS expression

    SEMI            reduce using rule 8 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 8 (declaration -> identifier_list mode .)
    EQUALS          shift and go to state 23

    initialization                 shift and go to state 24

state 21

    (7) declaration_list -> declaration_list COMMA declaration .

    SEMI            reduce using rule 7 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 7 (declaration_list -> declaration_list COMMA declaration .)


state 22

    (12) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 12 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 12 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 12 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 12 (identifier_list -> identifier_list COMMA identifier .)


state 23

    (10) initialization -> EQUALS . expression
    (19) expression -> . operand0
    (20) operand0 -> . operand1
    (21) operand1 -> . operand2
    (22) operand2 -> . operand3
    (23) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (24) operand3 -> . ICONST

    ICONST          shift and go to state 28

    operand0                       shift and go to state 25
    operand2                       shift and go to state 26
    operand1                       shift and go to state 30
    expression                     shift and go to state 29
    operand3                       shift and go to state 27

state 24

    (9) declaration -> identifier_list mode initialization .

    SEMI            reduce using rule 9 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 9 (declaration -> identifier_list mode initialization .)


state 25

    (19) expression -> operand0 .

    SEMI            reduce using rule 19 (expression -> operand0 .)
    COMMA           reduce using rule 19 (expression -> operand0 .)


state 26

    (21) operand1 -> operand2 .
    (23) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (25) arithmetic_multiplicative_operator -> . TIMES
    (26) arithmetic_multiplicative_operator -> . DIVIDE
    (27) arithmetic_multiplicative_operator -> . MODULO

    SEMI            reduce using rule 21 (operand1 -> operand2 .)
    COMMA           reduce using rule 21 (operand1 -> operand2 .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 31
    MODULO          shift and go to state 32

    arithmetic_multiplicative_operator shift and go to state 33

state 27

    (22) operand2 -> operand3 .

    TIMES           reduce using rule 22 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 22 (operand2 -> operand3 .)
    MODULO          reduce using rule 22 (operand2 -> operand3 .)
    SEMI            reduce using rule 22 (operand2 -> operand3 .)
    COMMA           reduce using rule 22 (operand2 -> operand3 .)


state 28

    (24) operand3 -> ICONST .

    TIMES           reduce using rule 24 (operand3 -> ICONST .)
    DIVIDE          reduce using rule 24 (operand3 -> ICONST .)
    MODULO          reduce using rule 24 (operand3 -> ICONST .)
    SEMI            reduce using rule 24 (operand3 -> ICONST .)
    COMMA           reduce using rule 24 (operand3 -> ICONST .)


state 29

    (10) initialization -> EQUALS expression .

    SEMI            reduce using rule 10 (initialization -> EQUALS expression .)
    COMMA           reduce using rule 10 (initialization -> EQUALS expression .)


state 30

    (20) operand0 -> operand1 .

    SEMI            reduce using rule 20 (operand0 -> operand1 .)
    COMMA           reduce using rule 20 (operand0 -> operand1 .)


state 31

    (26) arithmetic_multiplicative_operator -> DIVIDE .

    ICONST          reduce using rule 26 (arithmetic_multiplicative_operator -> DIVIDE .)


state 32

    (27) arithmetic_multiplicative_operator -> MODULO .

    ICONST          reduce using rule 27 (arithmetic_multiplicative_operator -> MODULO .)


state 33

    (23) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (24) operand3 -> . ICONST

    ICONST          shift and go to state 28

    operand3                       shift and go to state 35

state 34

    (25) arithmetic_multiplicative_operator -> TIMES .

    ICONST          reduce using rule 25 (arithmetic_multiplicative_operator -> TIMES .)


state 35

    (23) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 23 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 23 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 23 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 23 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 23 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)

