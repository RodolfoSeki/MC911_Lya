
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGEQLTLEQleftPLUSMINUSleftTIMESDIVIDEMODULOID ICONST CCONST SCONST PLUS MINUS TIMES DIVIDE MODULO EQUALS SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET AND LAND OR EQ NE GT GEQ LT LEQ COLON COMMA NOT LENGTH NUM END EXIT SYN RETURNS DOWN PROC DCL LOWER ELSIF FI ELSE ABS WHILE TYPE INT OD FOR UPPER ARRAY LOC CHAR TO READ RETURN RESULT PRINT BY DO TRUE NULL CHARS IF FALSE BOOL REF THEN ASC INprogram : statement_liststatement_list : statement\n                          | statement_list statement\n        statement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statement\n        declaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declaration\n        declaration : identifier_list mode \n                       | identifier_list mode initialization\n        initialization : EQUALS expression\n        identifier_list : identifier\n                           | identifier_list COMMA identifier\n        identifier : ID  synonym_statement : SYN synonym_list SEMI\n         synonym_list : synonym_definition \n                         | synonym_list COMMA synonym_definition\n         synonym_definition : identifier_list mode EQUALS constant_expression\n                               | identifier_list EQUALS constant_expression\n         constant_expression : expression\n         newmode_statement : TYPE newmode_list SEMI\n         newmode_list : mode_definition \n                         | newmode_list COMMA mode_definition\n         mode_definition : identifier_list EQUALS mode\n         mode : identifier\n                 | discrete_mode\n                 | reference_mode\n                 | composite_mode\n         discrete_mode : integer_mode\n                          | boolean_mode\n                          | character_mode\n                          | discrete_range_mode\n         integer_mode : INT\n         boolean_mode : BOOL\n         character_mode : CHAR\n         discrete_range_mode : identifier LPAREN literal_range RPAREN\n                                | discrete_mode LPAREN literal_range RPAREN\n         literal_range : expression COLON expression\n         reference_mode : REF mode\n         composite_mode : string_mode\n                           | array_mode\n         string_mode : CHARS LBRACKET integer_literal RBRACKET\n         array_mode : ARRAY LBRACKET list_index_mode RBRACKET mode\n         list_index_mode : index_mode\n                            | list_index_mode COMMA index_mode\n         index_mode : discrete_mode\n                       | literal_range\n         location : identifier\n                     | dereferenced_reference\n                     | array_element\n                     | array_slice\n                     | call_action\n         dereferenced_reference : location ARROW\n         array_element : array_location LBRACKET expression_list RBRACKET\n         expression_list : expression\n                            | expression_list COMMA expression\n         array_slice : array_location LBRACKET expression COLON expression RBRACKET\n         array_location : location\n         primitive_value : literal\n                            | value_array_element\n                            | value_array_slice\n                            | parenthesized_expression\n         literal : integer_literal\n                    | boolean_literal\n                    | character_literal\n                    | empty_literal\n                    | character_string_literal\n         integer_literal : ICONST\n         boolean_literal : FALSE\n                            | TRUE\n         character_literal : CCONST\n         empty_literal : NULL\n         character_string_literal : SCONST\n         value_array_element : array_primitive_value LBRACKET expression_list RBRACKET\n         value_array_slice : array_primitive_value LBRACKET expression COLON expression RBRACKET\n         array_primitive_value : primitive_value\n         parenthesized_expression : LPAREN expression RPAREN\n         expression : operand0\n                       | conditional_expression\n         conditional_expression : IF boolean_expression then_expression else_expression FI\n                                   | IF boolean_expression then_expression elsif_expression else_expression FI\n         boolean_expression : expression\n         then_expression : THEN expression\n         else_expression : ELSE expression\n         elsif_expression : ELSIF boolean_expression then_expression\n                             | elsif_expression ELSIF boolean_expression then_expression\n         operand0 : operand1\n                     | operand0 operator1 operand1\n         operator1 : relational_operator\n                      | membership_operator\n         relational_operator : AND\n                                | OR \n                                | EQ \n                                | NE\n                                | GT\n                                | GEQ\n                                | LT\n                                | LEQ\n         membership_operator : IN\n         operand1 : operand2\n                     | operand1 arithmetic_additive_operator operand2\n                     | operand1 string_concatenation_operator operand2\n         arithmetic_additive_operator : PLUS\n                                         | MINUS\n         string_concatenation_operator : LAND\n         operand2 : operand3 \n                     | operand2 arithmetic_multiplicative_operator operand3\n         arithmetic_multiplicative_operator : TIMES\n                                               | DIVIDE\n                                               | MODULO \n         operand3 : operand4\n                     | monadic_operator operand4\n         monadic_operator : MINUS\n                             | NOT \n         operand4 : location\n                     | referenced_location\n                     | primitive_value\n         referenced_location : ARROW location\n         action_statement : action SEMI\n                             | identifier COLON action SEMI\n         action : bracketed_action\n                   | assignment_action\n                   | call_action\n                   | exit_action\n                   | return_action\n                   | result_action\n         bracketed_action : if_action\n                             | do_action\n         assignment_action : location assigning_operator expression\n         assigning_operator : EQUALS\n                               | PLUS EQUALS\n                               | MINUS EQUALS\n                               | TIMES EQUALS\n                               | DIVIDE EQUALS\n                               | MODULO EQUALS\n                               | LAND EQUALS\n         if_action : IF boolean_expression then_clause FI\n                      | IF boolean_expression then_clause else_clause FI\n         then_clause : THEN action_statement_list\n        action_statement_list : action_statement\n                                 | action_statement_list action_statement\n         else_clause : ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause \n                        | ELSIF boolean_expression then_clause else_clause\n         do_action : DO action_statement_list OD\n                      | DO control_part SEMI action_statement_list OD\n         control_part : for_control \n                         | for_control while_control\n                         | while_control\n         for_control : FOR iteration\n         iteration : step_enumeration\n                      | range_enumeration\n         step_enumeration : identifier EQUALS start_value end_value\n                             | identifier EQUALS start_value step_value end_value\n                             | identifier EQUALS start_value DOWN end_value\n                             | identifier EQUALS start_value step_value DOWN end_value\n         start_value : expression\n         step_value : BY expression\n         end_value : TO expression\n         range_enumeration : identifier IN discrete_range_mode \n                              | identifier DOWN IN discrete_range_mode\n         while_control : WHILE boolean_expression\n         call_action : procedure_call\n                        | builtin_call\n         procedure_call : identifier LPAREN  RPAREN\n                           | identifier LPAREN parameter_list RPAREN\n         parameter_list : parameter\n                           | parameter_list COMMA parameter\n         parameter : expression\n         exit_action : EXIT identifier\n         return_action : RETURN \n                          | RETURN result\n         result_action : RESULT result\n         result : expression\n         builtin_call : builtin_name LPAREN RPAREN\n                         | builtin_name LPAREN parameter_list RPAREN\n         builtin_name : ABS\n                         | ASC\n                         | NUM\n                         | UPPER\n                         | LOWER\n                         | LENGTH\n                         | READ\n                         | PRINT\n         procedure_statement : identifier COLON procedure_definition SEMI\n         procedure_definition : PROC LPAREN RPAREN SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END\n                                 | PROC LPAREN RPAREN result_spec SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END\n         formal_parameter_list : formal_parameter \n                                  | formal_parameter_list COMMA formal_parameter\n         formal_parameter : identifier_list parameter_spec\n         parameter_spec : mode \n                           | mode LOC\n         result_spec : RETURNS LPAREN mode RPAREN\n                        | RETURNS LPAREN mode LOC RPAREN\n        '
    
_lr_action_items = {'RBRACKET':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,125,126,130,131,134,139,140,144,145,172,195,196,197,210,211,217,218,219,220,221,223,238,240,245,247,248,249,250,260,274,275,277,278,287,289,303,304,307,309,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-35,-37,-38,-32,-33,-34,-36,-121,-115,-168,-58,238,-178,-91,-80,-105,-104,-110,-58,260,-169,-57,-179,279,-50,-47,-49,281,-77,303,-59,-40,-39,-83,312,-60,-41,-48,-84,-78,]),'ELSE':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,104,115,144,145,159,172,189,197,208,210,211,216,217,218,219,223,226,238,240,251,255,260,287,288,303,309,310,312,325,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-143,-122,-121,-115,212,-168,-144,-178,253,-91,-80,-142,-105,-104,-110,-169,-123,-57,-179,253,-86,-77,-83,212,-60,-84,-88,-78,-89,]),'TO':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,260,268,269,287,298,302,303,309,312,321,323,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-77,-160,300,-83,300,300,-60,-84,-78,-161,300,]),'LT':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,146,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'LBRACKET':([1,6,12,18,19,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,79,84,85,87,88,89,90,91,99,138,142,144,172,197,211,223,238,240,246,260,303,312,],[-61,-51,-55,-53,111,-52,-54,-166,-167,-17,-56,-61,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-79,-64,-71,-63,-72,-69,170,-62,-73,-51,206,207,-61,-168,-178,-80,-169,-57,-179,-51,-77,-60,-78,]),'BOOL':([43,53,56,97,133,192,205,207,233,265,267,281,282,313,],[-17,-15,126,126,126,126,-16,126,126,126,126,126,126,126,]),'LAND':([1,6,12,18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,77,79,82,83,84,85,86,87,88,90,91,99,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[45,-51,-55,-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,-109,-64,164,-114,-71,-63,-103,-72,-69,-62,-73,-51,-121,-115,-168,-178,164,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'DIVIDE':([1,6,12,18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,77,79,83,84,85,86,87,88,90,91,99,144,145,172,197,211,217,218,219,223,238,240,246,260,303,312,],[48,-51,-55,-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,-109,-64,-114,-71,-63,167,-72,-69,-62,-73,-51,-121,-115,-168,-178,-80,167,167,-110,-169,-57,-179,-51,-77,-60,-78,]),'LOWER':([0,3,5,8,13,14,23,26,28,29,38,40,46,49,57,64,71,72,78,81,92,93,94,101,102,104,111,114,115,116,117,119,120,121,122,123,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,178,181,183,189,191,193,200,201,203,207,209,212,215,216,222,224,226,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[15,15,15,15,-5,15,-8,-6,15,-2,-7,-4,15,-133,-3,15,15,15,15,-116,-117,15,15,15,15,-143,15,15,-122,-135,-139,-138,-137,-134,-136,-9,-100,-97,-102,-93,-99,-92,-94,-96,15,-101,-98,-95,15,-107,-106,15,-108,15,-111,-112,-113,15,15,-18,15,15,-144,15,-24,15,15,15,15,15,15,15,15,15,-188,-123,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'PRINT':([0,3,5,8,13,14,23,26,28,29,38,40,46,49,57,64,71,72,78,81,92,93,94,101,102,104,111,114,115,116,117,119,120,121,122,123,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,178,181,183,189,191,193,200,201,203,207,209,212,215,216,222,224,226,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[4,4,4,4,-5,4,-8,-6,4,-2,-7,-4,4,-133,-3,4,4,4,4,-116,-117,4,4,4,4,-143,4,4,-122,-135,-139,-138,-137,-134,-136,-9,-100,-97,-102,-93,-99,-92,-94,-96,4,-101,-98,-95,4,-107,-106,4,-108,4,-111,-112,-113,4,4,-18,4,4,-144,4,-24,4,4,4,4,4,4,4,4,4,-188,-123,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'IF':([0,3,5,8,13,14,23,26,28,29,38,40,46,49,57,64,78,93,94,101,102,104,111,114,115,116,117,119,120,121,122,123,160,170,178,181,183,189,191,193,200,201,203,207,209,212,215,216,222,224,226,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[5,5,64,5,-5,64,-8,-6,64,-2,-7,-4,64,-133,-3,64,64,64,5,64,5,-143,64,64,-122,-135,-139,-138,-137,-134,-136,-9,5,64,-18,64,5,-144,5,-24,64,64,64,64,64,5,64,5,64,-188,-123,64,64,5,64,64,64,64,5,64,64,64,64,64,5,64,64,5,5,5,5,5,5,5,]),'$end':([3,11,13,23,26,29,38,40,57,115,123,178,193,224,226,],[-1,0,-5,-8,-6,-2,-7,-4,-3,-122,-9,-18,-24,-188,-123,]),'UPPER':([0,3,5,8,13,14,23,26,28,29,38,40,46,49,57,64,71,72,78,81,92,93,94,101,102,104,111,114,115,116,117,119,120,121,122,123,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,178,181,183,189,191,193,200,201,203,207,209,212,215,216,222,224,226,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[34,34,34,34,-5,34,-8,-6,34,-2,-7,-4,34,-133,-3,34,34,34,34,-116,-117,34,34,34,34,-143,34,34,-122,-135,-139,-138,-137,-134,-136,-9,-100,-97,-102,-93,-99,-92,-94,-96,34,-101,-98,-95,34,-107,-106,34,-108,34,-111,-112,-113,34,34,-18,34,34,-144,34,-24,34,34,34,34,34,34,34,34,34,-188,-123,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'FOR':([8,],[100,]),'BY':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,260,268,269,287,303,309,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-77,-160,299,-83,-60,-84,-78,]),'SEMI':([10,12,18,20,22,25,27,28,31,32,33,35,36,39,42,43,51,54,55,58,59,60,61,62,63,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,95,96,98,103,105,106,107,109,110,112,113,118,125,126,127,128,129,130,131,132,134,135,137,139,140,141,144,145,172,175,177,182,184,185,187,188,190,197,199,202,204,210,211,214,217,218,219,223,227,229,230,235,236,238,240,244,257,260,263,266,270,273,277,278,279,287,291,294,297,301,303,306,309,312,317,320,322,324,328,331,333,334,336,337,338,],[-128,-126,-53,-131,-52,-54,-125,-174,-166,-130,-129,115,-167,-124,-127,-17,-56,-10,123,-118,-65,-66,-74,-68,-85,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-19,178,-150,191,-152,-177,-176,193,-25,-173,-175,-132,-35,-37,-29,-28,-12,-38,-32,-44,-33,-30,-43,-34,-36,-31,-121,-115,-168,224,226,-151,-153,-154,-155,-165,-148,-178,-11,-13,-42,-91,-80,-140,-105,-104,-110,-169,-20,-23,-22,-27,-26,-57,-179,-14,-141,-77,292,-21,-163,-149,-40,-39,-45,-83,314,318,-164,-156,-60,-46,-84,-78,329,-158,-162,-157,-189,-159,-198,-191,-190,-199,-192,]),'RPAREN':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,93,114,125,126,127,128,130,131,132,134,135,137,139,140,141,144,145,158,171,172,173,174,197,198,204,210,211,217,218,219,223,225,238,240,242,243,260,261,262,264,277,278,279,280,287,295,296,303,304,305,306,309,312,316,319,326,332,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,172,197,-35,-37,-29,-28,-38,-32,-44,-33,-30,-43,-34,-36,-31,-121,-115,211,-172,-168,223,-170,-178,240,-42,-91,-80,-105,-104,-110,-169,263,-57,-179,277,278,-77,-171,-193,294,-40,-39,-45,172,-83,-196,-195,-60,-41,-172,-46,-84,-78,-194,-197,333,337,]),'SYN':([0,3,13,23,26,29,38,40,57,115,123,178,193,224,226,292,314,315,318,327,329,330,335,],[7,7,-5,-8,-6,-2,-7,-4,-3,-122,-9,-18,-24,-188,-123,7,7,7,7,7,7,7,7,]),'FI':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,104,115,144,145,159,172,189,197,210,211,213,216,217,218,219,223,226,238,240,254,256,260,284,286,287,288,303,309,311,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-143,-122,-121,-115,214,-168,-144,-178,-91,-80,257,-142,-105,-104,-110,-169,-123,-57,-179,287,-145,-77,309,-87,-83,-146,-60,-84,-147,-78,]),'LOC':([43,125,126,127,128,130,131,132,134,135,137,139,140,141,204,277,278,279,295,306,326,],[-17,-35,-37,-29,-28,-38,-32,-44,-33,-30,-43,-34,-36,-31,-42,-40,-39,-45,319,-46,332,]),'NULL':([5,14,28,46,49,64,72,78,81,92,93,101,111,114,116,117,119,120,121,122,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[67,67,67,67,-133,67,67,67,-116,-117,67,67,67,67,-135,-139,-138,-137,-134,-136,-100,-97,-102,-93,-99,-92,-94,-96,67,-101,-98,-95,-107,-106,67,-108,67,-111,-112,-113,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'READ':([0,3,5,8,13,14,23,26,28,29,38,40,46,49,57,64,71,72,78,81,92,93,94,101,102,104,111,114,115,116,117,119,120,121,122,123,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,178,181,183,189,191,193,200,201,203,207,209,212,215,216,222,224,226,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[9,9,9,9,-5,9,-8,-6,9,-2,-7,-4,9,-133,-3,9,9,9,9,-116,-117,9,9,9,9,-143,9,9,-122,-135,-139,-138,-137,-134,-136,-9,-100,-97,-102,-93,-99,-92,-94,-96,9,-101,-98,-95,9,-107,-106,9,-108,9,-111,-112,-113,9,9,-18,9,9,-144,9,-24,9,9,9,9,9,9,9,9,9,-188,-123,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'SCONST':([5,14,28,46,49,64,72,78,81,92,93,101,111,114,116,117,119,120,121,122,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[68,68,68,68,-133,68,68,68,-116,-117,68,68,68,68,-135,-139,-138,-137,-134,-136,-100,-97,-102,-93,-99,-92,-94,-96,68,-101,-98,-95,-107,-106,68,-108,68,-111,-112,-113,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'AND':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,152,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'GEQ':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,150,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'ARROW':([1,5,6,12,14,18,22,25,28,31,36,43,46,49,51,58,64,65,70,72,78,81,92,93,99,101,111,114,116,117,119,120,121,122,144,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,172,181,197,200,201,203,207,209,215,222,223,228,232,237,238,239,240,246,252,253,259,276,280,282,283,299,300,303,],[51,71,-51,-55,71,-53,-52,-54,71,-166,-167,-17,71,-133,-56,51,71,-51,-55,71,71,-116,-117,71,-51,71,71,71,-135,-139,-138,-137,-134,-136,51,-100,-97,-102,-93,-99,-92,-94,-96,71,-101,-98,-95,-107,-106,71,-108,71,-111,-112,-113,71,71,-168,71,-178,71,71,71,71,71,71,71,-169,71,71,71,-57,71,-179,-51,71,71,71,71,71,71,71,71,71,-60,]),'TIMES':([1,6,12,18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,77,79,83,84,85,86,87,88,90,91,99,144,145,172,197,211,217,218,219,223,238,240,246,260,303,312,],[52,-51,-55,-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,-109,-64,-114,-71,-63,166,-72,-69,-62,-73,-51,-121,-115,-168,-178,-80,166,166,-110,-169,-57,-179,-51,-77,-60,-78,]),'WHILE':([8,18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,98,144,145,172,184,185,187,197,210,211,217,218,219,223,238,240,260,270,277,278,287,297,301,303,309,312,320,322,324,331,],[101,-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,101,-121,-115,-168,-153,-154,-155,-178,-91,-80,-105,-104,-110,-169,-57,-179,-77,-163,-40,-39,-83,-164,-156,-60,-84,-78,-158,-162,-157,-159,]),'DO':([0,3,8,13,23,26,29,38,40,57,94,102,104,115,123,160,178,183,189,191,193,212,216,224,226,234,256,292,314,315,318,327,329,330,335,],[8,8,8,-5,-8,-6,-2,-7,-4,-3,8,8,-143,-122,-9,8,-18,8,-144,8,-24,8,8,-188,-123,8,8,8,8,8,8,8,8,8,8,]),'REF':([43,53,56,97,133,192,205,265,281,313,],[-17,-15,133,133,133,133,-16,133,133,133,]),'PLUS':([1,6,12,18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,77,79,82,83,84,85,86,87,88,90,91,99,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[50,-51,-55,-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,-109,-64,162,-114,-71,-63,-103,-72,-69,-62,-73,-51,-121,-115,-168,-178,162,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'RESULT':([0,3,8,13,23,26,29,38,40,57,94,102,104,115,123,160,178,183,189,191,193,212,216,224,226,234,256,292,314,315,318,327,329,330,335,],[14,14,14,-5,-8,-6,-2,-7,-4,-3,14,14,-143,-122,-9,14,-18,14,-144,14,-24,14,14,-188,-123,14,14,14,14,14,14,14,14,14,14,]),'COMMA':([18,22,25,31,36,43,51,53,54,55,56,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,95,96,97,108,109,110,125,126,127,128,129,130,131,132,134,135,137,139,140,141,144,145,171,172,173,174,195,196,197,198,199,202,204,205,210,211,217,218,219,220,221,223,227,229,230,235,236,238,240,244,247,248,249,250,260,261,262,264,265,266,275,277,278,279,287,295,296,303,304,305,306,307,309,312,316,319,],[-53,-52,-54,-166,-167,-17,-56,-15,-10,124,136,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-19,179,136,136,194,-25,-35,-37,-29,-28,-12,-38,-32,-44,-33,-30,-43,-34,-36,-31,-121,-115,-172,-168,222,-170,-58,239,-178,222,-11,-13,-42,-16,-91,-80,-105,-104,-110,-58,239,-169,-20,-23,-22,-27,-26,-57,-179,-14,-50,-47,-49,282,-77,-171,-193,293,136,-21,-59,-40,-39,-45,-83,-196,-195,-60,-41,-172,-46,-48,-84,-78,-194,-197,]),'ELSIF':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,104,115,144,145,159,172,189,197,208,210,211,216,217,218,219,223,226,238,240,251,255,260,287,288,303,309,310,312,325,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-143,-122,-121,-115,215,-168,-144,-178,252,-91,-80,-142,-105,-104,-110,-169,-123,-57,-179,283,-86,-77,-83,215,-60,-84,-88,-78,-89,]),'TYPE':([0,3,13,23,26,29,38,40,57,115,123,178,193,224,226,292,314,315,318,327,329,330,335,],[16,16,-5,-8,-6,-2,-7,-4,-3,-122,-9,-18,-24,-188,-123,16,16,16,16,16,16,16,16,]),'ABS':([0,3,5,8,13,14,23,26,28,29,38,40,46,49,57,64,71,72,78,81,92,93,94,101,102,104,111,114,115,116,117,119,120,121,122,123,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,178,181,183,189,191,193,200,201,203,207,209,212,215,216,222,224,226,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[17,17,17,17,-5,17,-8,-6,17,-2,-7,-4,17,-133,-3,17,17,17,17,-116,-117,17,17,17,17,-143,17,17,-122,-135,-139,-138,-137,-134,-136,-9,-100,-97,-102,-93,-99,-92,-94,-96,17,-101,-98,-95,17,-107,-106,17,-108,17,-111,-112,-113,17,17,-18,17,17,-144,17,-24,17,17,17,17,17,17,17,17,17,-188,-123,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'CHAR':([43,53,56,97,133,192,205,207,233,265,267,281,282,313,],[-17,-15,130,130,130,130,-16,130,130,130,130,130,130,130,]),'GT':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,156,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'THEN':([18,22,25,31,36,43,51,58,59,60,61,62,63,65,66,67,68,69,70,73,74,75,76,77,79,80,82,83,84,85,86,87,88,90,91,143,144,145,172,197,210,211,217,218,219,223,238,240,258,260,285,287,303,308,309,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-85,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,160,-90,-114,-71,-63,-103,-72,-69,-62,-73,209,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,160,-77,209,-83,-60,209,-84,-78,]),'EQ':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,153,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'EXIT':([0,3,8,13,23,26,29,38,40,57,94,102,104,115,123,160,178,183,189,191,193,212,216,224,226,234,256,292,314,315,318,327,329,330,335,],[21,21,21,-5,-8,-6,-2,-7,-4,-3,21,21,-143,-122,-9,21,-18,21,-144,21,-24,21,21,-188,-123,21,21,21,21,21,21,21,21,21,21,]),'LENGTH':([0,3,5,8,13,14,23,26,28,29,38,40,46,49,57,64,71,72,78,81,92,93,94,101,102,104,111,114,115,116,117,119,120,121,122,123,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,178,181,183,189,191,193,200,201,203,207,209,212,215,216,222,224,226,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[24,24,24,24,-5,24,-8,-6,24,-2,-7,-4,24,-133,-3,24,24,24,24,-116,-117,24,24,24,24,-143,24,24,-122,-135,-139,-138,-137,-134,-136,-9,-100,-97,-102,-93,-99,-92,-94,-96,24,-101,-98,-95,24,-107,-106,24,-108,24,-111,-112,-113,24,24,-18,24,24,-144,24,-24,24,24,24,24,24,24,24,24,24,-188,-123,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'IN':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,186,197,210,211,217,218,219,223,231,238,240,246,260,303,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,148,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,233,-178,-91,-80,-105,-104,-110,-169,267,-57,-179,-51,-77,-60,-78,]),'END':([13,23,26,29,38,40,57,115,123,178,193,224,226,315,327,330,335,],[-5,-8,-6,-2,-7,-4,-3,-122,-9,-18,-24,-188,-123,328,334,336,338,]),'RETURNS':([263,294,],[290,290,]),'RETURN':([0,3,8,13,23,26,29,38,40,57,94,102,104,115,123,160,178,183,189,191,193,212,216,224,226,234,256,292,314,315,318,327,329,330,335,],[28,28,28,-5,-8,-6,-2,-7,-4,-3,28,28,-143,-122,-9,28,-18,28,-144,28,-24,28,28,-188,-123,28,28,28,28,28,28,28,28,28,28,]),'ICONST':([5,14,28,46,49,64,72,78,81,92,93,101,111,114,116,117,119,120,121,122,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,181,200,201,203,206,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[84,84,84,84,-133,84,84,84,-116,-117,84,84,84,84,-135,-139,-138,-137,-134,-136,-100,-97,-102,-93,-99,-92,-94,-96,84,-101,-98,-95,-107,-106,84,-108,84,-111,-112,-113,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'EQUALS':([1,6,12,18,22,25,31,36,43,44,45,47,48,50,51,52,53,65,97,99,108,125,126,127,128,129,130,131,132,134,135,137,139,140,141,172,180,186,197,204,205,223,238,240,277,278,279,303,306,],[49,-51,-55,-53,-52,-54,-166,-167,-17,116,117,119,120,121,-56,122,-15,-51,181,-51,192,-35,-37,-29,-28,203,-38,-32,-44,-33,-30,-43,-34,-36,-31,-168,228,232,-178,-42,-16,-169,-57,-179,-40,-39,-45,-60,-46,]),'OD':([102,104,115,189,226,234,],[190,-143,-122,-144,-123,273,]),'INT':([43,53,56,97,133,192,205,207,233,265,267,281,282,313,],[-17,-15,140,140,140,140,-16,140,140,140,140,140,140,140,]),'NE':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,147,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'OR':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,157,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'LPAREN':([4,5,6,9,14,15,17,24,28,30,34,37,41,43,46,49,64,65,72,78,81,92,93,99,101,111,114,116,117,119,120,121,122,125,126,127,128,130,131,134,139,140,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,176,181,200,201,203,207,209,215,222,228,232,237,239,246,249,252,253,259,270,271,272,276,277,278,280,282,283,290,297,299,300,],[-187,78,93,-186,78,-184,-180,-185,78,114,-183,-182,-181,-17,78,-133,78,93,78,78,-116,-117,78,93,78,78,78,-135,-139,-138,-137,-134,-136,-35,-37,200,201,-38,-32,-33,-34,-36,-100,-97,-102,-93,-99,-92,-94,-96,78,-101,-98,-95,-107,-106,78,-108,78,-111,-112,-113,78,78,225,78,78,78,78,78,78,78,78,78,78,78,78,280,200,78,78,78,-35,200,201,78,-40,-39,78,78,78,313,-35,78,78,]),'FALSE':([5,14,28,46,49,64,72,78,81,92,93,101,111,114,116,117,119,120,121,122,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[87,87,87,87,-133,87,87,87,-116,-117,87,87,87,87,-135,-139,-138,-137,-134,-136,-100,-97,-102,-93,-99,-92,-94,-96,87,-101,-98,-95,-107,-106,87,-108,87,-111,-112,-113,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'DOWN':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,186,197,210,211,217,218,219,223,238,240,260,268,269,287,302,303,309,312,321,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,231,-178,-91,-80,-105,-104,-110,-169,-57,-179,-77,-160,298,-83,323,-60,-84,-78,-161,]),'MINUS':([1,5,6,12,14,18,22,25,28,31,36,43,46,49,51,58,59,60,61,62,64,65,66,67,68,69,70,74,75,77,78,79,82,83,84,85,86,87,88,90,91,93,99,101,111,114,116,117,119,120,121,122,144,145,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,172,181,197,200,201,203,207,209,210,211,215,217,218,219,222,223,228,232,237,238,239,240,246,252,253,259,260,276,280,282,283,299,300,303,312,],[44,81,-51,-55,81,-53,-52,-54,81,-166,-167,-17,81,-133,-56,-118,-65,-66,-74,-68,81,-51,-67,-75,-76,-70,-55,-120,-119,-109,81,-64,161,-114,-71,-63,-103,-72,-69,-62,-73,81,-51,81,81,81,-135,-139,-138,-137,-134,-136,-121,-115,-100,-97,-102,-93,-99,-92,-94,-96,81,-101,-98,-95,-107,-106,81,-108,81,-111,-112,-113,81,81,-168,81,-178,81,81,81,81,81,161,-80,81,-105,-104,-110,81,-169,81,81,81,-57,81,-179,-51,81,81,81,-77,81,81,81,81,81,81,-60,-78,]),'PROC':([94,],[176,]),'DCL':([0,3,13,23,26,29,38,40,57,115,123,178,193,224,226,292,314,315,318,327,329,330,335,],[2,2,-5,-8,-6,-2,-7,-4,-3,-122,-9,-18,-24,-188,-123,2,2,2,2,2,2,2,2,]),'NUM':([0,3,5,8,13,14,23,26,28,29,38,40,46,49,57,64,71,72,78,81,92,93,94,101,102,104,111,114,115,116,117,119,120,121,122,123,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,178,181,183,189,191,193,200,201,203,207,209,212,215,216,222,224,226,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[37,37,37,37,-5,37,-8,-6,37,-2,-7,-4,37,-133,-3,37,37,37,37,-116,-117,37,37,37,37,-143,37,37,-122,-135,-139,-138,-137,-134,-136,-9,-100,-97,-102,-93,-99,-92,-94,-96,37,-101,-98,-95,37,-107,-106,37,-108,37,-111,-112,-113,37,37,-18,37,37,-144,37,-24,37,37,37,37,37,37,37,37,37,-188,-123,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'CHARS':([43,53,56,97,133,192,205,265,281,313,],[-17,-15,138,138,138,138,-16,138,138,138,]),'COLON':([6,18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,79,82,83,84,85,86,87,88,90,91,99,144,145,172,195,197,210,211,217,218,219,220,223,238,240,241,246,260,287,303,305,309,312,],[94,-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-82,-120,-119,-81,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,183,-121,-115,-168,237,-178,-91,-80,-105,-104,-110,259,-169,-57,-179,276,-51,-77,-83,-60,276,-84,-78,]),'ARRAY':([43,53,56,97,133,192,205,265,281,313,],[-17,-15,142,142,142,142,-16,142,142,142,]),'MODULO':([1,6,12,18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,77,79,83,84,85,86,87,88,90,91,99,144,145,172,197,211,217,218,219,223,238,240,246,260,303,312,],[47,-51,-55,-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,-109,-64,-114,-71,-63,168,-72,-69,-62,-73,-51,-121,-115,-168,-178,-80,168,168,-110,-169,-57,-179,-51,-77,-60,-78,]),'ID':([0,2,3,5,7,8,13,14,16,21,23,26,28,29,38,40,43,46,49,53,56,57,64,71,72,78,81,92,93,94,97,100,101,102,104,111,114,115,116,117,119,120,121,122,123,124,133,136,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,178,179,181,183,189,191,192,193,194,200,201,203,205,207,209,212,215,216,222,224,225,226,228,232,233,234,237,239,252,253,256,259,265,267,276,280,281,282,283,292,293,299,300,313,314,315,318,327,329,330,335,],[43,43,43,43,43,43,-5,43,43,43,-8,-6,43,-2,-7,-4,-17,43,-133,-15,43,-3,43,43,43,43,-116,-117,43,43,43,43,43,43,-143,43,43,-122,-135,-139,-138,-137,-134,-136,-9,43,43,43,-100,-97,-102,-93,-99,-92,-94,-96,43,-101,-98,-95,43,-107,-106,43,-108,43,-111,-112,-113,43,43,-18,43,43,43,-144,43,43,-24,43,43,43,43,-16,43,43,43,43,43,43,-188,43,-123,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'TRUE':([5,14,28,46,49,64,72,78,81,92,93,101,111,114,116,117,119,120,121,122,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[91,91,91,91,-133,91,91,91,-116,-117,91,91,91,91,-135,-139,-138,-137,-134,-136,-100,-97,-102,-93,-99,-92,-94,-96,91,-101,-98,-95,-107,-106,91,-108,91,-111,-112,-113,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'NOT':([5,14,28,46,49,64,78,93,101,111,114,116,117,119,120,121,122,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[92,92,92,92,-133,92,92,92,92,92,92,-135,-139,-138,-137,-134,-136,-100,-97,-102,-93,-99,-92,-94,-96,92,-101,-98,-95,-107,-106,92,-108,92,-111,-112,-113,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'LEQ':([18,22,25,31,36,43,51,58,59,60,61,62,65,66,67,68,69,70,74,75,76,77,79,82,83,84,85,86,87,88,90,91,144,145,172,197,210,211,217,218,219,223,238,240,246,260,303,312,],[-53,-52,-54,-166,-167,-17,-56,-118,-65,-66,-74,-68,-51,-67,-75,-76,-70,-55,-120,-119,155,-109,-64,-90,-114,-71,-63,-103,-72,-69,-62,-73,-121,-115,-168,-178,-91,-80,-105,-104,-110,-169,-57,-179,-51,-77,-60,-78,]),'ASC':([0,3,5,8,13,14,23,26,28,29,38,40,46,49,57,64,71,72,78,81,92,93,94,101,102,104,111,114,115,116,117,119,120,121,122,123,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,178,181,183,189,191,193,200,201,203,207,209,212,215,216,222,224,226,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[41,41,41,41,-5,41,-8,-6,41,-2,-7,-4,41,-133,-3,41,41,41,41,-116,-117,41,41,41,41,-143,41,41,-122,-135,-139,-138,-137,-134,-136,-9,-100,-97,-102,-93,-99,-92,-94,-96,41,-101,-98,-95,41,-107,-106,41,-108,41,-111,-112,-113,41,41,-18,41,41,-144,41,-24,41,41,41,41,41,41,41,41,41,-188,-123,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'CCONST':([5,14,28,46,49,64,72,78,81,92,93,101,111,114,116,117,119,120,121,122,146,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[61,61,61,61,-133,61,61,61,-116,-117,61,61,61,61,-135,-139,-138,-137,-134,-136,-100,-97,-102,-93,-99,-92,-94,-96,61,-101,-98,-95,-107,-106,61,-108,61,-111,-112,-113,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'for_control':([8,],[98,]),'else_expression':([208,251,],[254,284,]),'integer_literal':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,206,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,245,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'statement_list':([0,292,314,318,329,],[3,315,327,330,335,]),'character_literal':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'value_array_slice':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'identifier':([0,2,3,5,7,8,14,16,21,28,46,56,64,71,72,78,93,94,97,100,101,102,111,114,124,133,136,154,160,163,165,169,170,179,181,183,191,192,194,200,201,203,207,209,212,215,216,222,225,228,232,233,234,237,239,252,253,256,259,265,267,276,280,281,282,283,292,293,299,300,313,314,315,318,327,329,330,335,],[6,53,6,65,53,99,65,53,112,65,65,128,65,65,65,65,65,65,128,186,65,99,65,65,53,128,205,65,99,65,65,65,65,53,65,65,99,128,53,65,65,65,246,65,99,65,99,65,53,65,65,272,99,65,65,65,65,99,65,128,272,65,65,128,246,65,6,53,65,65,128,6,6,6,6,6,6,6,]),'boolean_literal':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'identifier_list':([2,7,16,124,179,194,225,293,],[56,97,108,56,97,108,265,265,]),'mode':([56,97,133,192,265,281,313,],[129,180,204,235,295,306,326,]),'boolean_mode':([56,97,133,192,207,233,265,267,281,282,313,],[134,134,134,134,134,134,134,134,134,134,134,]),'index_mode':([207,282,],[248,307,]),'start_value':([232,],[269,]),'value_array_element':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'operand1':([5,14,28,46,64,78,93,101,111,114,154,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[82,82,82,82,82,82,82,82,82,82,210,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'literal_range':([200,201,207,280,282,],[242,243,247,243,247,]),'monadic_operator':([5,14,28,46,64,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'synonym_statement':([0,3,292,314,315,318,327,329,330,335,],[13,13,13,13,13,13,13,13,13,13,]),'string_mode':([56,97,133,192,265,281,313,],[137,137,137,137,137,137,137,]),'assigning_operator':([1,],[46,]),'formal_parameter_list':([225,],[264,]),'operator1':([76,],[154,]),'parameter':([93,114,222,280,],[174,174,261,174,]),'exit_action':([0,3,8,94,102,160,183,191,212,216,234,256,292,314,315,318,327,329,330,335,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'formal_parameter':([225,293,],[262,316,]),'operand3':([5,14,28,46,64,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[77,77,77,77,77,77,77,77,77,77,77,77,77,219,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'array_location':([0,3,5,8,14,28,46,64,71,72,78,93,94,101,102,111,114,154,160,163,165,169,170,181,183,191,200,201,203,207,209,212,215,216,222,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'declaration_list':([2,],[55,]),'relational_operator':([76,],[151,]),'discrete_mode':([56,97,133,192,207,233,265,267,281,282,313,],[127,127,127,127,249,271,127,271,127,249,127,]),'dereferenced_reference':([0,3,5,8,14,28,46,64,71,72,78,93,94,101,102,111,114,154,160,163,165,169,170,181,183,191,200,201,203,207,209,212,215,216,222,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'arithmetic_multiplicative_operator':([86,217,218,],[169,169,169,]),'mode_definition':([16,194,],[110,236,]),'procedure_call':([0,3,5,8,14,28,46,64,71,72,78,93,94,101,102,111,114,154,160,163,165,169,170,181,183,191,200,201,203,207,209,212,215,216,222,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'result_action':([0,3,8,94,102,160,183,191,212,216,234,256,292,314,315,318,327,329,330,335,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'newmode_list':([16,],[109,]),'assignment_action':([0,3,8,94,102,160,183,191,212,216,234,256,292,314,315,318,327,329,330,335,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'character_mode':([56,97,133,192,207,233,265,267,281,282,313,],[139,139,139,139,139,139,139,139,139,139,139,]),'synonym_list':([7,],[96,]),'statement':([0,3,292,314,315,318,327,329,330,335,],[29,57,29,29,57,29,57,29,57,57,]),'result_spec':([263,294,],[291,317,]),'then_expression':([143,285,308,],[208,310,325,]),'operand2':([5,14,28,46,64,78,93,101,111,114,154,163,165,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[86,86,86,86,86,86,86,86,86,86,86,217,218,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'composite_mode':([56,97,133,192,265,281,313,],[141,141,141,141,141,141,141,]),'parameter_spec':([265,],[296,]),'action':([0,3,8,94,102,160,183,191,212,216,234,256,292,314,315,318,327,329,330,335,],[35,35,35,177,35,35,177,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'builtin_call':([0,3,5,8,14,28,46,64,71,72,78,93,94,101,102,111,114,154,160,163,165,169,170,181,183,191,200,201,203,207,209,212,215,216,222,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'reference_mode':([56,97,133,192,265,281,313,],[135,135,135,135,135,135,135,]),'procedure_statement':([0,3,292,314,315,318,327,329,330,335,],[38,38,38,38,38,38,38,38,38,38,]),'then_clause':([80,258,],[159,288,]),'integer_mode':([56,97,133,192,207,233,265,267,281,282,313,],[131,131,131,131,131,131,131,131,131,131,131,]),'array_primitive_value':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'else_clause':([159,288,],[213,311,]),'array_element':([0,3,5,8,14,28,46,64,71,72,78,93,94,101,102,111,114,154,160,163,165,169,170,181,183,191,200,201,203,207,209,212,215,216,222,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'literal':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'declaration':([2,124,],[54,199,]),'location':([0,3,5,8,14,28,46,64,71,72,78,93,94,101,102,111,114,154,160,163,165,169,170,181,183,191,200,201,203,207,209,212,215,216,222,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[1,1,58,1,58,58,58,58,144,58,58,58,1,58,1,58,58,58,1,58,58,58,58,58,1,1,58,58,58,58,58,1,58,1,58,58,58,1,58,58,58,58,1,58,58,58,58,58,1,58,58,1,1,1,1,1,1,1,]),'elsif_expression':([208,],[251,]),'parenthesized_expression':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'list_index_mode':([207,],[250,]),'expression':([5,14,28,46,64,78,93,101,111,114,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[63,106,106,118,63,158,171,63,195,171,220,229,241,241,244,241,255,63,171,229,268,274,275,63,286,289,304,305,241,63,321,322,]),'initialization':([129,],[202,]),'while_control':([8,98,],[105,182,]),'array_slice':([0,3,5,8,14,28,46,64,71,72,78,93,94,101,102,111,114,154,160,163,165,169,170,181,183,191,200,201,203,207,209,212,215,216,222,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'array_mode':([56,97,133,192,265,281,313,],[132,132,132,132,132,132,132,]),'primitive_value':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'procedure_definition':([94,],[175,]),'character_string_literal':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'return_action':([0,3,8,94,102,160,183,191,212,216,234,256,292,314,315,318,327,329,330,335,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'empty_literal':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'action_statement_list':([8,160,191,212,],[102,216,234,256,]),'result':([14,28,],[107,113,]),'step_value':([269,],[302,]),'conditional_expression':([5,14,28,46,64,78,93,101,111,114,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'bracketed_action':([0,3,8,94,102,160,183,191,212,216,234,256,292,314,315,318,327,329,330,335,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'parameter_list':([93,114,280,],[173,198,173,]),'referenced_location':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'operand0':([5,14,28,46,64,78,93,101,111,114,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'do_action':([0,3,8,94,102,160,183,191,212,216,234,256,292,314,315,318,327,329,330,335,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'synonym_definition':([7,179,],[95,227,]),'discrete_range_mode':([56,97,133,192,207,233,265,267,281,282,313,],[125,125,125,125,125,270,125,297,125,125,125,]),'membership_operator':([76,],[149,]),'boolean_expression':([5,64,101,215,252,283,],[80,143,188,258,285,308,]),'expression_list':([111,170,],[196,221,]),'newmode_statement':([0,3,292,314,315,318,327,329,330,335,],[26,26,26,26,26,26,26,26,26,26,]),'operand4':([5,14,28,46,64,72,78,93,101,111,114,154,163,165,169,170,181,200,201,203,207,209,215,222,228,232,237,239,252,253,259,276,280,282,283,299,300,],[83,83,83,83,83,145,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'builtin_name':([0,3,5,8,14,28,46,64,71,72,78,93,94,101,102,111,114,154,160,163,165,169,170,181,183,191,200,201,203,207,209,212,215,216,222,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'action_statement':([0,3,8,102,160,191,212,216,234,256,292,314,315,318,327,329,330,335,],[23,23,104,189,104,104,104,189,189,189,23,23,23,23,23,23,23,23,]),'if_action':([0,3,8,94,102,160,183,191,212,216,234,256,292,314,315,318,327,329,330,335,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'iteration':([100,],[184,]),'program':([0,],[11,]),'string_concatenation_operator':([82,210,],[163,163,]),'step_enumeration':([100,],[185,]),'end_value':([269,298,302,323,],[301,320,324,331,]),'range_enumeration':([100,],[187,]),'declaration_statement':([0,3,292,314,315,318,327,329,330,335,],[40,40,40,40,40,40,40,40,40,40,]),'call_action':([0,3,5,8,14,28,46,64,71,72,78,93,94,101,102,111,114,154,160,163,165,169,170,181,183,191,200,201,203,207,209,212,215,216,222,228,232,234,237,239,252,253,256,259,276,280,282,283,292,299,300,314,315,318,327,329,330,335,],[12,12,70,12,70,70,70,70,70,70,70,70,12,70,12,70,70,70,12,70,70,70,70,70,12,12,70,70,70,70,70,12,70,12,70,70,70,12,70,70,70,70,12,70,70,70,70,70,12,70,70,12,12,12,12,12,12,12,]),'control_part':([8,],[103,]),'constant_expression':([181,228,],[230,266,]),'arithmetic_additive_operator':([82,210,],[165,165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',18),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',23),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',36),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',41),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',46),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',47),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',56),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',57),
  ('initialization -> EQUALS expression','initialization',2,'p_initialization','parser.py',67),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',74),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',75),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',83),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',89),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',96),
  ('synonym_list -> synonym_list COMMA synonym_definition','synonym_list',3,'p_synonym_list','parser.py',97),
  ('synonym_definition -> identifier_list mode EQUALS constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list EQUALS constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',118),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',124),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',131),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',132),
  ('mode_definition -> identifier_list EQUALS mode','mode_definition',3,'p_mode_definition','parser.py',141),
  ('mode -> identifier','mode',1,'p_mode','parser.py',148),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',149),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',150),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',151),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',158),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',159),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',160),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',161),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',168),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',175),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',182),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',189),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',190),
  ('literal_range -> expression COLON expression','literal_range',3,'p_literal_range','parser.py',196),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',203),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',209),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',210),
  ('string_mode -> CHARS LBRACKET integer_literal RBRACKET','string_mode',4,'p_string_mode','parser.py',215),
  ('array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode','array_mode',5,'p_array_mode','parser.py',222),
  ('list_index_mode -> index_mode','list_index_mode',1,'p_list_index_mode','parser.py',228),
  ('list_index_mode -> list_index_mode COMMA index_mode','list_index_mode',3,'p_list_index_mode','parser.py',229),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',237),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',238),
  ('location -> identifier','location',1,'p_location','parser.py',244),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',245),
  ('location -> array_element','location',1,'p_location','parser.py',246),
  ('location -> array_slice','location',1,'p_location','parser.py',247),
  ('location -> call_action','location',1,'p_location','parser.py',248),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',258),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',295),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',302),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',303),
  ('array_slice -> array_location LBRACKET expression COLON expression RBRACKET','array_slice',6,'p_array_slice','parser.py',312),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',319),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',325),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',326),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',327),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',328),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',335),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',336),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',337),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',338),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',339),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',346),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',353),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',354),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',361),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',368),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',375),
  ('value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','parser.py',382),
  ('value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',389),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',396),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',402),
  ('expression -> operand0','expression',1,'p_expression','parser.py',409),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',410),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',417),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',418),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',428),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',435),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',442),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',449),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',450),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',461),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',462),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',473),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',474),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> EQ','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> NE','relational_operator',1,'p_relational_operator','parser.py',483),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','parser.py',484),
  ('relational_operator -> GEQ','relational_operator',1,'p_relational_operator','parser.py',485),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','parser.py',486),
  ('relational_operator -> LEQ','relational_operator',1,'p_relational_operator','parser.py',487),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',494),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',501),
  ('operand1 -> operand1 arithmetic_additive_operator operand2','operand1',3,'p_operand1','parser.py',502),
  ('operand1 -> operand1 string_concatenation_operator operand2','operand1',3,'p_operand1','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',514),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',515),
  ('string_concatenation_operator -> LAND','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',522),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',529),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',530),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',541),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',542),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',543),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',549),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',550),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',561),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',562),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',569),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',570),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',571),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',578),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',585),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','parser.py',586),
  ('action -> bracketed_action','action',1,'p_action','parser.py',597),
  ('action -> assignment_action','action',1,'p_action','parser.py',598),
  ('action -> call_action','action',1,'p_action','parser.py',599),
  ('action -> exit_action','action',1,'p_action','parser.py',600),
  ('action -> return_action','action',1,'p_action','parser.py',601),
  ('action -> result_action','action',1,'p_action','parser.py',602),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',609),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',610),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',617),
  ('assigning_operator -> EQUALS','assigning_operator',1,'p_assigning_operator','parser.py',624),
  ('assigning_operator -> PLUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',625),
  ('assigning_operator -> MINUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',626),
  ('assigning_operator -> TIMES EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',627),
  ('assigning_operator -> DIVIDE EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',628),
  ('assigning_operator -> MODULO EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',629),
  ('assigning_operator -> LAND EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',630),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',639),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',640),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',650),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',656),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',657),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',665),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',666),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',667),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',679),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',680),
  ('control_part -> for_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',692),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','parser.py',702),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',709),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',710),
  ('step_enumeration -> identifier EQUALS start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',718),
  ('step_enumeration -> identifier EQUALS start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',719),
  ('step_enumeration -> identifier EQUALS start_value DOWN end_value','step_enumeration',5,'p_step_enumeration','parser.py',720),
  ('step_enumeration -> identifier EQUALS start_value step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','parser.py',721),
  ('start_value -> expression','start_value',1,'p_start_value','parser.py',736),
  ('step_value -> BY expression','step_value',2,'p_step_value','parser.py',742),
  ('end_value -> TO expression','end_value',2,'p_end_value','parser.py',748),
  ('range_enumeration -> identifier IN discrete_range_mode','range_enumeration',3,'p_range_enumeration','parser.py',754),
  ('range_enumeration -> identifier DOWN IN discrete_range_mode','range_enumeration',4,'p_range_enumeration','parser.py',755),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',766),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',773),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',774),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',781),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',782),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',791),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',792),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',801),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','parser.py',807),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',814),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',815),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',824),
  ('result -> expression','result',1,'p_result','parser.py',831),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',837),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',838),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',849),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',850),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',851),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',852),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',853),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',854),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',855),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',856),
  ('procedure_statement -> identifier COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',862),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END','procedure_definition',6,'p_procedure_definition','parser.py',869),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',870),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',871),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END','procedure_definition',8,'p_procedure_definition','parser.py',872),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',887),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',888),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',897),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',904),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',905),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',915),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',916),
]
