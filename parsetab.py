
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGEQLTLEQleftPLUSMINUSleftTIMESDIVIDEMODULOID ICONST CCONST SCONST PLUS MINUS TIMES DIVIDE MODULO EQUALS SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET AND LAND OR EQ NE GT GEQ LT LEQ COLON COMMA NOT DCL REF UPPER LOWER PRINT BOOL END TO NULL BY OD CHARS RETURNS ASC EXIT SYN THEN ARRAY ELSIF READ TRUE LOC WHILE DO ELSE RETURN RESULT CHAR PROC FOR INT IN TYPE LENGTH NUM DOWN IF FI FALSE ABSprogram : statement_liststatement_list : statement\n                          | statement_list statement\n        statement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statement\n        declaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declaration\n        declaration : identifier_list mode \n                       | identifier_list mode initialization\n        initialization : EQUALS expression\n        identifier_list : identifier\n                           | identifier_list COMMA identifier\n        identifier : ID  synonym_statement : SYN synonym_list SEMI\n         synonym_list : synonym_definition \n                         | synonym_list COMMA synonym_definition\n         synonym_definition : identifier_list mode EQUALS constant_expression\n                               | identifier_list EQUALS constant_expression\n         constant_expression : expression\n         newmode_statement : TYPE newmode_list SEMI\n         newmode_list : mode_definition \n                         | newmode_list COMMA mode_definition\n         mode_definition : identifier_list EQUALS mode\n         mode : identifier\n                 | discrete_mode\n                 | reference_mode\n                 | composite_mode\n         discrete_mode : integer_mode\n                          | boolean_mode\n                          | character_mode\n                          | discrete_range_mode\n         integer_mode : INT\n         boolean_mode : BOOL\n         character_mode : CHAR\n         discrete_range_mode : identifier LPAREN literal_range RPAREN\n                                | discrete_mode LPAREN literal_range RPAREN\n         literal_range : expression COLON expression\n         reference_mode : REF mode\n         composite_mode : string_mode\n                           | array_mode\n         string_mode : CHARS LBRACKET literal RBRACKET\n         array_mode : ARRAY LBRACKET list_index_mode RBRACKET mode\n         list_index_mode : index_mode\n                            | list_index_mode COMMA index_mode\n         index_mode : discrete_mode\n                       | literal_range\n         location : identifier\n                     | dereferenced_reference\n                     | array_element\n                     | array_slice\n                     | call_action\n                     | string_slice\n                     | string_element\n         dereferenced_reference : location ARROW\n         string_element : identifier LBRACKET start_element RBRACKET\n         start_element : expression\n         string_slice : identifier LBRACKET left_element COLON right_element RBRACKET \n         left_element : expression\n         right_element : expression\n         array_element : array_location LBRACKET expression_list RBRACKET\n         expression_list : expression\n                            | expression_list COMMA expression\n         array_slice : array_location LBRACKET expression COLON expression RBRACKET\n         array_location : location\n         primitive_value : literal\n                            | value_array_element\n                            | value_array_slice\n                            | parenthesized_expression\n         literal : integer_literal\n                    | boolean_literal\n                    | character_literal\n                    | empty_literal\n                    | character_string_literal\n         integer_literal : ICONST\n         boolean_literal : FALSE\n                            | TRUE\n         character_literal : CCONST\n         empty_literal : NULL\n         character_string_literal : SCONST\n         value_array_element : array_primitive_value LBRACKET expression_list RBRACKET\n         value_array_slice : array_primitive_value LBRACKET expression COLON expression RBRACKET\n         array_primitive_value : primitive_value\n         parenthesized_expression : LPAREN expression RPAREN\n         expression : operand0\n                       | conditional_expression\n         conditional_expression : IF boolean_expression then_expression else_expression FI\n                                   | IF boolean_expression then_expression elsif_expression else_expression FI\n         boolean_expression : expression\n         then_expression : THEN expression\n         else_expression : ELSE expression\n         elsif_expression : ELSIF boolean_expression then_expression\n                             | elsif_expression ELSIF boolean_expression then_expression\n         operand0 : operand1\n                     | operand0 operator1 operand1\n         operator1 : relational_operator\n                      | membership_operator\n         relational_operator : AND\n                                | OR \n                                | EQ \n                                | NE\n                                | GT\n                                | GEQ\n                                | LT\n                                | LEQ\n         membership_operator : IN\n         operand1 : operand2\n                     | operand1 arithmetic_additive_operator operand2\n                     | operand1 string_concatenation_operator operand2\n         arithmetic_additive_operator : PLUS\n                                         | MINUS\n         string_concatenation_operator : LAND\n         operand2 : operand3 \n                     | operand2 arithmetic_multiplicative_operator operand3\n         arithmetic_multiplicative_operator : TIMES\n                                               | DIVIDE\n                                               | MODULO \n         operand3 : operand4\n                     | monadic_operator operand4\n         monadic_operator : MINUS\n                             | NOT \n         operand4 : location\n                     | referenced_location\n                     | primitive_value\n         referenced_location : ARROW location\n         action_statement : action SEMI\n                             | identifier COLON action SEMI\n         action : bracketed_action\n                   | assignment_action\n                   | call_action\n                   | exit_action\n                   | return_action\n                   | result_action\n         bracketed_action : if_action\n                             | do_action\n         assignment_action : location assigning_operator expression\n         assigning_operator : EQUALS\n                               | PLUS EQUALS\n                               | MINUS EQUALS\n                               | TIMES EQUALS\n                               | DIVIDE EQUALS\n                               | MODULO EQUALS\n                               | LAND EQUALS\n         if_action : IF boolean_expression then_clause FI\n                      | IF boolean_expression then_clause else_clause FI\n         then_clause : THEN action_statement_list\n        action_statement_list : action_statement\n                                 | action_statement_list action_statement\n         else_clause : ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause \n                        | ELSIF boolean_expression then_clause else_clause\n         do_action : DO action_statement_list OD\n                      | DO control_part SEMI action_statement_list OD\n         control_part : for_control \n                         | for_control while_control\n                         | while_control\n         for_control : FOR iteration\n         iteration : step_enumeration\n                      | range_enumeration\n         step_enumeration : identifier EQUALS start_value end_value\n                             | identifier EQUALS start_value step_value end_value\n                             | identifier EQUALS start_value DOWN end_value\n                             | identifier EQUALS start_value step_value DOWN end_value\n         start_value : expression\n         step_value : BY expression\n         end_value : TO expression\n         range_enumeration : identifier IN discrete_mode\n                              | identifier DOWN IN discrete_mode\n         while_control : WHILE boolean_expression\n         call_action : procedure_call\n                        | builtin_call\n         procedure_call : identifier LPAREN  RPAREN\n                           | identifier LPAREN parameter_list RPAREN\n         parameter_list : parameter\n                           | parameter_list COMMA parameter\n         parameter : expression\n         exit_action : EXIT identifier\n         return_action : RETURN \n                          | RETURN result\n         result_action : RESULT result\n         result : expression\n         builtin_call : builtin_name LPAREN RPAREN\n                         | builtin_name LPAREN parameter_list RPAREN\n         builtin_name : ABS\n                         | ASC\n                         | NUM\n                         | UPPER\n                         | LOWER\n                         | LENGTH\n                         | READ\n                         | PRINT\n         procedure_statement : identifier COLON procedure_definition SEMI\n         procedure_definition : PROC LPAREN RPAREN SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END\n                                 | PROC LPAREN RPAREN result_spec SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END\n         formal_parameter_list : formal_parameter \n                                  | formal_parameter_list COMMA formal_parameter\n         formal_parameter : identifier_list parameter_spec\n         parameter_spec : mode \n                           | mode LOC\n         result_spec : RETURNS LPAREN mode RPAREN\n                        | RETURNS LPAREN mode LOC RPAREN\n        '
    
_lr_action_items = {'ELSE':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,103,107,112,144,146,176,188,195,205,215,216,219,220,222,223,230,234,235,241,244,245,260,262,263,298,306,313,314,319,321,322,336,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,-150,-129,-58,-122,-128,-175,-151,-185,246,-111,-112,-98,-87,264,-117,-130,-176,-59,-64,-186,-149,-84,-93,264,-90,-61,-67,246,-85,-91,-95,-96,]),'NUM':([0,2,6,9,14,19,21,30,36,40,41,43,50,54,57,61,77,80,82,94,95,96,99,102,103,105,106,107,108,114,119,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,166,169,170,188,189,192,198,199,200,201,202,203,204,208,210,212,214,221,226,230,231,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[11,-2,11,11,-5,11,-7,11,-6,11,-8,-4,-3,-123,11,11,-124,11,11,11,11,11,11,11,-150,11,11,-129,11,-140,-9,-113,11,11,-115,-114,11,11,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,11,-120,-24,11,-18,-151,11,11,-144,-141,-146,-142,-143,-145,11,11,11,11,11,11,11,-130,-195,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'SEMI':([1,3,5,8,9,15,18,20,22,25,26,27,29,34,35,38,42,45,46,47,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,81,83,84,85,87,88,89,90,92,93,98,101,104,112,118,121,122,124,126,127,128,129,130,131,132,133,134,137,138,144,146,173,174,176,183,184,186,187,190,191,195,197,206,209,211,215,216,219,220,223,224,225,227,228,229,234,235,241,244,248,252,260,267,270,276,280,285,286,288,289,298,302,305,306,307,312,313,316,319,321,326,331,333,334,339,342,343,346,347,348,349,],[-137,-173,-54,-138,-181,-134,-53,-135,-52,-174,-136,-133,-132,-17,107,-57,-131,-56,119,-10,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-184,-79,-73,-125,-182,-80,-110,-25,166,-180,-183,-19,170,-159,-157,192,-58,-92,-44,-31,-28,-12,-32,-37,-36,-35,-43,-30,-38,-29,-33,-34,-122,-128,230,231,-175,-160,-162,-161,-155,-158,-172,-185,-139,-11,-42,-13,-111,-112,-98,-87,-117,-27,-26,-23,-22,-20,-176,-59,-64,-186,-147,-14,-84,-21,303,-170,-156,-148,-39,-40,-45,-90,325,329,-61,-171,-163,-67,-46,-85,-91,338,-164,-169,-165,-196,-166,-197,-205,-198,-199,-206,]),'DCL':([0,2,6,14,21,36,41,43,50,107,119,166,170,230,231,303,325,327,329,337,338,341,344,],[4,-2,4,-5,-7,-6,-8,-4,-3,-129,-9,-24,-18,-130,-195,4,4,4,4,4,4,4,4,]),'PRINT':([0,2,6,9,14,19,21,30,36,40,41,43,50,54,57,61,77,80,82,94,95,96,99,102,103,105,106,107,108,114,119,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,166,169,170,188,189,192,198,199,200,201,202,203,204,208,210,212,214,221,226,230,231,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[12,-2,12,12,-5,12,-7,12,-6,12,-8,-4,-3,-123,12,12,-124,12,12,12,12,12,12,12,-150,12,12,-129,12,-140,-9,-113,12,12,-115,-114,12,12,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,12,-120,-24,12,-18,-151,12,12,-144,-141,-146,-142,-143,-145,12,12,12,12,12,12,12,-130,-195,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'COLON':([3,5,18,22,25,28,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,100,112,144,146,176,181,182,194,195,215,216,218,219,220,223,234,235,241,244,251,259,260,298,306,313,318,319,321,],[-173,-54,-53,-52,-174,94,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,189,-58,-122,-128,-175,-62,236,243,-185,-111,-112,261,-98,-87,-117,-176,-59,-64,-186,287,-51,-84,-90,-61,-67,287,-85,-91,]),'SYN':([0,2,6,14,21,36,41,43,50,107,119,166,170,230,231,303,325,327,329,337,338,341,344,],[23,-2,23,-5,-7,-6,-8,-4,-3,-129,-9,-24,-18,-130,-195,23,23,23,23,23,23,23,23,]),'MINUS':([3,5,9,18,19,22,25,27,28,34,38,39,40,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,78,79,80,81,82,84,85,95,96,100,102,105,106,108,112,114,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,172,176,195,198,199,200,201,202,203,208,210,212,214,215,216,219,220,221,223,226,233,234,235,236,239,241,242,243,244,247,259,260,261,264,265,287,291,292,294,306,309,310,313,319,],[-173,-54,54,-53,54,-52,-174,-55,-51,-17,-57,113,54,-56,-71,-81,143,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-79,-73,54,-125,54,-80,-110,54,54,-51,54,54,54,54,-58,-140,-113,54,54,-115,-114,-122,54,-128,54,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,54,-120,54,-51,-175,-185,-144,-141,-146,-142,-143,-145,54,54,54,54,-111,-112,143,-87,54,-117,54,54,-176,-59,54,54,-64,54,54,-186,54,-51,-84,54,54,54,54,54,54,54,-61,54,54,-67,-85,]),'GEQ':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,153,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'MODULO':([3,5,18,22,25,27,28,34,38,39,45,51,52,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,78,79,81,84,85,100,112,144,146,172,176,195,215,216,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-55,-51,-17,-57,116,-56,-71,-81,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-79,-73,-125,-80,164,-51,-58,-122,-128,-51,-175,-185,164,164,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'PROC':([94,],[175,]),'FOR':([30,],[97,]),'$end':([2,6,14,21,36,37,41,43,50,107,119,166,170,230,231,],[-2,-1,-5,-7,-6,0,-8,-4,-3,-129,-9,-24,-18,-130,-195,]),'BOOL':([34,48,49,91,125,165,207,214,237,268,277,290,291,328,],[-17,-15,128,128,128,128,-16,128,128,128,128,128,128,128,]),'CCONST':([9,19,40,54,57,77,80,82,95,96,102,105,106,108,114,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,198,199,200,201,202,203,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[52,52,52,-123,52,-124,52,52,52,52,52,52,52,52,-140,-113,52,52,-115,-114,52,52,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,52,-120,52,-144,-141,-146,-142,-143,-145,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'RETURN':([0,2,6,14,21,30,36,41,43,50,94,99,103,107,119,166,170,188,189,192,204,230,231,240,245,246,283,303,325,327,329,337,338,341,344,],[9,-2,9,-5,-7,9,-6,-8,-4,-3,9,9,-150,-129,-9,-24,-18,-151,9,9,9,-130,-195,9,9,9,9,9,9,9,9,9,9,9,9,]),'LENGTH':([0,2,6,9,14,19,21,30,36,40,41,43,50,54,57,61,77,80,82,94,95,96,99,102,103,105,106,107,108,114,119,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,166,169,170,188,189,192,198,199,200,201,202,203,204,208,210,212,214,221,226,230,231,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[10,-2,10,10,-5,10,-7,10,-6,10,-8,-4,-3,-123,10,10,-124,10,10,10,10,10,10,10,-150,10,10,-129,10,-140,-9,-113,10,10,-115,-114,10,10,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,10,-120,-24,10,-18,-151,10,10,-144,-141,-146,-142,-143,-145,10,10,10,10,10,10,10,-130,-195,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'PLUS':([3,5,18,22,25,27,28,34,38,39,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,78,79,81,84,85,100,112,144,146,172,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-55,-51,-17,-57,110,-56,-71,-81,139,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-79,-73,-125,-80,-110,-51,-58,-122,-128,-51,-175,-185,-111,-112,139,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'LEQ':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,157,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'ASC':([0,2,6,9,14,19,21,30,36,40,41,43,50,54,57,61,77,80,82,94,95,96,99,102,103,105,106,107,108,114,119,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,166,169,170,188,189,192,198,199,200,201,202,203,204,208,210,212,214,221,226,230,231,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[16,-2,16,16,-5,16,-7,16,-6,16,-8,-4,-3,-123,16,16,-124,16,16,16,16,16,16,16,-150,16,16,-129,16,-140,-9,-113,16,16,-115,-114,16,16,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,16,-120,-24,16,-18,-151,16,16,-144,-141,-146,-142,-143,-145,16,16,16,16,16,16,16,-130,-195,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'RPAREN':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,95,106,112,121,122,124,127,128,129,130,131,132,133,134,137,138,144,146,159,176,177,178,179,195,196,209,215,216,219,220,223,232,234,235,241,244,250,253,260,269,271,272,286,288,289,292,298,299,300,306,313,315,316,318,319,321,323,324,340,345,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,176,195,-58,-44,-31,-28,-32,-37,-36,-35,-43,-30,-38,-29,-33,-34,-122,-128,220,-175,-177,-179,234,-185,244,-42,-111,-112,-98,-87,-117,270,-176,-59,-64,-186,286,288,-84,302,-200,-178,-39,-40,-45,176,-90,-202,-203,-61,-67,-41,-46,-179,-85,-91,-204,-201,346,349,]),'TYPE':([0,2,6,14,21,36,41,43,50,107,119,166,170,230,231,303,325,327,329,337,338,341,344,],[13,-2,13,-5,-7,-6,-8,-4,-3,-129,-9,-24,-18,-130,-195,13,13,13,13,13,13,13,13,]),'FALSE':([9,19,40,54,57,77,80,82,95,96,102,105,106,108,114,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,198,199,200,201,202,203,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[78,78,78,-123,78,-124,78,78,78,78,78,78,78,78,-140,-113,78,78,-115,-114,78,78,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,78,-120,78,-144,-141,-146,-142,-143,-145,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'FI':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,103,107,112,144,146,176,188,195,205,215,216,219,220,223,230,234,235,241,244,245,249,260,266,283,295,296,298,306,313,314,319,321,335,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,-150,-129,-58,-122,-128,-175,-151,-185,248,-111,-112,-98,-87,-117,-130,-176,-59,-64,-186,-149,285,-84,298,-152,321,-94,-90,-61,-67,-153,-85,-91,-154,]),'CHAR':([34,48,49,91,125,165,207,214,237,268,277,290,291,328,],[-17,-15,133,133,133,133,-16,133,133,133,133,133,133,133,]),'ARROW':([3,5,9,18,19,22,25,27,28,34,38,39,40,45,54,57,72,73,77,80,81,82,95,96,100,102,105,106,108,112,114,139,140,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,172,176,195,198,199,200,201,202,203,208,210,212,214,221,226,233,234,235,236,239,241,242,243,244,247,259,261,264,265,287,291,292,294,306,309,310,313,],[-173,-54,61,-53,61,-52,-174,-55,-51,-17,-57,112,61,-56,-123,61,-55,-51,-124,61,112,61,61,61,-51,61,61,61,61,-58,-140,-113,61,61,-115,-114,61,112,61,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,61,-120,61,-51,-175,-185,-144,-141,-146,-142,-143,-145,61,61,61,61,61,61,61,-176,-59,61,61,-64,61,61,-186,61,-51,61,61,61,61,61,61,61,-61,61,61,-67,]),'ICONST':([9,19,40,54,57,77,80,82,95,96,102,105,106,108,114,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,198,199,200,201,202,203,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[66,66,66,-123,66,-124,66,66,66,66,66,66,66,66,-140,-113,66,66,-115,-114,66,66,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,66,-120,66,-144,-141,-146,-142,-143,-145,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'EXIT':([0,2,6,14,21,30,36,41,43,50,94,99,103,107,119,166,170,188,189,192,204,230,231,240,245,246,283,303,325,327,329,337,338,341,344,],[17,-2,17,-5,-7,17,-6,-8,-4,-3,17,17,-150,-129,-9,-24,-18,-151,17,17,17,-130,-195,17,17,17,17,17,17,17,17,17,17,17,17,]),'ABS':([0,2,6,9,14,19,21,30,36,40,41,43,50,54,57,61,77,80,82,94,95,96,99,102,103,105,106,107,108,114,119,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,166,169,170,188,189,192,198,199,200,201,202,203,204,208,210,212,214,221,226,230,231,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[7,-2,7,7,-5,7,-7,7,-6,7,-8,-4,-3,-123,7,7,-124,7,7,7,7,7,7,7,-150,7,7,-129,7,-140,-9,-113,7,7,-115,-114,7,7,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,7,-120,-24,7,-18,-151,7,7,-144,-141,-146,-142,-143,-145,7,7,7,7,7,7,7,-130,-195,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'RESULT':([0,2,6,14,21,30,36,41,43,50,94,99,103,107,119,166,170,188,189,192,204,230,231,240,245,246,283,303,325,327,329,337,338,341,344,],[19,-2,19,-5,-7,19,-6,-8,-4,-3,19,19,-150,-129,-9,-24,-18,-151,19,19,19,-130,-195,19,19,19,19,19,19,19,19,19,19,19,19,]),'NULL':([9,19,40,54,57,77,80,82,95,96,102,105,106,108,114,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,198,199,200,201,202,203,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[68,68,68,-123,68,-124,68,68,68,68,68,68,68,68,-140,-113,68,68,-115,-114,68,68,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,68,-120,68,-144,-141,-146,-142,-143,-145,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'IN':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,185,195,215,216,219,220,223,234,235,238,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,151,-79,-73,-125,-80,-110,-58,-122,-128,-175,237,-185,-111,-112,-98,-87,-117,-176,-59,277,-64,-186,-51,-84,-61,-67,-85,]),'LOC':([34,121,122,124,127,128,129,130,131,132,133,134,137,138,209,286,288,289,300,316,340,],[-17,-44,-31,-28,-32,-37,-36,-35,-43,-30,-38,-29,-33,-34,-42,-39,-40,-45,323,-46,345,]),'UPPER':([0,2,6,9,14,19,21,30,36,40,41,43,50,54,57,61,77,80,82,94,95,96,99,102,103,105,106,107,108,114,119,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,166,169,170,188,189,192,198,199,200,201,202,203,204,208,210,212,214,221,226,230,231,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[32,-2,32,32,-5,32,-7,32,-6,32,-8,-4,-3,-123,32,32,-124,32,32,32,32,32,32,32,-150,32,32,-129,32,-140,-9,-113,32,32,-115,-114,32,32,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,32,-120,-24,32,-18,-151,32,32,-144,-141,-146,-142,-143,-145,32,32,32,32,32,32,32,-130,-195,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'OR':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,156,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'LOWER':([0,2,6,9,14,19,21,30,36,40,41,43,50,54,57,61,77,80,82,94,95,96,99,102,103,105,106,107,108,114,119,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,166,169,170,188,189,192,198,199,200,201,202,203,204,208,210,212,214,221,226,230,231,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[44,-2,44,44,-5,44,-7,44,-6,44,-8,-4,-3,-123,44,44,-124,44,44,44,44,44,44,44,-150,44,44,-129,44,-140,-9,-113,44,44,-115,-114,44,44,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,44,-120,-24,44,-18,-151,44,44,-144,-141,-146,-142,-143,-145,44,44,44,44,44,44,44,-130,-195,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'RBRACKET':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,127,128,129,130,133,137,138,144,146,176,180,181,193,194,195,215,216,217,218,219,220,223,234,235,241,244,254,255,256,257,258,260,273,274,281,282,286,288,293,298,306,313,315,317,319,321,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,-58,-32,-37,-36,-35,-38,-33,-34,-122,-128,-175,235,-60,241,-65,-185,-111,-112,260,-65,-98,-87,-117,-176,-59,-64,-186,289,290,-49,-47,-50,-84,306,-63,-66,313,-39,-40,319,-90,-61,-67,-41,-48,-85,-91,]),'EQ':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,150,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'COMMA':([3,5,18,22,25,34,38,45,46,47,48,49,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,86,87,88,91,92,93,112,121,122,124,126,127,128,129,130,131,132,133,134,137,138,144,146,176,177,178,179,193,194,195,196,206,207,209,211,215,216,217,218,219,220,223,224,225,227,228,229,234,235,241,244,252,255,256,257,258,260,267,268,269,271,272,281,286,288,289,298,299,300,306,313,315,316,317,318,319,321,323,324,],[-173,-54,-53,-52,-174,-17,-57,-56,120,-10,-15,123,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,123,-25,167,123,-19,171,-58,-44,-31,-28,-12,-32,-37,-36,-35,-43,-30,-38,-29,-33,-34,-122,-128,-175,-177,-179,233,242,-65,-185,233,-11,-16,-42,-13,-111,-112,242,-65,-98,-87,-117,-27,-26,-23,-22,-20,-176,-59,-64,-186,-14,291,-49,-47,-50,-84,-21,123,301,-200,-178,-66,-39,-40,-45,-90,-202,-203,-61,-67,-41,-46,-48,-179,-85,-91,-204,-201,]),'TIMES':([3,5,18,22,25,27,28,34,38,39,45,51,52,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,78,79,81,84,85,100,112,144,146,172,176,195,215,216,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-55,-51,-17,-57,115,-56,-71,-81,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-79,-73,-125,-80,162,-51,-58,-122,-128,-51,-175,-185,162,162,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'BY':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,260,278,279,298,306,313,319,321,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-84,309,-167,-90,-61,-67,-85,-91,]),'DO':([0,2,6,14,21,30,36,41,43,50,94,99,103,107,119,166,170,188,189,192,204,230,231,240,245,246,283,303,325,327,329,337,338,341,344,],[30,-2,30,-5,-7,30,-6,-8,-4,-3,30,30,-150,-129,-9,-24,-18,-151,30,30,30,-130,-195,30,30,30,30,30,30,30,30,30,30,30,30,]),'SCONST':([9,19,40,54,57,77,80,82,95,96,102,105,106,108,114,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,198,199,200,201,202,203,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[55,55,55,-123,55,-124,55,55,55,55,55,55,55,55,-140,-113,55,55,-115,-114,55,55,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,55,-120,55,-144,-141,-146,-142,-143,-145,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'REF':([34,48,49,91,125,165,207,268,290,328,],[-17,-15,125,125,125,125,-16,125,125,125,]),'INT':([34,48,49,91,125,165,207,214,237,268,277,290,291,328,],[-17,-15,129,129,129,129,-16,129,129,129,129,129,129,129,]),'OD':([99,103,107,188,230,240,],[187,-150,-129,-151,-130,280,]),'ID':([0,2,4,6,9,13,14,17,19,21,23,30,34,36,40,41,43,48,49,50,54,57,61,77,80,82,91,94,95,96,97,99,102,103,105,106,107,108,114,119,120,123,125,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,165,166,167,169,170,171,188,189,192,198,199,200,201,202,203,204,207,208,210,212,214,221,226,230,231,232,233,236,237,239,240,242,243,245,246,247,261,264,265,268,277,283,287,290,291,292,294,301,303,309,310,325,327,328,329,337,338,341,344,],[34,-2,34,34,34,34,-5,34,34,-7,34,34,-17,-6,34,-8,-4,-15,34,-3,-123,34,34,-124,34,34,34,34,34,34,34,34,34,-150,34,34,-129,34,-140,-9,34,34,34,-113,34,34,-115,-114,34,34,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,34,-120,34,-24,34,34,-18,34,-151,34,34,-144,-141,-146,-142,-143,-145,34,-16,34,34,34,34,34,34,-130,-195,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'EQUALS':([3,5,18,22,25,27,28,34,38,39,45,48,86,91,100,109,110,111,112,113,115,116,121,122,124,126,127,128,129,130,131,132,133,134,137,138,168,172,176,185,195,207,209,234,235,241,244,286,288,289,306,313,316,],[-173,-54,-53,-52,-174,-55,-51,-17,-57,114,-56,-15,165,169,-51,198,199,200,-58,201,202,203,-44,-31,-28,210,-32,-37,-36,-35,-43,-30,-38,-29,-33,-34,226,-51,-175,239,-185,-16,-42,-176,-59,-64,-186,-39,-40,-45,-61,-67,-46,]),'NOT':([9,19,40,80,82,95,96,102,105,106,108,114,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,198,199,200,201,202,203,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[77,77,77,77,77,77,77,77,77,77,77,-140,-113,77,77,-115,-114,77,77,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,77,-120,77,-144,-141,-146,-142,-143,-145,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'RETURNS':([270,302,],[304,304,]),'DIVIDE':([3,5,18,22,25,27,28,34,38,39,45,51,52,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,78,79,81,84,85,100,112,144,146,172,176,195,215,216,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-55,-51,-17,-57,109,-56,-71,-81,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-79,-73,-125,-80,161,-51,-58,-122,-128,-51,-175,-185,161,161,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'LT':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,148,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'READ':([0,2,6,9,14,19,21,30,36,40,41,43,50,54,57,61,77,80,82,94,95,96,99,102,103,105,106,107,108,114,119,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,166,169,170,188,189,192,198,199,200,201,202,203,204,208,210,212,214,221,226,230,231,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[24,-2,24,24,-5,24,-7,24,-6,24,-8,-4,-3,-123,24,24,-124,24,24,24,24,24,24,24,-150,24,24,-129,24,-140,-9,-113,24,24,-115,-114,24,24,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,24,-120,-24,24,-18,-151,24,24,-144,-141,-146,-142,-143,-145,24,24,24,24,24,24,24,-130,-195,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'LPAREN':([7,9,10,11,12,16,19,24,28,32,33,34,40,44,54,57,73,77,80,82,95,96,100,102,105,106,108,114,124,127,128,129,130,133,134,137,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,172,175,198,199,200,201,202,203,208,210,212,214,221,226,233,236,239,242,243,247,256,259,261,264,265,275,276,286,287,288,291,292,294,304,307,309,310,],[-187,80,-192,-189,-194,-188,80,-193,95,-190,106,-17,80,-191,-123,80,95,-124,80,80,80,80,95,80,80,80,80,-140,208,-32,-37,-36,-35,-38,212,-33,-34,-113,80,80,-115,-114,80,80,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,80,-120,80,95,232,-144,-141,-146,-142,-143,-145,80,80,80,80,80,80,80,80,80,80,80,80,212,292,80,80,80,208,212,-39,80,-40,80,80,80,328,212,80,80,]),'GT':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,152,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'NE':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,158,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'TRUE':([9,19,40,54,57,77,80,82,95,96,102,105,106,108,114,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,162,163,164,169,198,199,200,201,202,203,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[84,84,84,-123,84,-124,84,84,84,84,84,84,84,84,-140,-113,84,84,-115,-114,84,84,-107,-99,-103,-109,-105,-106,-100,-101,-102,-108,-104,-119,-118,84,-120,84,-144,-141,-146,-142,-143,-145,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'IF':([0,2,6,9,14,19,21,30,36,40,41,43,50,80,82,94,95,96,99,102,103,105,106,107,108,114,119,145,166,169,170,188,189,192,198,199,200,201,202,203,204,208,210,212,214,221,226,230,231,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[40,-2,40,82,-5,82,-7,40,-6,82,-8,-4,-3,82,82,40,82,82,40,82,-150,82,82,-129,82,-140,-9,82,-24,82,-18,-151,40,40,-144,-141,-146,-142,-143,-145,40,82,82,82,82,82,82,-130,-195,82,82,82,40,82,82,40,40,82,82,82,82,40,82,82,82,82,40,82,82,40,40,40,40,40,40,40,]),'LBRACKET':([3,5,18,22,25,27,28,31,34,38,39,45,51,52,55,56,58,60,64,65,66,67,68,69,71,72,73,74,78,79,81,84,100,112,135,136,146,172,176,195,220,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-55,96,105,-17,-57,-68,-56,-71,-81,-83,-70,-76,145,-74,-69,-78,-86,-82,-75,-77,-55,96,-72,-79,-73,-68,-80,96,-58,213,214,-68,96,-175,-185,-87,-176,-59,-64,-186,96,-84,-61,-67,-85,]),'ELSIF':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,103,107,112,144,146,176,188,195,205,215,216,219,220,222,223,230,234,235,241,244,245,260,262,263,298,306,313,314,319,321,322,336,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,-150,-129,-58,-122,-128,-175,-151,-185,247,-111,-112,-98,-87,265,-117,-130,-176,-59,-64,-186,-149,-84,-93,294,-90,-61,-67,247,-85,-91,-95,-96,]),'THEN':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,117,118,144,146,160,176,195,215,216,219,220,223,234,235,241,244,260,284,297,298,306,313,319,320,321,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,-58,204,-92,-122,-128,221,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-84,204,221,-90,-61,-67,-85,221,-91,]),'TO':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,260,278,279,298,306,308,311,313,319,321,330,332,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-84,310,-167,-90,-61,310,310,-67,-85,-91,310,-168,]),'ARRAY':([34,48,49,91,125,165,207,268,290,328,],[-17,-15,136,136,136,136,-16,136,136,136,]),'AND':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,155,-79,-73,-125,-80,-110,-58,-122,-128,-175,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'LAND':([3,5,18,22,25,27,28,34,38,39,45,51,52,53,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,78,79,81,84,85,100,112,144,146,172,176,195,215,216,219,220,223,234,235,241,244,259,260,306,313,319,],[-173,-54,-53,-52,-174,-55,-51,-17,-57,111,-56,-71,-81,142,-83,-70,-76,-116,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-79,-73,-125,-80,-110,-51,-58,-122,-128,-51,-175,-185,-111,-112,142,-87,-117,-176,-59,-64,-186,-51,-84,-61,-67,-85,]),'END':([2,14,21,36,41,43,50,107,119,166,170,230,231,327,337,341,344,],[-2,-5,-7,-6,-8,-4,-3,-129,-9,-24,-18,-130,-195,339,343,347,348,]),'WHILE':([3,5,18,22,25,30,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,101,112,127,128,129,130,133,137,138,144,146,176,183,184,186,195,215,216,219,220,223,234,235,241,244,260,276,286,288,298,306,307,312,313,319,321,331,333,334,342,],[-173,-54,-53,-52,-174,102,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,102,-58,-32,-37,-36,-35,-38,-33,-34,-122,-128,-175,-160,-162,-161,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-84,-170,-39,-40,-90,-61,-171,-163,-67,-85,-91,-164,-169,-165,-166,]),'CHARS':([34,48,49,91,125,165,207,268,290,328,],[-17,-15,135,135,135,135,-16,135,135,135,]),'DOWN':([3,5,18,22,25,34,38,45,51,52,53,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,81,84,85,112,144,146,176,185,195,215,216,219,220,223,234,235,241,244,260,278,279,298,306,308,313,319,321,332,],[-173,-54,-53,-52,-174,-17,-57,-56,-71,-81,-97,-83,-70,-76,-116,-89,-126,-74,-69,-78,-127,-82,-75,-121,-77,-55,-51,-72,-88,-79,-73,-125,-80,-110,-58,-122,-128,-175,238,-185,-111,-112,-98,-87,-117,-176,-59,-64,-186,-84,311,-167,-90,-61,330,-67,-85,-91,-168,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'operator1':([75,],[147,]),'newmode_list':([13,],[88,]),'procedure_call':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'synonym_statement':([0,6,303,325,327,329,337,338,341,344,],[14,14,14,14,14,14,14,14,14,14,]),'string_concatenation_operator':([53,219,],[141,141,]),'builtin_name':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'parameter_spec':([268,],[299,]),'then_clause':([117,284,],[205,314,]),'boolean_expression':([40,82,102,247,265,294,],[117,160,191,284,297,320,]),'end_value':([278,308,311,330,],[312,331,334,342,]),'operand3':([9,19,40,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,223,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'do_action':([0,6,30,94,99,189,192,204,240,245,246,283,303,325,327,329,337,338,341,344,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'else_expression':([222,263,],[266,295,]),'composite_mode':([49,91,125,165,268,290,328,],[122,122,122,122,122,122,122,]),'dereferenced_reference':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'referenced_location':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'parameter':([95,106,233,292,],[177,177,272,177,]),'bracketed_action':([0,6,30,94,99,189,192,204,240,245,246,283,303,325,327,329,337,338,341,344,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'procedure_definition':([94,],[174,]),'empty_literal':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'discrete_mode':([49,91,125,165,214,237,268,277,290,291,328,],[134,134,134,134,256,276,134,307,134,256,134,]),'statement_list':([0,303,325,329,338,],[6,327,337,341,344,]),'while_control':([30,101,],[98,190,]),'exit_action':([0,6,30,94,99,189,192,204,240,245,246,283,303,325,327,329,337,338,341,344,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'return_action':([0,6,30,94,99,189,192,204,240,245,246,283,303,325,327,329,337,338,341,344,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'index_mode':([214,291,],[257,317,]),'boolean_mode':([49,91,125,165,214,237,268,277,290,291,328,],[137,137,137,137,137,137,137,137,137,137,137,]),'character_mode':([49,91,125,165,214,237,268,277,290,291,328,],[138,138,138,138,138,138,138,138,138,138,138,]),'elsif_expression':([222,],[263,]),'action_statement_list':([30,192,204,246,],[99,240,245,283,]),'declaration':([4,120,],[47,206,]),'builtin_call':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'literal_range':([208,212,214,291,292,],[250,253,258,258,250,]),'identifier':([0,4,6,9,13,17,19,23,30,40,49,57,61,80,82,91,94,95,96,97,99,102,105,106,108,120,123,125,140,141,145,147,163,165,167,169,171,189,192,204,208,210,212,214,221,226,232,233,236,237,239,240,242,243,245,246,247,261,264,265,268,277,283,287,290,291,292,294,301,303,309,310,325,327,328,329,337,338,341,344,],[28,48,28,73,48,89,73,48,100,73,124,73,73,73,73,124,172,73,73,185,100,73,73,73,73,48,207,124,73,73,73,73,73,124,48,73,48,172,100,100,73,73,73,259,73,73,48,73,73,275,73,100,73,73,100,100,73,73,73,73,124,275,100,73,124,259,73,73,48,28,73,73,28,28,124,28,28,28,28,28,]),'call_action':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[27,27,72,72,27,72,72,72,72,72,27,72,72,27,72,72,72,72,72,72,72,72,72,72,27,27,27,72,72,72,72,72,72,72,72,72,27,72,72,27,27,72,72,72,72,27,72,72,72,72,27,72,72,27,27,27,27,27,27,27,]),'declaration_list':([4,],[46,]),'assigning_operator':([39,],[108,]),'array_location':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'synonym_definition':([23,171,],[92,229,]),'expression':([9,19,40,80,82,95,96,102,105,106,108,145,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[76,76,118,159,118,178,181,118,194,178,197,218,227,251,252,251,251,262,227,178,274,279,281,282,118,293,296,118,315,251,318,118,332,333,]),'else_clause':([205,314,],[249,335,]),'start_element':([96,],[180,]),'newmode_statement':([0,6,303,325,327,329,337,338,341,344,],[36,36,36,36,36,36,36,36,36,36,]),'range_enumeration':([97,],[184,]),'location':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[39,39,81,81,39,81,81,146,81,81,39,81,81,39,81,81,81,81,81,81,81,81,81,81,39,39,39,81,81,81,81,81,81,81,81,81,39,81,81,39,39,81,81,81,81,39,81,81,81,81,39,81,81,39,39,39,39,39,39,39,]),'initialization':([126,],[211,]),'identifier_list':([4,13,23,120,167,171,232,301,],[49,86,91,49,86,91,268,268,]),'action_statement':([0,6,30,99,192,204,240,245,246,283,303,325,327,329,337,338,341,344,],[41,41,103,188,103,103,188,188,103,188,41,41,41,41,41,41,41,41,]),'parameter_list':([95,106,292,],[179,196,179,]),'procedure_statement':([0,6,303,325,327,329,337,338,341,344,],[21,21,21,21,21,21,21,21,21,21,]),'step_enumeration':([97,],[186,]),'left_element':([96,],[182,]),'string_slice':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'membership_operator':([75,],[154,]),'if_action':([0,6,30,94,99,189,192,204,240,245,246,283,303,325,327,329,337,338,341,344,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'arithmetic_multiplicative_operator':([85,215,216,],[163,163,163,]),'statement':([0,6,303,325,327,329,337,338,341,344,],[2,50,2,2,50,2,50,2,50,50,]),'value_array_slice':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'array_primitive_value':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'step_value':([278,],[308,]),'array_slice':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'operand1':([9,19,40,80,82,95,96,102,105,106,108,145,147,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[53,53,53,53,53,53,53,53,53,53,53,53,219,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'result_spec':([270,302,],[305,326,]),'value_array_element':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'monadic_operator':([9,19,40,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'mode_definition':([13,167,],[87,225,]),'synonym_list':([23,],[93,]),'conditional_expression':([9,19,40,80,82,95,96,102,105,106,108,145,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'list_index_mode':([214,],[255,]),'literal':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,254,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'boolean_literal':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'primitive_value':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'array_element':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'character_literal':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'constant_expression':([169,226,],[228,267,]),'string_mode':([49,91,125,165,268,290,328,],[131,131,131,131,131,131,131,]),'operand2':([9,19,40,80,82,95,96,102,105,106,108,140,141,145,147,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[85,85,85,85,85,85,85,85,85,85,85,215,216,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'array_mode':([49,91,125,165,268,290,328,],[121,121,121,121,121,121,121,]),'character_string_literal':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'formal_parameter_list':([232,],[269,]),'relational_operator':([75,],[149,]),'arithmetic_additive_operator':([53,219,],[140,140,]),'result_action':([0,6,30,94,99,189,192,204,240,245,246,283,303,325,327,329,337,338,341,344,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'then_expression':([160,297,320,],[222,322,336,]),'assignment_action':([0,6,30,94,99,189,192,204,240,245,246,283,303,325,327,329,337,338,341,344,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'parenthesized_expression':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'start_value':([239,],[278,]),'mode':([49,91,125,165,268,290,328,],[126,168,209,224,300,316,340,]),'integer_mode':([49,91,125,165,214,237,268,277,290,291,328,],[127,127,127,127,127,127,127,127,127,127,127,]),'expression_list':([105,145,],[193,217,]),'discrete_range_mode':([49,91,125,165,214,237,268,277,290,291,328,],[130,130,130,130,130,130,130,130,130,130,130,]),'action':([0,6,30,94,99,189,192,204,240,245,246,283,303,325,327,329,337,338,341,344,],[35,35,35,173,35,173,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'formal_parameter':([232,301,],[271,324,]),'iteration':([97,],[183,]),'for_control':([30,],[101,]),'program':([0,],[37,]),'string_element':([0,6,9,19,30,40,57,61,80,82,94,95,96,99,102,105,106,108,140,141,145,147,163,169,189,192,204,208,210,212,214,221,226,233,236,239,240,242,243,245,246,247,261,264,265,283,287,291,292,294,303,309,310,325,327,329,337,338,341,344,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'result':([9,19,],[83,90,]),'right_element':([236,],[273,]),'operand0':([9,19,40,80,82,95,96,102,105,106,108,145,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'declaration_statement':([0,6,303,325,327,329,337,338,341,344,],[43,43,43,43,43,43,43,43,43,43,]),'integer_literal':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,213,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'control_part':([30,],[104,]),'reference_mode':([49,91,125,165,268,290,328,],[132,132,132,132,132,132,132,]),'operand4':([9,19,40,57,80,82,95,96,102,105,106,108,140,141,145,147,163,169,208,210,212,214,221,226,233,236,239,242,243,247,261,264,265,287,291,292,294,309,310,],[70,70,70,144,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',18),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',23),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',36),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',41),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',45),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',46),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',55),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',56),
  ('initialization -> EQUALS expression','initialization',2,'p_initialization','parser.py',65),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',71),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',72),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',80),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',85),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',91),
  ('synonym_list -> synonym_list COMMA synonym_definition','synonym_list',3,'p_synonym_list','parser.py',92),
  ('synonym_definition -> identifier_list mode EQUALS constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',101),
  ('synonym_definition -> identifier_list EQUALS constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',102),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',111),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',117),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',123),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',124),
  ('mode_definition -> identifier_list EQUALS mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> identifier','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',151),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',157),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',163),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',169),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',175),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',176),
  ('literal_range -> expression COLON expression','literal_range',3,'p_literal_range','parser.py',181),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',187),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',192),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',193),
  ('string_mode -> CHARS LBRACKET literal RBRACKET','string_mode',4,'p_string_mode','parser.py',198),
  ('array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode','array_mode',5,'p_array_mode','parser.py',204),
  ('list_index_mode -> index_mode','list_index_mode',1,'p_list_index_mode','parser.py',209),
  ('list_index_mode -> list_index_mode COMMA index_mode','list_index_mode',3,'p_list_index_mode','parser.py',210),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',218),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',219),
  ('location -> identifier','location',1,'p_location','parser.py',225),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',226),
  ('location -> array_element','location',1,'p_location','parser.py',227),
  ('location -> array_slice','location',1,'p_location','parser.py',228),
  ('location -> call_action','location',1,'p_location','parser.py',229),
  ('location -> string_slice','location',1,'p_location','parser.py',230),
  ('location -> string_element','location',1,'p_location','parser.py',231),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',237),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','parser.py',243),
  ('start_element -> expression','start_element',1,'p_start_element','parser.py',250),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','parser.py',256),
  ('left_element -> expression','left_element',1,'p_left_element','parser.py',262),
  ('right_element -> expression','right_element',1,'p_right_element','parser.py',268),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',274),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',280),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',281),
  ('array_slice -> array_location LBRACKET expression COLON expression RBRACKET','array_slice',6,'p_array_slice','parser.py',290),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',296),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',302),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',303),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',304),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',305),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',311),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',312),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',313),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',314),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',315),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',321),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',327),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',328),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',334),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',340),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',346),
  ('value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','parser.py',352),
  ('value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',358),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',364),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',370),
  ('expression -> operand0','expression',1,'p_expression','parser.py',376),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',377),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',383),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',384),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',393),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',399),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',405),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',411),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',412),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',421),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',422),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',432),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',433),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',439),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',440),
  ('relational_operator -> EQ','relational_operator',1,'p_relational_operator','parser.py',441),
  ('relational_operator -> NE','relational_operator',1,'p_relational_operator','parser.py',442),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','parser.py',443),
  ('relational_operator -> GEQ','relational_operator',1,'p_relational_operator','parser.py',444),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','parser.py',445),
  ('relational_operator -> LEQ','relational_operator',1,'p_relational_operator','parser.py',446),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',452),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',458),
  ('operand1 -> operand1 arithmetic_additive_operator operand2','operand1',3,'p_operand1','parser.py',459),
  ('operand1 -> operand1 string_concatenation_operator operand2','operand1',3,'p_operand1','parser.py',460),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',470),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',471),
  ('string_concatenation_operator -> LAND','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',477),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',483),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',484),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',494),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',495),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',496),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',501),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',502),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',512),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',513),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',519),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',520),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',521),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',528),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',534),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','parser.py',535),
  ('action -> bracketed_action','action',1,'p_action','parser.py',544),
  ('action -> assignment_action','action',1,'p_action','parser.py',545),
  ('action -> call_action','action',1,'p_action','parser.py',546),
  ('action -> exit_action','action',1,'p_action','parser.py',547),
  ('action -> return_action','action',1,'p_action','parser.py',548),
  ('action -> result_action','action',1,'p_action','parser.py',549),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',555),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',556),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',562),
  ('assigning_operator -> EQUALS','assigning_operator',1,'p_assigning_operator','parser.py',568),
  ('assigning_operator -> PLUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',569),
  ('assigning_operator -> MINUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',570),
  ('assigning_operator -> TIMES EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',571),
  ('assigning_operator -> DIVIDE EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',572),
  ('assigning_operator -> MODULO EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',573),
  ('assigning_operator -> LAND EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',574),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',582),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',583),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',592),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',597),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',598),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',606),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',607),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',608),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',619),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',620),
  ('control_part -> for_control','control_part',1,'p_control_part','parser.py',629),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','parser.py',630),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',631),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','parser.py',640),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',646),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',647),
  ('step_enumeration -> identifier EQUALS start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',653),
  ('step_enumeration -> identifier EQUALS start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',654),
  ('step_enumeration -> identifier EQUALS start_value DOWN end_value','step_enumeration',5,'p_step_enumeration','parser.py',655),
  ('step_enumeration -> identifier EQUALS start_value step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','parser.py',656),
  ('start_value -> expression','start_value',1,'p_start_value','parser.py',670),
  ('step_value -> BY expression','step_value',2,'p_step_value','parser.py',676),
  ('end_value -> TO expression','end_value',2,'p_end_value','parser.py',682),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',688),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',689),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',698),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',704),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',705),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',711),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',712),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',720),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',721),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',730),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','parser.py',736),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',742),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',743),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',751),
  ('result -> expression','result',1,'p_result','parser.py',757),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',763),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',764),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',774),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',775),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',776),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',777),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',778),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',779),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',780),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',781),
  ('procedure_statement -> identifier COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',787),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END','procedure_definition',6,'p_procedure_definition','parser.py',793),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',794),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',795),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END','procedure_definition',8,'p_procedure_definition','parser.py',796),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',810),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',811),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',820),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',826),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',827),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',836),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',837),
]
