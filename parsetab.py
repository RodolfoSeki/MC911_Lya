
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGEQLTLEQleftPLUSMINUSleftTIMESDIVIDEMODULOID ICONST CCONST SCONST PLUS MINUS TIMES DIVIDE MODULO EQUALS SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET AND LAND OR EQ NE GT GEQ LT LEQ COLON COMMA NOT READ RESULT ABS UPPER FOR INT THEN ELSIF ARRAY BY WHILE IF TRUE RETURN RETURNS TYPE PRINT IN NULL LENGTH LOWER END DOWN REF LOC ASC FALSE PROC OD CHAR EXIT CHARS ELSE TO DO BOOL SYN FI DCL NUMprogram : statement_liststatement_list : statement\n                          | statement_list statement\n        statement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statement\n        declaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declaration\n        declaration : identifier_list mode \n                       | identifier_list mode initialization\n        initialization : EQUALS expression\n        identifier_list : identifier\n                           | identifier_list COMMA identifier\n        identifier : ID  synonym_statement : SYN synonym_list SEMI\n         synonym_list : synonym_definition \n                         | synonym_list COMMA synonym_definition\n         synonym_definition : identifier_list mode EQUALS constant_expression\n                               | identifier_list EQUALS constant_expression\n         constant_expression : expression\n         newmode_statement : TYPE newmode_list SEMI\n         newmode_list : mode_definition \n                         | newmode_list COMMA mode_definition\n         mode_definition : identifier_list EQUALS mode\n         mode : identifier\n                 | discrete_mode\n                 | reference_mode\n                 | composite_mode\n         discrete_mode : integer_mode\n                          | boolean_mode\n                          | character_mode\n                          | discrete_range_mode\n         integer_mode : INT\n         boolean_mode : BOOL\n         character_mode : CHAR\n         discrete_range_mode : identifier LPAREN literal_range RPAREN\n                                | discrete_mode LPAREN literal_range RPAREN\n         literal_range : expression COLON expression\n         reference_mode : REF mode\n         composite_mode : string_mode\n                           | array_mode\n         string_mode : CHARS LBRACKET literal RBRACKET\n         array_mode : ARRAY LBRACKET list_index_mode RBRACKET mode\n         list_index_mode : index_mode\n                            | list_index_mode COMMA index_mode\n         index_mode : discrete_mode\n                       | literal_range\n         location : identifier\n                     | dereferenced_reference\n                     | array_element\n                     | array_slice\n                     | call_action\n                     | string_slice\n                     | string_element\n         dereferenced_reference : location ARROW\n         string_element : identifier LBRACKET start_element RBRACKET\n         start_element : expression\n         string_slice : identifier LBRACKET left_element COLON right_element RBRACKET \n         left_element : expression\n         right_element : expression\n         array_element : array_location LBRACKET expression_list RBRACKET\n         expression_list : expression\n                            | expression_list COMMA expression\n         array_slice : array_location LBRACKET expression COLON expression RBRACKET\n         array_location : location\n         primitive_value : literal\n                            | value_array_element\n                            | value_array_slice\n                            | parenthesized_expression\n         literal : integer_literal\n                    | boolean_literal\n                    | character_literal\n                    | empty_literal\n                    | character_string_literal\n         integer_literal : ICONST\n         boolean_literal : FALSE\n                            | TRUE\n         character_literal : CCONST\n         empty_literal : NULL\n         character_string_literal : SCONST\n         value_array_element : array_primitive_value LBRACKET expression_list RBRACKET\n         value_array_slice : array_primitive_value LBRACKET expression COLON expression RBRACKET\n         array_primitive_value : primitive_value\n         parenthesized_expression : LPAREN expression RPAREN\n         expression : operand0\n                       | conditional_expression\n         conditional_expression : IF boolean_expression then_expression else_expression FI\n                                   | IF boolean_expression then_expression elsif_expression else_expression FI\n         boolean_expression : expression\n         then_expression : THEN expression\n         else_expression : ELSE expression\n         elsif_expression : ELSIF boolean_expression then_expression\n                             | elsif_expression ELSIF boolean_expression then_expression\n         operand0 : operand1\n                     | operand0 operator1 operand1\n         operator1 : relational_operator\n                      | membership_operator\n         relational_operator : AND\n                                | OR \n                                | EQ \n                                | NE\n                                | GT\n                                | GEQ\n                                | LT\n                                | LEQ\n         membership_operator : IN\n         operand1 : operand2\n                     | operand1 arithmetic_additive_operator operand2\n                     | operand1 string_concatenation_operator operand2\n         arithmetic_additive_operator : PLUS\n                                         | MINUS\n         string_concatenation_operator : LAND\n         operand2 : operand3 \n                     | operand2 arithmetic_multiplicative_operator operand3\n         arithmetic_multiplicative_operator : TIMES\n                                               | DIVIDE\n                                               | MODULO \n         operand3 : operand4\n                     | monadic_operator operand4\n         monadic_operator : MINUS\n                             | NOT \n         operand4 : location\n                     | referenced_location\n                     | primitive_value\n         referenced_location : ARROW location\n         action_statement : action SEMI\n                             | identifier COLON action SEMI\n         action : bracketed_action\n                   | assignment_action\n                   | call_action\n                   | exit_action\n                   | return_action\n                   | result_action\n         bracketed_action : if_action\n                             | do_action\n         assignment_action : location assigning_operator expression\n         assigning_operator : EQUALS\n                               | PLUS EQUALS\n                               | MINUS EQUALS\n                               | TIMES EQUALS\n                               | DIVIDE EQUALS\n                               | MODULO EQUALS\n                               | LAND EQUALS\n         if_action : IF boolean_expression then_clause FI\n                      | IF boolean_expression then_clause else_clause FI\n         then_clause : THEN action_statement_list\n        action_statement_list : action_statement\n                                 | action_statement_list action_statement\n         else_clause : ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause \n                        | ELSIF boolean_expression then_clause else_clause\n         do_action : DO action_statement_list OD\n                      | DO control_part SEMI action_statement_list OD\n         control_part : for_control \n                         | for_control while_control\n                         | while_control\n         for_control : FOR iteration\n         iteration : step_enumeration\n                      | range_enumeration\n         step_enumeration : identifier EQUALS start_value end_value\n                             | identifier EQUALS start_value step_value end_value\n                             | identifier EQUALS start_value DOWN end_value\n                             | identifier EQUALS start_value step_value DOWN end_value\n         start_value : expression\n         step_value : BY expression\n         end_value : TO expression\n         range_enumeration : identifier IN discrete_mode\n                              | identifier DOWN IN discrete_mode\n         while_control : WHILE boolean_expression\n         call_action : procedure_call\n                        | builtin_call\n         procedure_call : identifier LPAREN  RPAREN\n                           | identifier LPAREN parameter_list RPAREN\n         parameter_list : parameter\n                           | parameter_list COMMA parameter\n         parameter : expression\n         exit_action : EXIT identifier\n         return_action : RETURN \n                          | RETURN result\n         result_action : RESULT result\n         result : expression\n         builtin_call : builtin_name LPAREN RPAREN\n                         | builtin_name LPAREN parameter_list RPAREN\n         builtin_name : ABS\n                         | ASC\n                         | NUM\n                         | UPPER\n                         | LOWER\n                         | LENGTH\n                         | READ\n                         | PRINT\n         procedure_statement : identifier COLON procedure_definition SEMI\n         procedure_definition : PROC LPAREN RPAREN SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END\n                                 | PROC LPAREN RPAREN result_spec SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END\n         formal_parameter_list : formal_parameter \n                                  | formal_parameter_list COMMA formal_parameter\n         formal_parameter : identifier_list parameter_spec\n         parameter_spec : mode \n                           | mode LOC\n         result_spec : RETURNS LPAREN mode RPAREN\n                        | RETURNS LPAREN mode LOC RPAREN\n        '
    
_lr_action_items = {'AND':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,146,-127,-126,-79,-71,-80,-55,-110,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'ASC':([0,4,9,10,11,22,28,31,35,38,42,43,46,57,59,66,69,78,80,89,90,96,97,98,99,100,104,108,109,112,121,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,190,192,193,200,202,204,207,208,212,213,216,217,224,229,231,232,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[18,-6,18,-4,-5,18,-7,-8,18,18,18,-2,18,18,18,-123,18,-124,18,18,-140,18,-3,18,18,18,18,18,-150,-129,-18,18,18,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,18,-120,18,-119,-118,18,-114,18,-115,-113,-142,-143,-144,-146,-145,-141,-24,-151,18,18,18,-9,18,18,18,18,18,18,18,18,-130,-195,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'PLUS':([5,8,13,15,23,25,30,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,72,73,74,75,76,77,79,82,83,84,85,91,105,143,144,175,179,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,95,-17,-51,-55,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-127,-126,-79,-71,-80,-55,-110,-74,167,-75,-72,-58,-51,-122,-128,-185,-51,-175,-64,-87,167,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'EQ':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,156,-127,-126,-79,-71,-80,-55,-110,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'READ':([0,4,9,10,11,22,28,31,35,38,42,43,46,57,59,66,69,78,80,89,90,96,97,98,99,100,104,108,109,112,121,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,190,192,193,200,202,204,207,208,212,213,216,217,224,229,231,232,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[21,-6,21,-4,-5,21,-7,-8,21,21,21,-2,21,21,21,-123,21,-124,21,21,-140,21,-3,21,21,21,21,21,-150,-129,-18,21,21,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,21,-120,21,-119,-118,21,-114,21,-115,-113,-142,-143,-144,-146,-145,-141,-24,-151,21,21,21,-9,21,21,21,21,21,21,21,21,-130,-195,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'LOWER':([0,4,9,10,11,22,28,31,35,38,42,43,46,57,59,66,69,78,80,89,90,96,97,98,99,100,104,108,109,112,121,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,190,192,193,200,202,204,207,208,212,213,216,217,224,229,231,232,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[2,-6,2,-4,-5,2,-7,-8,2,2,2,-2,2,2,2,-123,2,-124,2,2,-140,2,-3,2,2,2,2,2,-150,-129,-18,2,2,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,2,-120,2,-119,-118,2,-114,2,-115,-113,-142,-143,-144,-146,-145,-141,-24,-151,2,2,2,-9,2,2,2,2,2,2,2,2,-130,-195,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'TO':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,262,276,277,286,299,307,310,312,319,322,330,332,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-84,311,-167,-67,-90,-61,311,311,-85,-91,-168,311,]),'RPAREN':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,96,99,123,125,128,130,131,132,133,134,136,137,138,139,141,143,144,145,175,176,177,178,183,184,206,218,221,222,223,226,227,228,230,233,234,254,256,262,269,271,272,286,287,288,290,291,299,300,301,307,315,316,317,319,322,323,324,340,346,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,175,183,-43,-36,-28,-29,-32,-44,-34,-37,-31,-38,-33,-30,-35,-122,-128,221,-185,-179,-177,228,-175,233,-64,-42,-87,-98,-117,-111,-112,-186,273,-176,-59,288,290,-84,-178,303,-200,-67,-45,-39,-40,183,-90,-203,-202,-61,-41,-179,-46,-85,-91,-204,-201,347,349,]),'FI':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,109,112,143,144,175,183,192,201,206,221,222,223,226,227,228,231,233,234,242,246,262,268,283,286,296,298,299,307,314,319,322,335,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,-150,-129,-122,-128,-185,-175,-151,243,-64,-87,-98,-117,-111,-112,-186,-130,-176,-59,282,-149,-84,299,-152,-67,-94,322,-90,-61,-153,-85,-91,-154,]),'ELSIF':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,109,112,143,144,175,183,192,201,206,221,222,223,225,226,227,228,231,233,234,246,262,264,267,286,299,307,314,319,320,322,336,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,-150,-129,-122,-128,-185,-175,-151,245,-64,-87,-98,-117,265,-111,-112,-186,-130,-176,-59,-149,-84,-93,297,-67,-90,-61,245,-85,-95,-91,-96,]),'SYN':([0,4,10,11,22,28,31,43,97,112,121,190,204,231,232,306,326,327,329,337,338,339,343,],[7,-6,-4,-5,7,-7,-8,-2,-3,-129,-18,-24,-9,-130,-195,7,7,7,7,7,7,7,7,]),'DIVIDE':([5,8,13,15,23,25,30,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,72,73,74,75,76,77,79,82,84,85,91,105,143,144,175,179,183,206,221,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,92,-17,-51,-55,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-127,-126,-79,-71,-80,-55,160,-74,-75,-72,-58,-51,-122,-128,-185,-51,-175,-64,-87,-117,160,160,-186,-176,-59,-51,-84,-67,-61,-85,]),'RETURN':([0,4,10,11,22,28,31,35,43,97,98,104,109,112,121,190,192,193,200,202,204,231,232,241,244,246,283,306,326,327,329,337,338,339,343,],[9,-6,-4,-5,9,-7,-8,9,-2,-3,9,9,-150,-129,-18,-24,-151,9,9,9,-9,-130,-195,9,9,9,9,9,9,9,9,9,9,9,9,]),'ELSE':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,109,112,143,144,175,183,192,201,206,221,222,223,225,226,227,228,231,233,234,246,262,264,267,286,299,307,314,319,320,322,336,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,-150,-129,-122,-128,-185,-175,-151,244,-64,-87,-98,-117,266,-111,-112,-186,-130,-176,-59,-149,-84,-93,266,-67,-90,-61,244,-85,-95,-91,-96,]),'THEN':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,113,114,143,144,162,175,183,206,221,222,223,226,227,228,233,234,262,284,286,295,299,307,319,321,322,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,202,-92,-122,-128,224,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-84,202,-67,224,-90,-61,-85,224,-91,]),'RETURNS':([273,303,],[305,305,]),'LAND':([5,8,13,15,23,25,30,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,72,73,74,75,76,77,79,82,83,84,85,91,105,143,144,175,179,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,93,-17,-51,-55,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-127,-126,-79,-71,-80,-55,-110,-74,166,-75,-72,-58,-51,-122,-128,-185,-51,-175,-64,-87,166,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'TYPE':([0,4,10,11,22,28,31,43,97,112,121,190,204,231,232,306,326,327,329,337,338,339,343,],[27,-6,-4,-5,27,-7,-8,-2,-3,-129,-18,-24,-9,-130,-195,27,27,27,27,27,27,27,27,]),'TIMES':([5,8,13,15,23,25,30,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,72,73,74,75,76,77,79,82,84,85,91,105,143,144,175,179,183,206,221,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,88,-17,-51,-55,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-127,-126,-79,-71,-80,-55,161,-74,-75,-72,-58,-51,-122,-128,-185,-51,-175,-64,-87,-117,161,161,-186,-176,-59,-51,-84,-67,-61,-85,]),'ARROW':([5,8,9,13,15,23,25,30,34,36,38,41,42,45,46,57,60,66,67,69,77,78,80,89,90,91,96,99,100,105,108,129,142,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,175,179,183,206,207,208,212,213,216,217,224,228,229,233,234,235,238,245,248,259,263,265,266,286,289,291,293,297,307,309,311,],[-56,-52,59,-53,91,-17,-51,-55,-54,-57,59,-174,59,-173,59,59,91,-123,-51,59,-55,-124,59,59,-140,-58,59,59,59,-51,59,59,59,91,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,59,-120,59,-119,-118,59,-114,59,-115,-113,-142,-143,-144,-146,-145,-141,-185,-51,-175,-64,59,59,59,59,59,59,59,-186,59,-176,-59,59,59,59,59,-51,59,59,59,-67,59,59,59,59,-61,59,59,]),'GT':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,151,-127,-126,-79,-71,-80,-55,-110,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'CHARS':([23,48,49,116,140,188,210,270,292,328,],[-17,126,-15,126,126,126,-16,126,126,126,]),'LENGTH':([0,4,9,10,11,22,28,31,35,38,42,43,46,57,59,66,69,78,80,89,90,96,97,98,99,100,104,108,109,112,121,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,190,192,193,200,202,204,207,208,212,213,216,217,224,229,231,232,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[17,-6,17,-4,-5,17,-7,-8,17,17,17,-2,17,17,17,-123,17,-124,17,17,-140,17,-3,17,17,17,17,17,-150,-129,-18,17,17,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,17,-120,17,-119,-118,17,-114,17,-115,-113,-142,-143,-144,-146,-145,-141,-24,-151,17,17,17,-9,17,17,17,17,17,17,17,17,-130,-195,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LOC':([23,123,125,128,130,131,132,133,134,136,137,138,139,141,218,287,288,290,300,317,340,],[-17,-43,-36,-28,-29,-32,-44,-34,-37,-31,-38,-33,-30,-35,-42,-45,-39,-40,323,-46,346,]),'ICONST':([9,38,42,46,57,66,69,78,80,89,90,96,99,100,108,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[61,61,61,61,61,-123,61,-124,61,61,-140,61,61,61,61,61,61,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,61,-120,61,-119,-118,61,-114,61,-115,-113,-142,-143,-144,-146,-145,-141,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TRUE':([9,38,42,46,57,66,69,78,80,89,90,96,99,100,108,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[76,76,76,76,76,-123,76,-124,76,76,-140,76,76,76,76,76,76,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,76,-120,76,-119,-118,76,-114,76,-115,-113,-142,-143,-144,-146,-145,-141,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'LPAREN':([2,9,17,18,19,21,23,25,26,29,32,38,42,44,46,57,66,67,69,78,80,89,90,96,99,100,105,108,125,128,129,130,131,133,134,137,138,141,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,179,180,207,208,212,213,216,217,224,229,235,238,245,248,259,261,263,265,266,278,279,288,289,290,291,293,297,305,309,311,313,],[-191,69,-192,-188,96,-193,-17,99,-187,-194,-189,69,69,-190,69,69,-123,99,69,-124,69,69,-140,69,69,69,99,69,-36,213,69,216,-32,-34,-37,-38,-33,-35,69,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,69,-120,69,-119,-118,69,-114,69,-115,-113,-142,-143,-144,-146,-145,-141,99,230,69,69,69,69,69,69,69,69,69,69,69,69,291,216,69,69,69,213,216,-39,69,-40,69,69,69,328,69,69,216,]),'LT':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,152,-127,-126,-79,-71,-80,-55,-110,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'OD':([104,109,112,192,231,241,],[191,-150,-129,-151,-130,281,]),'REF':([23,48,49,116,140,188,210,270,292,328,],[-17,140,-15,140,140,140,-16,140,140,140,]),'ID':([0,4,7,9,10,11,14,22,23,27,28,31,35,38,39,42,43,46,48,49,57,59,66,69,78,80,89,90,96,97,98,99,100,104,107,108,109,112,116,121,122,124,129,140,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,188,189,190,192,193,200,202,203,204,207,208,210,212,213,216,217,224,229,230,231,232,235,238,239,241,244,245,246,248,263,265,266,270,280,283,289,291,292,293,297,302,306,309,311,326,327,328,329,337,338,339,343,],[23,-6,23,23,-4,-5,23,23,-17,23,-7,-8,23,23,23,23,-2,23,23,-15,23,23,-123,23,-124,23,23,-140,23,-3,23,23,23,23,23,23,-150,-129,23,-18,23,23,23,23,23,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,23,-120,23,-119,-118,23,-114,23,-115,-113,-142,-143,-144,-146,-145,-141,23,23,-24,-151,23,23,23,23,-9,23,23,-16,23,23,23,23,23,23,23,-130,-195,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'BOOL':([23,48,49,116,140,188,210,217,239,270,280,292,293,328,],[-17,134,-15,134,134,134,-16,134,134,134,134,134,134,134,]),'LBRACKET':([3,5,8,13,15,23,25,30,34,36,41,45,52,53,55,56,58,60,61,62,63,64,67,68,72,74,75,76,77,82,84,85,91,105,126,135,144,175,179,183,206,221,228,233,234,259,262,286,307,319,],[46,-56,-52,-53,-68,-17,100,-55,-54,-57,-174,-173,-76,-82,142,-70,-83,-68,-78,-73,-69,-77,100,-81,-86,-79,-71,-80,-55,-74,-75,-72,-58,100,211,217,-68,-185,100,-175,-64,-87,-186,-176,-59,100,-84,-67,-61,-85,]),'RBRACKET':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,119,120,125,131,133,134,137,138,141,143,144,175,183,185,187,206,219,220,221,222,223,226,227,228,233,234,250,251,252,257,258,260,261,262,274,275,286,288,290,294,299,307,315,318,319,322,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,206,-65,-36,-32,-34,-37,-38,-33,-35,-122,-128,-185,-175,234,-60,-64,262,-65,-87,-98,-117,-111,-112,-186,-176,-59,-66,286,287,-50,-47,292,-49,-84,307,-63,-67,-39,-40,319,-90,-61,-41,-48,-85,-91,]),'MINUS':([5,8,9,13,15,23,25,30,34,36,38,41,42,45,46,52,53,54,56,58,60,61,62,63,64,65,67,68,69,72,73,74,75,76,77,79,80,82,83,84,85,89,90,91,96,99,100,105,108,129,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,175,179,183,206,207,208,212,213,216,217,221,222,223,224,226,227,228,229,233,234,235,238,245,248,259,262,263,265,266,286,289,291,293,297,307,309,311,319,],[-56,-52,66,-53,87,-17,-51,-55,-54,-57,66,-174,66,-173,66,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,66,-127,-126,-79,-71,-80,-55,-110,66,-74,164,-75,-72,66,-140,-58,66,66,66,-51,66,66,66,-122,-128,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,66,-120,66,-119,-118,66,-114,66,-115,-113,-142,-143,-144,-146,-145,-141,-185,-51,-175,-64,66,66,66,66,66,66,-87,164,-117,66,-111,-112,-186,66,-176,-59,66,66,66,66,-51,-84,66,66,66,-67,66,66,66,66,-61,66,66,-85,]),'COMMA':([5,8,13,23,34,36,41,45,47,48,49,50,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,101,102,103,115,116,117,119,120,123,125,128,130,131,132,133,134,136,137,138,139,141,143,144,175,176,177,178,183,184,205,206,209,210,214,215,218,219,220,221,222,223,226,227,228,233,234,236,237,247,249,250,253,257,258,260,261,262,269,270,271,272,285,286,287,288,290,299,300,301,307,315,316,317,318,319,322,323,324,],[-56,-52,-53,-17,-54,-57,-174,-173,122,124,-15,-19,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,124,189,-25,203,124,-10,207,-65,-43,-36,-28,-29,-32,-44,-34,-37,-31,-38,-33,-30,-35,-122,-128,-185,-179,-177,229,-175,229,-12,-64,-20,-16,-23,-22,-42,207,-65,-87,-98,-117,-111,-112,-186,-176,-59,-27,-26,-11,-13,-66,-21,-50,-47,293,-49,-84,-178,124,302,-200,-14,-67,-45,-39,-40,-90,-203,-202,-61,-41,-179,-46,-48,-85,-91,-204,-201,]),'CCONST':([9,38,42,46,57,66,69,78,80,89,90,96,99,100,108,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[68,68,68,68,68,-123,68,-124,68,68,-140,68,68,68,68,68,68,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,68,-120,68,-119,-118,68,-114,68,-115,-113,-142,-143,-144,-146,-145,-141,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'INT':([23,48,49,116,140,188,210,217,239,270,280,292,293,328,],[-17,125,-15,125,125,125,-16,125,125,125,125,125,125,125,]),'IN':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,82,83,84,85,91,143,144,175,183,194,206,221,222,223,226,227,228,233,234,240,259,262,286,307,319,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,155,-127,-126,-79,-71,-80,-55,-110,-74,-97,-75,-72,-58,-122,-128,-185,-175,239,-64,-87,-98,-117,-111,-112,-186,-176,-59,280,-51,-84,-67,-61,-85,]),'ABS':([0,4,9,10,11,22,28,31,35,38,42,43,46,57,59,66,69,78,80,89,90,96,97,98,99,100,104,108,109,112,121,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,190,192,193,200,202,204,207,208,212,213,216,217,224,229,231,232,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[26,-6,26,-4,-5,26,-7,-8,26,26,26,-2,26,26,26,-123,26,-124,26,26,-140,26,-3,26,26,26,26,26,-150,-129,-18,26,26,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,26,-120,26,-119,-118,26,-114,26,-115,-113,-142,-143,-144,-146,-145,-141,-24,-151,26,26,26,-9,26,26,26,26,26,26,26,26,-130,-195,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'END':([4,10,11,28,31,43,97,112,121,190,204,231,232,329,338,339,343,],[-6,-4,-5,-7,-8,-2,-3,-129,-18,-24,-9,-130,-195,341,344,345,348,]),'NULL':([9,38,42,46,57,66,69,78,80,89,90,96,99,100,108,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[53,53,53,53,53,-123,53,-124,53,53,-140,53,53,53,53,53,53,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,53,-120,53,-119,-118,53,-114,53,-115,-113,-142,-143,-144,-146,-145,-141,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'SEMI':([5,6,8,9,12,13,16,20,23,24,30,33,34,36,37,40,41,45,47,50,51,52,53,54,56,58,60,61,62,63,64,65,67,68,70,71,72,73,74,75,76,77,79,81,82,83,84,85,86,91,102,103,106,110,111,114,115,117,118,123,125,128,130,131,132,133,134,136,137,138,139,141,143,144,170,175,181,182,183,191,195,196,197,198,199,205,206,209,214,215,218,221,222,223,226,227,228,233,234,236,237,243,247,249,253,262,273,279,281,282,285,286,287,288,290,299,303,304,307,308,313,317,319,322,325,331,333,334,341,342,344,345,347,348,349,],[-56,-138,-52,-181,-134,-53,-135,-131,-17,-137,-133,-132,-54,-57,112,-136,-174,-173,121,-19,-182,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-184,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-180,-58,190,-25,-159,-157,200,-92,204,-10,-183,-43,-36,-28,-29,-32,-44,-34,-37,-31,-38,-33,-30,-35,-122,-128,-139,-185,231,232,-175,-155,-162,-160,-161,-172,-158,-12,-64,-20,-23,-22,-42,-87,-98,-117,-111,-112,-186,-176,-59,-27,-26,-147,-11,-13,-21,-84,306,-170,-156,-148,-14,-67,-45,-39,-40,-90,326,327,-61,-163,-171,-46,-85,-91,337,-164,-169,-165,-196,-166,-197,-198,-205,-199,-206,]),'FALSE':([9,38,42,46,57,66,69,78,80,89,90,96,99,100,108,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[74,74,74,74,74,-123,74,-124,74,74,-140,74,74,74,74,74,74,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,74,-120,74,-119,-118,74,-114,74,-115,-113,-142,-143,-144,-146,-145,-141,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'COLON':([5,8,13,23,25,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,105,120,143,144,175,183,186,187,206,220,221,222,223,226,227,228,233,234,255,259,262,286,299,307,316,319,322,],[-56,-52,-53,-17,98,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,193,208,-122,-128,-185,-175,235,-62,-64,263,-87,-98,-117,-111,-112,-186,-176,-59,289,-51,-84,-67,-90,-61,289,-85,-91,]),'EQUALS':([5,8,13,15,23,25,30,34,36,41,45,48,49,87,88,91,92,93,94,95,101,105,123,125,127,128,130,131,132,133,134,136,137,138,139,141,175,179,183,194,205,206,210,218,228,233,234,286,287,288,290,307,317,],[-56,-52,-53,90,-17,-51,-55,-54,-57,-174,-173,129,-15,168,169,-58,171,172,173,174,188,-51,-43,-36,212,-28,-29,-32,-44,-34,-37,-31,-38,-33,-30,-35,-185,-51,-175,238,248,-64,-16,-42,-186,-176,-59,-67,-45,-39,-40,-61,-46,]),'FOR':([35,],[107,]),'WHILE':([5,8,13,23,34,35,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,110,125,131,133,134,137,138,141,143,144,175,183,195,196,197,206,221,222,223,226,227,228,233,234,262,279,286,288,290,299,307,308,313,319,322,331,333,334,342,],[-56,-52,-53,-17,-54,108,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,108,-36,-32,-34,-37,-38,-33,-35,-122,-128,-185,-175,-162,-160,-161,-64,-87,-98,-117,-111,-112,-186,-176,-59,-84,-170,-67,-39,-40,-90,-61,-163,-171,-85,-91,-164,-169,-165,-166,]),'GEQ':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,153,-127,-126,-79,-71,-80,-55,-110,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'NUM':([0,4,9,10,11,22,28,31,35,38,42,43,46,57,59,66,69,78,80,89,90,96,97,98,99,100,104,108,109,112,121,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,190,192,193,200,202,204,207,208,212,213,216,217,224,229,231,232,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[32,-6,32,-4,-5,32,-7,-8,32,32,32,-2,32,32,32,-123,32,-124,32,32,-140,32,-3,32,32,32,32,32,-150,-129,-18,32,32,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,32,-120,32,-119,-118,32,-114,32,-115,-113,-142,-143,-144,-146,-145,-141,-24,-151,32,32,32,-9,32,32,32,32,32,32,32,32,-130,-195,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'PROC':([98,],[180,]),'LEQ':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,147,-127,-126,-79,-71,-80,-55,-110,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'DO':([0,4,10,11,22,28,31,35,43,97,98,104,109,112,121,190,192,193,200,202,204,231,232,241,244,246,283,306,326,327,329,337,338,339,343,],[35,-6,-4,-5,35,-7,-8,35,-2,-3,35,35,-150,-129,-18,-24,-151,35,35,35,-9,-130,-195,35,35,35,35,35,35,35,35,35,35,35,35,]),'NE':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,154,-127,-126,-79,-71,-80,-55,-110,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'NOT':([9,38,42,46,69,80,89,90,96,99,100,108,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[78,78,78,78,78,78,78,-140,78,78,78,78,78,78,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,78,-120,78,-119,-118,78,-114,78,-115,-113,-142,-143,-144,-146,-145,-141,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'OR':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,150,-127,-126,-79,-71,-80,-55,-110,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-51,-84,-67,-61,-85,]),'IF':([0,4,9,10,11,22,28,31,35,38,42,43,46,69,80,89,90,96,97,98,99,100,104,108,109,112,121,129,142,168,169,171,172,173,174,190,192,193,200,202,204,207,208,212,213,216,217,224,229,231,232,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[38,-6,80,-4,-5,38,-7,-8,38,80,80,-2,80,80,80,80,-140,80,-3,38,80,80,38,80,-150,-129,-18,80,80,-142,-143,-144,-146,-145,-141,-24,-151,38,38,38,-9,80,80,80,80,80,80,80,80,-130,-195,80,80,38,38,80,38,80,80,80,80,38,80,80,80,80,38,80,80,38,38,38,38,38,38,38,]),'DCL':([0,4,10,11,22,28,31,43,97,112,121,190,204,231,232,306,326,327,329,337,338,339,343,],[39,-6,-4,-5,39,-7,-8,-2,-3,-129,-18,-24,-9,-130,-195,39,39,39,39,39,39,39,39,]),'PRINT':([0,4,9,10,11,22,28,31,35,38,42,43,46,57,59,66,69,78,80,89,90,96,97,98,99,100,104,108,109,112,121,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,190,192,193,200,202,204,207,208,212,213,216,217,224,229,231,232,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[29,-6,29,-4,-5,29,-7,-8,29,29,29,-2,29,29,29,-123,29,-124,29,29,-140,29,-3,29,29,29,29,29,-150,-129,-18,29,29,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,29,-120,29,-119,-118,29,-114,29,-115,-113,-142,-143,-144,-146,-145,-141,-24,-151,29,29,29,-9,29,29,29,29,29,29,29,29,-130,-195,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'BY':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,143,144,175,183,206,221,222,223,226,227,228,233,234,262,276,277,286,299,307,319,322,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,-122,-128,-185,-175,-64,-87,-98,-117,-111,-112,-186,-176,-59,-84,309,-167,-67,-90,-61,-85,-91,]),'ARRAY':([23,48,49,116,140,188,210,270,292,328,],[-17,135,-15,135,135,135,-16,135,135,135,]),'SCONST':([9,38,42,46,57,66,69,78,80,89,90,96,99,100,108,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[58,58,58,58,58,-123,58,-124,58,58,-140,58,58,58,58,58,58,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,58,-120,58,-119,-118,58,-114,58,-115,-113,-142,-143,-144,-146,-145,-141,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'CHAR':([23,48,49,116,140,188,210,217,239,270,280,292,293,328,],[-17,137,-15,137,137,137,-16,137,137,137,137,137,137,137,]),'DOWN':([5,8,13,23,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,70,72,73,74,75,76,77,79,81,82,83,84,85,91,143,144,175,183,194,206,221,222,223,226,227,228,233,234,262,276,277,286,299,307,310,319,322,330,],[-56,-52,-53,-17,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-88,-127,-126,-79,-71,-80,-55,-110,-89,-74,-97,-75,-72,-58,-122,-128,-185,-175,240,-64,-87,-98,-117,-111,-112,-186,-176,-59,-84,312,-167,-67,-90,-61,332,-85,-91,-168,]),'MODULO':([5,8,13,15,23,25,30,34,36,41,45,52,53,54,56,58,60,61,62,63,64,65,67,68,72,73,74,75,76,77,79,82,84,85,91,105,143,144,175,179,183,206,221,223,226,227,228,233,234,259,262,286,307,319,],[-56,-52,-53,94,-17,-51,-55,-54,-57,-174,-173,-76,-82,-121,-70,-83,-125,-78,-73,-69,-77,-116,-51,-81,-127,-126,-79,-71,-80,-55,158,-74,-75,-72,-58,-51,-122,-128,-185,-51,-175,-64,-87,-117,158,158,-186,-176,-59,-51,-84,-67,-61,-85,]),'RESULT':([0,4,10,11,22,28,31,35,43,97,98,104,109,112,121,190,192,193,200,202,204,231,232,241,244,246,283,306,326,327,329,337,338,339,343,],[42,-6,-4,-5,42,-7,-8,42,-2,-3,42,42,-150,-129,-18,-24,-151,42,42,42,-9,-130,-195,42,42,42,42,42,42,42,42,42,42,42,42,]),'$end':([1,4,10,11,22,28,31,43,97,112,121,190,204,231,232,],[0,-6,-4,-5,-1,-7,-8,-2,-3,-129,-18,-24,-9,-130,-195,]),'UPPER':([0,4,9,10,11,22,28,31,35,38,42,43,46,57,59,66,69,78,80,89,90,96,97,98,99,100,104,108,109,112,121,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,190,192,193,200,202,204,207,208,212,213,216,217,224,229,231,232,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[44,-6,44,-4,-5,44,-7,-8,44,44,44,-2,44,44,44,-123,44,-124,44,44,-140,44,-3,44,44,44,44,44,-150,-129,-18,44,44,-101,-108,-100,-99,-102,-105,-107,-106,-104,-109,-103,44,-120,44,-119,-118,44,-114,44,-115,-113,-142,-143,-144,-146,-145,-141,-24,-151,44,44,44,-9,44,44,44,44,44,44,44,44,-130,-195,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'EXIT':([0,4,10,11,22,28,31,35,43,97,98,104,109,112,121,190,192,193,200,202,204,231,232,241,244,246,283,306,326,327,329,337,338,339,343,],[14,-6,-4,-5,14,-7,-8,14,-2,-3,14,14,-150,-129,-18,-24,-151,14,14,14,-9,-130,-195,14,14,14,14,14,14,14,14,14,14,14,14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arithmetic_additive_operator':([83,222,],[163,163,]),'start_value':([238,],[276,]),'mode_definition':([27,189,],[103,237,]),'result':([9,42,],[51,118,]),'newmode_statement':([0,22,306,326,327,329,337,338,339,343,],[4,4,4,4,4,4,4,4,4,4,]),'synonym_list':([7,],[47,]),'end_value':([276,310,312,332,],[308,331,334,342,]),'dereferenced_reference':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'newmode_list':([27,],[102,]),'array_primitive_value':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'then_clause':([113,284,],[201,314,]),'value_array_element':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'exit_action':([0,22,35,98,104,193,200,202,241,244,246,283,306,326,327,329,337,338,339,343,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'range_enumeration':([107,],[195,]),'array_mode':([48,116,140,188,270,292,328,],[132,132,132,132,132,132,132,]),'character_mode':([48,116,140,188,217,239,270,280,292,293,328,],[133,133,133,133,133,133,133,133,133,133,133,]),'declaration':([39,203,],[117,247,]),'iteration':([107,],[196,]),'composite_mode':([48,116,140,188,270,292,328,],[136,136,136,136,136,136,136,]),'string_concatenation_operator':([83,222,],[165,165,]),'character_string_literal':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'statement_list':([0,306,326,327,337,],[22,329,338,339,343,]),'builtin_name':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'elsif_expression':([225,],[267,]),'bracketed_action':([0,22,35,98,104,193,200,202,241,244,246,283,306,326,327,329,337,338,339,343,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'literal_range':([213,216,217,291,293,],[254,256,257,254,257,]),'constant_expression':([129,212,],[215,253,]),'identifier_list':([7,27,39,122,189,203,230,302,],[48,101,116,48,101,116,270,270,]),'do_action':([0,22,35,98,104,193,200,202,241,244,246,283,306,326,327,329,337,338,339,343,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'relational_operator':([70,],[149,]),'initialization':([205,],[249,]),'operand0':([9,38,42,46,69,80,89,96,99,100,108,129,142,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'right_element':([235,],[274,]),'step_enumeration':([107,],[197,]),'primitive_value':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'start_element':([100,],[185,]),'while_control':([35,110,],[106,199,]),'synonym_definition':([7,122,],[50,209,]),'action_statement':([0,22,35,104,200,202,241,244,246,283,306,326,327,329,337,338,339,343,],[31,31,109,192,109,109,192,109,192,192,31,31,31,31,31,31,31,31,]),'array_slice':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'operand2':([9,38,42,46,69,80,89,96,99,100,108,129,142,157,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,226,227,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'discrete_range_mode':([48,116,140,188,217,239,270,280,292,293,328,],[141,141,141,141,141,141,141,141,141,141,141,]),'conditional_expression':([9,38,42,46,69,80,89,96,99,100,108,129,142,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'result_action':([0,22,35,98,104,193,200,202,241,244,246,283,306,326,327,329,337,338,339,343,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'discrete_mode':([48,116,140,188,217,239,270,280,292,293,328,],[130,130,130,130,261,279,130,313,130,261,130,]),'operand1':([9,38,42,46,69,80,89,96,99,100,108,129,142,157,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[83,83,83,83,83,83,83,83,83,83,83,83,83,222,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'character_literal':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'procedure_statement':([0,22,306,326,327,329,337,338,339,343,],[28,28,28,28,28,28,28,28,28,28,]),'literal':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,252,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'procedure_call':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'array_location':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'boolean_expression':([38,80,108,245,265,297,],[113,162,198,284,295,321,]),'program':([0,],[1,]),'formal_parameter_list':([230,],[271,]),'action_statement_list':([35,200,202,244,],[104,241,246,283,]),'procedure_definition':([98,],[182,]),'operand4':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[54,54,54,54,143,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'declaration_statement':([0,22,306,326,327,329,337,338,339,343,],[10,10,10,10,10,10,10,10,10,10,]),'index_mode':([217,293,],[258,318,]),'else_expression':([225,267,],[268,298,]),'formal_parameter':([230,302,],[272,324,]),'monadic_operator':([9,38,42,46,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'parameter_spec':([270,],[301,]),'array_element':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'location':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[15,60,15,15,60,60,60,60,144,60,60,60,60,15,60,60,15,60,60,60,60,60,60,60,15,15,15,60,60,60,60,60,60,60,60,60,60,15,15,60,15,60,60,60,60,15,60,60,60,60,15,60,60,15,15,15,15,15,15,15,]),'return_action':([0,22,35,98,104,193,200,202,241,244,246,283,306,326,327,329,337,338,339,343,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'integer_literal':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'boolean_mode':([48,116,140,188,217,239,270,280,292,293,328,],[138,138,138,138,138,138,138,138,138,138,138,]),'reference_mode':([48,116,140,188,270,292,328,],[139,139,139,139,139,139,139,]),'assigning_operator':([15,],[89,]),'expression_list':([46,142,],[119,219,]),'string_slice':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'else_clause':([201,314,],[242,335,]),'if_action':([0,22,35,98,104,193,200,202,241,244,246,283,306,326,327,329,337,338,339,343,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'operator1':([70,],[157,]),'operand3':([9,38,42,46,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,223,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'string_mode':([48,116,140,188,270,292,328,],[123,123,123,123,123,123,123,]),'identifier':([0,7,9,14,22,27,35,38,39,42,46,48,57,59,69,80,89,96,98,99,100,104,107,108,116,122,124,129,140,142,157,159,163,165,188,189,193,200,202,203,207,208,212,213,216,217,224,229,230,235,238,239,241,244,245,246,248,263,265,266,270,280,283,289,291,292,293,297,302,306,309,311,326,327,328,329,337,338,339,343,],[25,49,67,86,25,49,105,67,49,67,67,128,67,67,67,67,67,67,179,67,67,105,194,67,128,49,210,67,128,67,67,67,67,67,128,49,179,105,105,49,67,67,67,67,67,259,67,67,49,67,67,278,105,105,67,105,67,67,67,67,128,278,105,67,67,128,259,67,49,25,67,67,25,25,128,25,25,25,25,25,]),'declaration_list':([39,],[115,]),'left_element':([100,],[186,]),'expression':([9,38,42,46,69,80,89,96,99,100,108,129,142,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[71,114,71,120,145,114,170,176,176,187,114,214,220,250,251,214,255,255,255,264,176,275,277,114,285,294,114,296,315,316,255,114,330,333,]),'mode':([48,116,140,188,270,292,328,],[127,205,218,236,300,317,340,]),'result_spec':([273,303,],[304,325,]),'referenced_location':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'parameter':([96,99,229,291,],[177,177,269,177,]),'value_array_slice':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'arithmetic_multiplicative_operator':([79,226,227,],[159,159,159,]),'step_value':([276,],[310,]),'call_action':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[30,77,30,30,77,77,77,77,77,77,77,77,77,30,77,77,30,77,77,77,77,77,77,77,30,30,30,77,77,77,77,77,77,77,77,77,77,30,30,77,30,77,77,77,77,30,77,77,77,77,30,77,77,30,30,30,30,30,30,30,]),'builtin_call':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'boolean_literal':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'integer_mode':([48,116,140,188,217,239,270,280,292,293,328,],[131,131,131,131,131,131,131,131,131,131,131,]),'assignment_action':([0,22,35,98,104,193,200,202,241,244,246,283,306,326,327,329,337,338,339,343,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'parameter_list':([96,99,291,],[178,184,184,]),'membership_operator':([70,],[148,]),'string_element':([0,9,22,35,38,42,46,57,59,69,80,89,96,98,99,100,104,108,129,142,157,159,163,165,193,200,202,207,208,212,213,216,217,224,229,235,238,241,244,245,246,248,263,265,266,283,289,291,293,297,306,309,311,326,327,329,337,338,339,343,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'action':([0,22,35,98,104,193,200,202,241,244,246,283,306,326,327,329,337,338,339,343,],[37,37,37,181,37,181,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'control_part':([35,],[111,]),'synonym_statement':([0,22,306,326,327,329,337,338,339,343,],[11,11,11,11,11,11,11,11,11,11,]),'then_expression':([162,295,321,],[225,320,336,]),'for_control':([35,],[110,]),'empty_literal':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,211,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'list_index_mode':([217,],[260,]),'statement':([0,22,306,326,327,329,337,338,339,343,],[43,97,43,43,43,97,43,97,97,97,]),'parenthesized_expression':([9,38,42,46,57,69,80,89,96,99,100,108,129,142,157,159,163,165,207,208,212,213,216,217,224,229,235,238,245,248,263,265,266,289,291,293,297,309,311,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',18),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',23),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',36),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',41),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',45),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',46),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',55),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',56),
  ('initialization -> EQUALS expression','initialization',2,'p_initialization','parser.py',65),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',71),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',72),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',80),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',85),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',91),
  ('synonym_list -> synonym_list COMMA synonym_definition','synonym_list',3,'p_synonym_list','parser.py',92),
  ('synonym_definition -> identifier_list mode EQUALS constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',101),
  ('synonym_definition -> identifier_list EQUALS constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',102),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',111),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',117),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',123),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',124),
  ('mode_definition -> identifier_list EQUALS mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> identifier','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',151),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',157),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',163),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',169),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',175),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',176),
  ('literal_range -> expression COLON expression','literal_range',3,'p_literal_range','parser.py',181),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',187),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',192),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',193),
  ('string_mode -> CHARS LBRACKET literal RBRACKET','string_mode',4,'p_string_mode','parser.py',198),
  ('array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode','array_mode',5,'p_array_mode','parser.py',204),
  ('list_index_mode -> index_mode','list_index_mode',1,'p_list_index_mode','parser.py',209),
  ('list_index_mode -> list_index_mode COMMA index_mode','list_index_mode',3,'p_list_index_mode','parser.py',210),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',218),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',219),
  ('location -> identifier','location',1,'p_location','parser.py',225),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',226),
  ('location -> array_element','location',1,'p_location','parser.py',227),
  ('location -> array_slice','location',1,'p_location','parser.py',228),
  ('location -> call_action','location',1,'p_location','parser.py',229),
  ('location -> string_slice','location',1,'p_location','parser.py',230),
  ('location -> string_element','location',1,'p_location','parser.py',231),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',237),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','parser.py',243),
  ('start_element -> expression','start_element',1,'p_start_element','parser.py',250),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','parser.py',256),
  ('left_element -> expression','left_element',1,'p_left_element','parser.py',262),
  ('right_element -> expression','right_element',1,'p_right_element','parser.py',268),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',274),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',280),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',281),
  ('array_slice -> array_location LBRACKET expression COLON expression RBRACKET','array_slice',6,'p_array_slice','parser.py',290),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',296),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',302),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',303),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',304),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',305),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',311),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',312),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',313),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',314),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',315),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',321),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',327),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',328),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',334),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',340),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',346),
  ('value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','parser.py',352),
  ('value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',358),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',364),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',370),
  ('expression -> operand0','expression',1,'p_expression','parser.py',376),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',377),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',383),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',384),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',393),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',399),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',405),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',411),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',412),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',421),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',422),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',432),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',433),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',439),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',440),
  ('relational_operator -> EQ','relational_operator',1,'p_relational_operator','parser.py',441),
  ('relational_operator -> NE','relational_operator',1,'p_relational_operator','parser.py',442),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','parser.py',443),
  ('relational_operator -> GEQ','relational_operator',1,'p_relational_operator','parser.py',444),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','parser.py',445),
  ('relational_operator -> LEQ','relational_operator',1,'p_relational_operator','parser.py',446),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',452),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',458),
  ('operand1 -> operand1 arithmetic_additive_operator operand2','operand1',3,'p_operand1','parser.py',459),
  ('operand1 -> operand1 string_concatenation_operator operand2','operand1',3,'p_operand1','parser.py',460),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',470),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',471),
  ('string_concatenation_operator -> LAND','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',477),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',483),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',484),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',494),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',495),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',496),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',501),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',502),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',512),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',513),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',519),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',520),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',521),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',528),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',534),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','parser.py',535),
  ('action -> bracketed_action','action',1,'p_action','parser.py',544),
  ('action -> assignment_action','action',1,'p_action','parser.py',545),
  ('action -> call_action','action',1,'p_action','parser.py',546),
  ('action -> exit_action','action',1,'p_action','parser.py',547),
  ('action -> return_action','action',1,'p_action','parser.py',548),
  ('action -> result_action','action',1,'p_action','parser.py',549),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',555),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',556),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',562),
  ('assigning_operator -> EQUALS','assigning_operator',1,'p_assigning_operator','parser.py',568),
  ('assigning_operator -> PLUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',569),
  ('assigning_operator -> MINUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',570),
  ('assigning_operator -> TIMES EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',571),
  ('assigning_operator -> DIVIDE EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',572),
  ('assigning_operator -> MODULO EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',573),
  ('assigning_operator -> LAND EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',574),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',582),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',583),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',592),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',597),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',598),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',606),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',607),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',608),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',619),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',620),
  ('control_part -> for_control','control_part',1,'p_control_part','parser.py',629),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','parser.py',630),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',631),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','parser.py',640),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',646),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',647),
  ('step_enumeration -> identifier EQUALS start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',653),
  ('step_enumeration -> identifier EQUALS start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',654),
  ('step_enumeration -> identifier EQUALS start_value DOWN end_value','step_enumeration',5,'p_step_enumeration','parser.py',655),
  ('step_enumeration -> identifier EQUALS start_value step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','parser.py',656),
  ('start_value -> expression','start_value',1,'p_start_value','parser.py',670),
  ('step_value -> BY expression','step_value',2,'p_step_value','parser.py',676),
  ('end_value -> TO expression','end_value',2,'p_end_value','parser.py',682),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',688),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',689),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',698),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',704),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',705),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',711),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',712),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',720),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',721),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',730),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','parser.py',736),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',742),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',743),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',751),
  ('result -> expression','result',1,'p_result','parser.py',757),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',763),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',764),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',774),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',775),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',776),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',777),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',778),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',779),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',780),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',781),
  ('procedure_statement -> identifier COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',787),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END','procedure_definition',6,'p_procedure_definition','parser.py',793),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',794),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',795),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END','procedure_definition',8,'p_procedure_definition','parser.py',796),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',810),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',811),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',820),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',826),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',827),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',836),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',837),
]
