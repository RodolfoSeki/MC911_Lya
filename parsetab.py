
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGEQLTLEQleftPLUSMINUSleftTIMESDIVIDEMODULOID ICONST CCONST SCONST PLUS MINUS TIMES DIVIDE MODULO EQUALS SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET AND LAND OR EQ NE GT GEQ LT LEQ COLON COMMA NOT IF THEN LOWER DCL TYPE ASC PRINT OD READ NULL CHARS TRUE REF NUM DO RETURN DOWN INT TO SYN RESULT UPPER ELSE PROC RETURNS CHAR FOR FI WHILE ABS END EXIT FALSE IN BY LENGTH ELSIF LOC ARRAY BOOLprogram : statement_liststatement_list : statement\n                          | statement_list statement\n        statement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statement\n        declaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declaration\n        declaration : identifier_list mode \n                       | identifier_list mode initialization\n        initialization : EQUALS expression\n        identifier_list : identifier\n                           | identifier_list COMMA identifier\n        identifier : ID  synonym_statement : SYN synonym_list SEMI\n         synonym_list : synonym_definition \n                         | synonym_list COMMA synonym_definition\n         synonym_definition : identifier_list mode EQUALS constant_expression\n                               | identifier_list EQUALS constant_expression\n         constant_expression : expression\n         newmode_statement : TYPE newmode_list SEMI\n         newmode_list : mode_definition \n                         | newmode_list COMMA mode_definition\n         mode_definition : identifier_list EQUALS mode\n         mode : identifier\n                 | discrete_mode\n                 | reference_mode\n                 | composite_mode\n         discrete_mode : integer_mode\n                          | boolean_mode\n                          | character_mode\n                          | discrete_range_mode\n         integer_mode : INT\n         boolean_mode : BOOL\n         character_mode : CHAR\n         discrete_range_mode : identifier LPAREN literal_range RPAREN\n                                | discrete_mode LPAREN literal_range RPAREN\n         literal_range : expression COLON expression\n         reference_mode : REF mode\n         composite_mode : string_mode\n                           | array_mode\n         string_mode : CHARS LBRACKET integer_literal RBRACKET\n         array_mode : ARRAY LBRACKET list_index_mode RBRACKET mode\n         list_index_mode : index_mode\n                            | list_index_mode COMMA index_mode\n         index_mode : discrete_mode\n                       | literal_range\n         location : identifier\n                     | dereferenced_reference\n                     | array_element\n                     | array_slice\n                     | call_action\n         dereferenced_reference : location ARROW\n         array_element : array_location LBRACKET expression_list RBRACKET\n         expression_list : expression\n                            | expression_list COMMA expression\n         array_slice : array_location LBRACKET expression COLON expression RBRACKET\n         array_location : location\n         primitive_value : literal\n                            | value_array_element\n                            | value_array_slice\n                            | parenthesized_expression\n         literal : integer_literal\n                    | boolean_literal\n                    | character_literal\n                    | empty_literal\n                    | character_string_literal\n         integer_literal : ICONST\n         boolean_literal : FALSE\n                            | TRUE\n         character_literal : CCONST\n         empty_literal : NULL\n         character_string_literal : SCONST\n         value_array_element : array_primitive_value LBRACKET expression_list RBRACKET\n         value_array_slice : array_primitive_value LBRACKET expression COLON expression RBRACKET\n         array_primitive_value : primitive_value\n         parenthesized_expression : LPAREN expression RPAREN\n         expression : operand0\n                       | conditional_expression\n         conditional_expression : IF boolean_expression then_expression else_expression FI\n                                   | IF boolean_expression then_expression elsif_expression else_expression FI\n         boolean_expression : expression\n         then_expression : THEN expression\n         else_expression : ELSE expression\n         elsif_expression : ELSIF boolean_expression then_expression\n                             | elsif_expression ELSIF boolean_expression then_expression\n         operand0 : operand1\n                     | operand0 operator1 operand1\n         operator1 : relational_operator\n                      | membership_operator\n         relational_operator : AND\n                                | OR \n                                | EQ \n                                | NE\n                                | GT\n                                | GEQ\n                                | LT\n                                | LEQ\n         membership_operator : IN\n         operand1 : operand2\n                     | operand1 arithmetic_additive_operator operand2\n                     | operand1 string_concatenation_operator operand2\n         arithmetic_additive_operator : PLUS\n                                         | MINUS\n         string_concatenation_operator : LAND\n         operand2 : operand3 \n                     | operand2 arithmetic_multiplicative_operator operand3\n         arithmetic_multiplicative_operator : TIMES\n                                               | DIVIDE\n                                               | MODULO \n         operand3 : operand4\n                     | monadic_operator operand4\n         monadic_operator : MINUS\n                             | NOT \n         operand4 : location\n                     | referenced_location\n                     | primitive_value\n         referenced_location : ARROW location\n         action_statement : action SEMI\n                             | identifier COLON action SEMI\n         action : bracketed_action\n                   | assignment_action\n                   | call_action\n                   | exit_action\n                   | return_action\n                   | result_action\n         bracketed_action : if_action\n                             | do_action\n         assignment_action : location assigning_operator expression\n         assigning_operator : EQUALS\n                               | PLUS EQUALS\n                               | MINUS EQUALS\n                               | TIMES EQUALS\n                               | DIVIDE EQUALS\n                               | MODULO EQUALS\n                               | LAND EQUALS\n         if_action : IF boolean_expression then_clause FI\n                      | IF boolean_expression then_clause else_clause FI\n         then_clause : THEN action_statement_list\n        action_statement_list : action_statement\n                                 | action_statement_list action_statement\n         else_clause : ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause \n                        | ELSIF boolean_expression then_clause else_clause\n         do_action : DO action_statement_list OD\n                      | DO control_part SEMI action_statement_list OD\n         control_part : for_control \n                         | for_control while_control\n                         | while_control\n         for_control : FOR iteration\n         iteration : step_enumeration\n                      | range_enumeration\n         step_enumeration : identifier EQUALS start_value end_value\n                             | identifier EQUALS start_value step_value end_value\n                             | identifier EQUALS start_value DOWN end_value\n                             | identifier EQUALS start_value step_value DOWN end_value\n         start_value : expression\n         step_value : BY expression\n         end_value : TO expression\n         range_enumeration : identifier IN discrete_range_mode \n                              | identifier DOWN IN discrete_range_mode\n         while_control : WHILE boolean_expression\n         call_action : procedure_call\n                        | builtin_call\n         procedure_call : identifier LPAREN  RPAREN\n                           | identifier LPAREN parameter_list RPAREN\n         parameter_list : parameter\n                           | parameter_list COMMA parameter\n         parameter : expression\n         exit_action : EXIT identifier\n         return_action : RETURN \n                          | RETURN result\n         result_action : RESULT result\n         result : expression\n         builtin_call : builtin_name LPAREN RPAREN\n                         | builtin_name LPAREN parameter_list RPAREN\n         builtin_name : ABS\n                         | ASC\n                         | NUM\n                         | UPPER\n                         | LOWER\n                         | LENGTH\n                         | READ\n                         | PRINT\n         procedure_statement : identifier COLON procedure_definition SEMI\n         procedure_definition : PROC LPAREN RPAREN SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END\n                                 | PROC LPAREN RPAREN result_spec SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END\n         formal_parameter_list : formal_parameter \n                                  | formal_parameter_list COMMA formal_parameter\n         formal_parameter : identifier_list parameter_spec\n         parameter_spec : mode \n                           | mode LOC\n         result_spec : RETURNS LPAREN mode RPAREN\n                        | RETURNS LPAREN mode LOC RPAREN\n        '
    
_lr_action_items = {'ABS':([0,5,6,11,14,20,23,25,34,35,39,41,44,45,50,59,69,71,74,76,81,82,85,91,93,94,101,107,111,123,124,125,126,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,169,174,176,178,184,186,189,190,191,192,194,195,196,200,201,202,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[16,-4,16,-6,16,16,-7,-8,-2,16,16,-5,16,16,16,-116,16,16,-117,16,-122,16,16,16,16,-143,-133,16,-3,-113,16,-112,-111,-106,16,-108,16,-107,16,16,-93,-94,16,-101,-92,-97,-96,-100,-98,-99,-102,-95,16,-18,16,-144,16,-9,-138,-136,-134,-137,-135,-139,-24,16,-188,-123,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'NUM':([0,5,6,11,14,20,23,25,34,35,39,41,44,45,50,59,69,71,74,76,81,82,85,91,93,94,101,107,111,123,124,125,126,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,169,174,176,178,184,186,189,190,191,192,194,195,196,200,201,202,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[9,-4,9,-6,9,9,-7,-8,-2,9,9,-5,9,9,9,-116,9,9,-117,9,-122,9,9,9,9,-143,-133,9,-3,-113,9,-112,-111,-106,9,-108,9,-107,9,9,-93,-94,9,-101,-92,-97,-96,-100,-98,-99,-102,-95,9,-18,9,-144,9,-9,-138,-136,-134,-137,-135,-139,-24,9,-188,-123,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'PLUS':([1,10,17,21,27,28,30,31,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,90,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-51,-53,-166,-17,-52,105,-167,-55,-54,-114,-51,-103,-65,-119,-71,128,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-51,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,128,-179,-57,-77,-51,-60,-78,]),'RBRACKET':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,153,154,157,158,160,161,162,165,166,199,204,207,208,214,215,216,217,218,220,255,256,257,262,263,264,265,267,287,289,290,292,296,313,315,316,319,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,-56,-168,-121,-115,-178,-58,220,-36,-34,-32,-33,-35,-37,-38,-169,-110,-104,-105,-80,-58,255,-91,-179,-57,-77,290,-59,294,-50,-47,-49,297,-83,315,-60,-39,-40,-84,-78,-41,-48,]),'NE':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,144,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-51,-60,-78,]),'LPAREN':([1,6,7,9,12,14,16,21,26,33,37,39,40,43,44,47,50,59,71,74,76,82,85,90,93,101,107,122,123,124,125,126,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,148,149,150,155,157,158,160,161,162,165,166,169,170,189,190,191,192,194,195,200,205,210,219,221,222,223,224,229,233,237,247,249,254,261,265,271,272,273,280,284,291,292,293,295,296,298,299,303,],[44,76,-183,-182,82,76,-180,-17,-181,-184,-185,76,-187,-186,76,44,76,-116,76,-117,76,76,76,44,76,-133,76,203,-113,76,-112,-111,-106,76,-108,76,-107,76,-93,-94,76,-101,-92,-97,-96,-100,-98,-99,-102,-95,222,-36,-34,-32,-33,-35,-37,-38,76,229,-138,-136,-134,-137,-135,-139,76,76,76,76,76,76,76,76,76,76,76,76,76,76,293,229,222,229,-35,307,76,76,-39,76,76,-40,-35,76,76,]),'INT':([21,86,87,99,167,198,224,226,234,242,268,294,295,307,],[-17,-15,157,157,157,157,157,-16,157,157,157,157,157,157,]),'IF':([0,5,6,11,14,20,23,25,34,35,39,41,44,45,50,76,81,82,85,91,93,94,101,107,111,133,138,169,174,176,178,184,186,189,190,191,192,194,195,196,200,201,202,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[6,-4,50,-6,50,6,-7,-8,-2,6,50,-5,50,6,50,50,-122,50,50,6,50,-143,-133,50,-3,6,50,50,-18,6,-144,6,-9,-138,-136,-134,-137,-135,-139,-24,50,-188,-123,50,6,50,6,50,50,50,50,50,50,50,6,50,50,50,6,50,6,50,50,50,50,50,50,6,6,6,6,6,6,6,]),'ICONST':([6,14,39,44,50,59,71,74,76,82,85,93,101,107,123,124,125,126,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,148,149,150,169,189,190,191,192,194,195,200,205,210,219,221,222,223,224,229,230,233,237,247,249,254,284,291,293,295,299,303,],[53,53,53,53,53,-116,53,-117,53,53,53,53,-133,53,-113,53,-112,-111,-106,53,-108,53,-107,53,-93,-94,53,-101,-92,-97,-96,-100,-98,-99,-102,-95,53,-138,-136,-134,-137,-135,-139,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'LENGTH':([0,5,6,11,14,20,23,25,34,35,39,41,44,45,50,59,69,71,74,76,81,82,85,91,93,94,101,107,111,123,124,125,126,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,169,174,176,178,184,186,189,190,191,192,194,195,196,200,201,202,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[37,-4,37,-6,37,37,-7,-8,-2,37,37,-5,37,37,37,-116,37,37,-117,37,-122,37,37,37,37,-143,-133,37,-3,-113,37,-112,-111,-106,37,-108,37,-107,37,37,-93,-94,37,-101,-92,-97,-96,-100,-98,-99,-102,-95,37,-18,37,-144,37,-9,-138,-136,-134,-137,-135,-139,-24,37,-188,-123,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'RETURNS':([243,281,],[280,280,]),'COMMA':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,86,87,88,89,98,99,100,104,112,113,114,116,117,118,119,135,136,151,152,153,154,155,157,158,160,161,162,163,164,165,166,170,171,173,188,199,204,207,208,214,215,216,217,218,220,225,226,227,228,231,236,238,239,240,241,242,244,245,255,257,260,262,263,264,265,275,276,277,287,290,292,296,297,304,310,313,315,316,317,318,319,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,-15,168,-19,175,187,168,-10,-56,197,168,-25,-172,-168,200,-170,-121,-115,-178,200,-58,221,-28,-36,-34,-32,-33,-35,-43,-30,-37,-38,-29,-44,-31,-12,-169,-110,-104,-105,-80,-58,221,-91,-179,-57,-42,-16,-23,-22,-20,-11,-13,-26,-27,-171,168,282,-193,-77,-59,-21,295,-50,-47,-49,-14,-196,-195,-83,-60,-39,-40,-45,-197,-194,-84,-78,-41,-172,-46,-48,]),'ARRAY':([21,86,87,99,167,198,226,242,294,307,],[-17,-15,159,159,159,159,-16,159,159,159,]),'NULL':([6,14,39,44,50,59,71,74,76,82,85,93,101,107,123,124,125,126,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,148,149,150,169,189,190,191,192,194,195,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[56,56,56,56,56,-116,56,-117,56,56,56,56,-133,56,-113,56,-112,-111,-106,56,-108,56,-107,56,-93,-94,56,-101,-92,-97,-96,-100,-98,-99,-102,-95,56,-138,-136,-134,-137,-135,-139,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'GEQ':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,148,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-51,-60,-78,]),'IN':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,182,199,204,207,208,214,217,218,220,232,255,261,290,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,149,-56,-168,-121,-115,-178,234,-169,-110,-104,-105,-80,-91,-179,-57,268,-77,-51,-60,-78,]),'SEMI':([2,3,4,8,10,13,17,21,22,27,30,31,32,38,39,42,46,47,48,49,51,52,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,83,84,88,89,92,96,97,98,100,104,110,112,114,115,117,120,121,135,136,151,155,157,158,160,161,162,163,164,165,166,170,171,173,177,179,180,181,183,185,188,193,199,204,207,208,213,214,217,218,220,225,227,228,231,236,238,239,240,243,252,255,260,273,274,275,278,281,287,290,292,296,297,298,302,308,313,315,318,320,321,323,326,331,332,334,336,337,338,],[-130,-124,-129,81,-53,-125,-166,-17,-131,-52,-167,-126,-54,-127,-174,-128,-114,-51,-103,-65,-119,-85,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,-177,-176,-19,174,-152,184,-150,186,-10,-56,-173,196,-25,-175,-168,201,202,-121,-115,-178,-28,-36,-34,-32,-33,-35,-43,-30,-37,-38,-29,-44,-31,-148,-165,-154,-155,-153,-151,-12,-132,-169,-110,-104,-105,-140,-80,-91,-179,-57,-42,-23,-22,-20,-11,-13,-26,-27,279,-141,-77,-21,-163,-149,-14,305,309,-83,-60,-39,-40,-45,-164,-156,328,-84,-78,-46,-162,-158,-157,-189,-159,-191,-198,-190,-199,-192,]),'ELSIF':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,81,94,104,117,134,135,136,151,178,199,202,204,206,207,208,209,214,217,218,220,246,248,255,287,288,290,311,313,315,330,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,-122,-143,-56,-168,210,-121,-115,-178,-144,-169,-123,-110,247,-104,-105,-142,-80,-91,-179,-57,-86,284,-77,-83,210,-60,-88,-84,-78,-89,]),'RESULT':([0,5,11,20,23,25,34,35,41,45,81,91,94,111,133,174,176,178,184,186,196,201,202,209,212,235,253,279,305,306,309,325,328,329,335,],[14,-4,-6,14,-7,-8,-2,14,-5,14,-122,14,-143,-3,14,-18,14,-144,14,-9,-24,-188,-123,14,14,14,14,14,14,14,14,14,14,14,14,]),'THEN':([10,17,21,27,30,32,46,47,48,49,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,70,72,73,75,77,79,80,104,117,127,135,136,151,199,204,207,208,214,217,218,220,251,255,283,287,290,312,313,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-85,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,133,-74,-55,-73,-62,-120,-67,-109,-66,-81,-56,-168,205,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,133,-77,205,-83,-60,205,-84,-78,]),'MODULO':([1,10,17,21,27,28,30,31,32,46,47,48,49,51,53,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,90,104,117,135,136,151,199,204,207,208,214,218,220,255,261,290,315,],[-51,-53,-166,-17,-52,102,-167,-55,-54,-114,-51,123,-65,-119,-71,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-51,-56,-168,-121,-115,-178,-169,-110,123,123,-80,-179,-57,-77,-51,-60,-78,]),'WHILE':([10,17,20,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,97,104,117,135,136,151,180,181,183,199,204,207,208,214,217,218,220,255,273,287,290,292,296,298,302,313,315,320,321,323,331,],[-53,-166,93,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,93,-56,-168,-121,-115,-178,-154,-155,-153,-169,-110,-104,-105,-80,-91,-179,-57,-77,-163,-83,-60,-39,-40,-164,-156,-84,-78,-162,-158,-157,-159,]),'CHAR':([21,86,87,99,167,198,224,226,234,242,268,294,295,307,],[-17,-15,166,166,166,166,166,-16,166,166,166,166,166,166,]),'DOWN':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,182,199,204,207,208,214,217,218,220,255,269,270,287,290,301,313,315,324,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,-56,-168,-121,-115,-178,232,-169,-110,-104,-105,-80,-91,-179,-57,-77,-160,300,-83,-60,322,-84,-78,-161,]),'PROC':([45,],[122,]),'SYN':([0,5,11,23,25,34,35,41,81,111,174,186,196,201,202,279,305,306,309,325,328,329,335,],[19,-4,-6,-7,-8,-2,19,-5,-122,-3,-18,-9,-24,-188,-123,19,19,19,19,19,19,19,19,]),'DO':([0,5,11,20,23,25,34,35,41,45,81,91,94,111,133,174,176,178,184,186,196,201,202,209,212,235,253,279,305,306,309,325,328,329,335,],[20,-4,-6,20,-7,-8,-2,20,-5,20,-122,20,-143,-3,20,-18,20,-144,20,-9,-24,-188,-123,20,20,20,20,20,20,20,20,20,20,20,20,]),'LOWER':([0,5,6,11,14,20,23,25,34,35,39,41,44,45,50,59,69,71,74,76,81,82,85,91,93,94,101,107,111,123,124,125,126,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,169,174,176,178,184,186,189,190,191,192,194,195,196,200,201,202,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[33,-4,33,-6,33,33,-7,-8,-2,33,33,-5,33,33,33,-116,33,33,-117,33,-122,33,33,33,33,-143,-133,33,-3,-113,33,-112,-111,-106,33,-108,33,-107,33,33,-93,-94,33,-101,-92,-97,-96,-100,-98,-99,-102,-95,33,-18,33,-144,33,-9,-138,-136,-134,-137,-135,-139,-24,33,-188,-123,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'COLON':([1,10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,90,104,117,135,136,151,153,199,204,207,208,214,215,217,218,220,255,258,261,287,290,313,315,317,],[45,-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,176,-56,-168,-121,-115,-178,219,-169,-110,-104,-105,-80,254,-91,-179,-57,-77,291,-51,-83,-60,-84,-78,291,]),'LOC':([21,155,157,158,160,161,162,163,164,165,166,170,171,173,225,276,292,296,297,318,327,],[-17,-28,-36,-34,-32,-33,-35,-43,-30,-37,-38,-29,-44,-31,-42,304,-39,-40,-45,-46,333,]),'ASC':([0,5,6,11,14,20,23,25,34,35,39,41,44,45,50,59,69,71,74,76,81,82,85,91,93,94,101,107,111,123,124,125,126,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,169,174,176,178,184,186,189,190,191,192,194,195,196,200,201,202,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[26,-4,26,-6,26,26,-7,-8,-2,26,26,-5,26,26,26,-116,26,26,-117,26,-122,26,26,26,26,-143,-133,26,-3,-113,26,-112,-111,-106,26,-108,26,-107,26,26,-93,-94,26,-101,-92,-97,-96,-100,-98,-99,-102,-95,26,-18,26,-144,26,-9,-138,-136,-134,-137,-135,-139,-24,26,-188,-123,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'FOR':([20,],[95,]),'GT':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,147,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-51,-60,-78,]),'EXIT':([0,5,11,20,23,25,34,35,41,45,81,91,94,111,133,174,176,178,184,186,196,201,202,209,212,235,253,279,305,306,309,325,328,329,335,],[29,-4,-6,29,-7,-8,-2,29,-5,29,-122,29,-143,-3,29,-18,29,-144,29,-9,-24,-188,-123,29,29,29,29,29,29,29,29,29,29,29,29,]),'DIVIDE':([1,10,17,21,27,28,30,31,32,46,47,48,49,51,53,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,90,104,117,135,136,151,199,204,207,208,214,218,220,255,261,290,315,],[-51,-53,-166,-17,-52,106,-167,-55,-54,-114,-51,125,-65,-119,-71,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-51,-56,-168,-121,-115,-178,-169,-110,125,125,-80,-179,-57,-77,-51,-60,-78,]),'DCL':([0,5,11,23,25,34,35,41,81,111,174,186,196,201,202,279,305,306,309,325,328,329,335,],[24,-4,-6,-7,-8,-2,24,-5,-122,-3,-18,-9,-24,-188,-123,24,24,24,24,24,24,24,24,]),'UPPER':([0,5,6,11,14,20,23,25,34,35,39,41,44,45,50,59,69,71,74,76,81,82,85,91,93,94,101,107,111,123,124,125,126,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,169,174,176,178,184,186,189,190,191,192,194,195,196,200,201,202,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[7,-4,7,-6,7,7,-7,-8,-2,7,7,-5,7,7,7,-116,7,7,-117,7,-122,7,7,7,7,-143,-133,7,-3,-113,7,-112,-111,-106,7,-108,7,-107,7,7,-93,-94,7,-101,-92,-97,-96,-100,-98,-99,-102,-95,7,-18,7,-144,7,-9,-138,-136,-134,-137,-135,-139,-24,7,-188,-123,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'END':([5,11,23,25,34,41,81,111,174,186,196,201,202,306,325,329,335,],[-4,-6,-7,-8,-2,-5,-122,-3,-18,-9,-24,-188,-123,326,332,336,338,]),'AND':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,140,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-51,-60,-78,]),'SCONST':([6,14,39,44,50,59,71,74,76,82,85,93,101,107,123,124,125,126,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,148,149,150,169,189,190,191,192,194,195,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[65,65,65,65,65,-116,65,-117,65,65,65,65,-133,65,-113,65,-112,-111,-106,65,-108,65,-107,65,-93,-94,65,-101,-92,-97,-96,-100,-98,-99,-102,-95,65,-138,-136,-134,-137,-135,-139,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'MINUS':([1,6,10,14,17,21,27,28,30,31,32,39,44,46,47,48,49,50,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,76,77,79,82,85,90,93,101,104,107,117,123,124,125,126,128,129,130,131,132,135,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,169,189,190,191,192,194,195,199,200,204,205,207,208,210,214,217,218,219,220,221,222,223,224,229,233,237,247,249,254,255,261,284,290,291,293,295,299,303,315,],[-51,59,-53,59,-166,-17,-52,108,-167,-55,-54,59,59,-114,-51,-103,-65,59,-119,-71,132,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,59,-109,-66,59,59,-51,59,-133,-56,59,-168,-113,59,-112,-111,-106,59,-108,59,-107,-121,-115,59,-93,-94,59,-101,-92,-97,-96,-100,-98,-99,-102,-95,-178,59,-138,-136,-134,-137,-135,-139,-169,59,-110,59,-104,-105,59,-80,132,-179,59,-57,59,59,59,59,59,59,59,59,59,59,-77,-51,59,-60,59,59,59,59,59,-78,]),'CCONST':([6,14,39,44,50,59,71,74,76,82,85,93,101,107,123,124,125,126,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,148,149,150,169,189,190,191,192,194,195,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[67,67,67,67,67,-116,67,-117,67,67,67,67,-133,67,-113,67,-112,-111,-106,67,-108,67,-107,67,-93,-94,67,-101,-92,-97,-96,-100,-98,-99,-102,-95,67,-138,-136,-134,-137,-135,-139,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'LBRACKET':([1,10,15,17,21,27,28,30,31,32,47,49,53,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,78,79,90,104,117,135,151,159,172,199,214,218,220,255,261,290,315,],[-51,-53,85,-166,-17,-52,-61,-167,-55,-54,-51,-65,-71,-68,-75,-63,-70,-69,-64,-61,-72,-76,-74,-55,-73,-62,-79,-67,138,-66,-51,-56,-168,-61,-178,224,230,-169,-80,-179,-57,-77,-51,-60,-78,]),'OD':([81,91,94,178,202,235,],[-122,177,-143,-144,-123,274,]),'TO':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,269,270,287,290,300,301,313,315,322,324,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-160,299,-83,-60,299,299,-84,-78,299,-161,]),'FI':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,81,94,104,117,134,135,136,151,178,199,202,204,207,208,209,211,214,217,218,220,250,253,255,285,286,287,288,290,313,314,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,-122,-143,-56,-168,213,-121,-115,-178,-144,-169,-123,-110,-104,-105,-142,252,-80,-91,-179,-57,287,-145,-77,313,-87,-83,-146,-60,-84,-147,-78,]),'ARROW':([1,6,10,14,17,21,27,28,30,31,32,39,44,47,50,59,63,68,71,74,76,82,85,90,93,101,104,107,117,123,124,125,126,128,129,130,131,132,135,138,139,140,141,142,143,144,145,146,147,148,149,150,151,169,189,190,191,192,194,195,199,200,205,210,218,219,220,221,222,223,224,229,233,237,247,249,254,261,284,290,291,293,295,299,303,],[-51,69,-53,69,-166,-17,-52,104,-167,-55,-54,69,69,-51,69,-116,104,-55,69,-117,69,69,69,-51,69,-133,-56,69,-168,-113,69,-112,-111,-106,69,-108,69,-107,104,69,-93,-94,69,-101,-92,-97,-96,-100,-98,-99,-102,-95,-178,69,-138,-136,-134,-137,-135,-139,-169,69,69,69,-179,69,-57,69,69,69,69,69,69,69,69,69,69,-51,69,-60,69,69,69,69,69,]),'TIMES':([1,10,17,21,27,28,30,31,32,46,47,48,49,51,53,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,90,104,117,135,136,151,199,204,207,208,214,218,220,255,261,290,315,],[-51,-53,-166,-17,-52,103,-167,-55,-54,-114,-51,126,-65,-119,-71,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-51,-56,-168,-121,-115,-178,-169,-110,126,126,-80,-179,-57,-77,-51,-60,-78,]),'TRUE':([6,14,39,44,50,59,71,74,76,82,85,93,101,107,123,124,125,126,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,148,149,150,169,189,190,191,192,194,195,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[70,70,70,70,70,-116,70,-117,70,70,70,70,-133,70,-113,70,-112,-111,-106,70,-108,70,-107,70,-93,-94,70,-101,-92,-97,-96,-100,-98,-99,-102,-95,70,-138,-136,-134,-137,-135,-139,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'OR':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,150,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-51,-60,-78,]),'TYPE':([0,5,11,23,25,34,35,41,81,111,174,186,196,201,202,279,305,306,309,325,328,329,335,],[36,-4,-6,-7,-8,-2,36,-5,-122,-3,-18,-9,-24,-188,-123,36,36,36,36,36,36,36,36,]),'PRINT':([0,5,6,11,14,20,23,25,34,35,39,41,44,45,50,59,69,71,74,76,81,82,85,91,93,94,101,107,111,123,124,125,126,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,169,174,176,178,184,186,189,190,191,192,194,195,196,200,201,202,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[40,-4,40,-6,40,40,-7,-8,-2,40,40,-5,40,40,40,-116,40,40,-117,40,-122,40,40,40,40,-143,-133,40,-3,-113,40,-112,-111,-106,40,-108,40,-107,40,40,-93,-94,40,-101,-92,-97,-96,-100,-98,-99,-102,-95,40,-18,40,-144,40,-9,-138,-136,-134,-137,-135,-139,-24,40,-188,-123,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'RPAREN':([10,17,21,27,30,32,44,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,82,104,116,117,118,119,135,136,137,151,152,155,157,158,160,161,162,163,164,165,166,170,171,173,199,203,204,207,208,214,217,218,220,225,241,244,245,255,259,266,276,277,287,290,292,293,296,297,304,310,313,315,316,317,318,327,333,],[-53,-166,-17,-52,-167,-54,117,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,151,-56,-172,-168,199,-170,-121,-115,214,-178,218,-28,-36,-34,-32,-33,-35,-43,-30,-37,-38,-29,-44,-31,-169,243,-110,-104,-105,-80,-91,-179,-57,-42,-171,281,-193,-77,292,296,-196,-195,-83,-60,-39,117,-40,-45,-197,-194,-84,-78,-41,-172,-46,334,337,]),'EQ':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,145,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-51,-60,-78,]),'ID':([0,5,6,11,14,19,20,21,23,24,25,29,34,35,36,39,41,44,45,50,59,69,71,74,76,81,82,85,86,87,91,93,94,95,99,101,107,111,123,124,125,126,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,167,168,169,174,175,176,178,184,186,187,189,190,191,192,194,195,196,197,198,200,201,202,203,205,209,210,212,219,221,222,223,224,226,229,233,234,235,237,242,247,249,253,254,268,279,282,284,291,293,294,295,299,303,305,306,307,309,325,328,329,335,],[21,-4,21,-6,21,21,21,-17,-7,21,-8,21,-2,21,21,21,-5,21,21,21,-116,21,21,-117,21,-122,21,21,-15,21,21,21,-143,21,21,-133,21,-3,-113,21,-112,-111,-106,21,-108,21,-107,21,21,-93,-94,21,-101,-92,-97,-96,-100,-98,-99,-102,-95,21,21,21,-18,21,21,-144,21,-9,21,-138,-136,-134,-137,-135,-139,-24,21,21,21,-188,-123,21,21,21,21,21,21,21,21,21,21,-16,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'EQUALS':([1,10,17,21,27,28,30,31,32,47,86,87,90,102,103,104,105,106,108,109,113,117,151,155,156,157,158,160,161,162,163,164,165,166,170,171,173,182,188,199,218,220,225,226,290,292,296,297,318,],[-51,-53,-166,-17,-52,101,-167,-55,-54,-51,-15,169,-51,189,190,-56,191,192,194,195,198,-168,-178,-28,223,-36,-34,-32,-33,-35,-43,-30,-37,-38,-29,-44,-31,233,237,-169,-179,-57,-42,-16,-60,-39,-40,-45,-46,]),'LAND':([1,10,17,21,27,28,30,31,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,90,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-51,-53,-166,-17,-52,109,-167,-55,-54,-114,-51,-103,-65,-119,-71,130,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-51,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,130,-179,-57,-77,-51,-60,-78,]),'RETURN':([0,5,11,20,23,25,34,35,41,45,81,91,94,111,133,174,176,178,184,186,196,201,202,209,212,235,253,279,305,306,309,325,328,329,335,],[39,-4,-6,39,-7,-8,-2,39,-5,39,-122,39,-143,-3,39,-18,39,-144,39,-9,-24,-188,-123,39,39,39,39,39,39,39,39,39,39,39,39,]),'NOT':([6,14,39,44,50,76,82,85,93,101,107,123,124,125,126,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,148,149,150,169,189,190,191,192,194,195,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[74,74,74,74,74,74,74,74,74,-133,74,-113,74,-112,-111,-106,74,-108,74,-107,74,-93,-94,74,-101,-92,-97,-96,-100,-98,-99,-102,-95,74,-138,-136,-134,-137,-135,-139,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'REF':([21,86,87,99,167,198,226,242,294,307,],[-17,-15,167,167,167,167,-16,167,167,167,]),'BY':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,269,270,287,290,313,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-160,303,-83,-60,-84,-78,]),'BOOL':([21,86,87,99,167,198,224,226,234,242,268,294,295,307,],[-17,-15,165,165,165,165,165,-16,165,165,165,165,165,165,]),'FALSE':([6,14,39,44,50,59,71,74,76,82,85,93,101,107,123,124,125,126,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,148,149,150,169,189,190,191,192,194,195,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[64,64,64,64,64,-116,64,-117,64,64,64,64,-133,64,-113,64,-112,-111,-106,64,-108,64,-107,64,-93,-94,64,-101,-92,-97,-96,-100,-98,-99,-102,-95,64,-138,-136,-134,-137,-135,-139,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'LT':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,146,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-51,-60,-78,]),'CHARS':([21,86,87,99,167,198,226,242,294,307,],[-17,-15,172,172,172,172,-16,172,172,172,]),'ELSE':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,57,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,81,94,104,117,134,135,136,151,178,199,202,204,206,207,208,209,214,217,218,220,246,248,255,287,288,290,311,313,315,330,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-82,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,-81,-122,-143,-56,-168,212,-121,-115,-178,-144,-169,-123,-110,249,-104,-105,-142,-80,-91,-179,-57,-86,249,-77,-83,212,-60,-88,-84,-78,-89,]),'READ':([0,5,6,11,14,20,23,25,34,35,39,41,44,45,50,59,69,71,74,76,81,82,85,91,93,94,101,107,111,123,124,125,126,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,169,174,176,178,184,186,189,190,191,192,194,195,196,200,201,202,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[43,-4,43,-6,43,43,-7,-8,-2,43,43,-5,43,43,43,-116,43,43,-117,43,-122,43,43,43,43,-143,-133,43,-3,-113,43,-112,-111,-106,43,-108,43,-107,43,43,-93,-94,43,-101,-92,-97,-96,-100,-98,-99,-102,-95,43,-18,43,-144,43,-9,-138,-136,-134,-137,-135,-139,-24,43,-188,-123,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'LEQ':([10,17,21,27,30,32,46,47,48,49,51,53,54,55,56,58,60,61,62,63,64,65,67,68,70,72,73,75,77,79,80,104,117,135,136,151,199,204,207,208,214,217,218,220,255,261,290,315,],[-53,-166,-17,-52,-167,-54,-114,-51,-103,-65,-119,-71,-90,-68,-75,-63,-70,-69,-64,-118,-72,-76,-74,-55,-73,-62,-120,-67,-109,-66,142,-56,-168,-121,-115,-178,-169,-110,-104,-105,-80,-91,-179,-57,-77,-51,-60,-78,]),'$end':([5,11,18,23,25,34,35,41,81,111,174,186,196,201,202,],[-4,-6,0,-7,-8,-2,-1,-5,-122,-3,-18,-9,-24,-188,-123,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'identifier':([0,6,14,19,20,24,29,35,36,39,44,45,50,69,71,76,82,85,87,91,93,95,99,107,124,129,131,133,138,141,167,168,169,175,176,184,187,197,198,200,203,205,209,210,212,219,221,222,223,224,229,233,234,235,237,242,247,249,253,254,268,279,282,284,291,293,294,295,299,303,305,306,307,309,325,328,329,335,],[1,47,47,86,90,86,110,1,86,47,47,47,47,47,47,47,47,47,155,90,47,182,155,47,47,47,47,90,47,47,155,226,47,86,47,90,86,86,155,47,86,47,90,47,90,47,47,47,47,261,47,47,271,90,47,155,47,47,90,47,271,1,86,47,47,47,155,261,47,47,1,1,155,1,1,1,1,1,]),'range_enumeration':([95,],[181,]),'declaration_list':([24,],[98,]),'procedure_definition':([45,],[120,]),'builtin_name':([0,6,14,20,35,39,44,45,50,69,71,76,82,85,91,93,107,124,129,131,133,138,141,169,176,184,200,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'conditional_expression':([6,14,39,44,50,76,82,85,93,107,138,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'arithmetic_multiplicative_operator':([48,207,208,],[124,124,124,]),'result_action':([0,20,35,45,91,133,176,184,209,212,235,253,279,305,306,309,325,328,329,335,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'declaration_statement':([0,35,279,305,306,309,325,328,329,335,],[5,5,5,5,5,5,5,5,5,5,]),'operand2':([6,14,39,44,50,76,82,85,93,107,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[48,48,48,48,48,48,48,48,48,48,207,208,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'parenthesized_expression':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'mode_definition':([36,197,],[114,239,]),'referenced_location':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'expression':([6,14,39,44,50,76,82,85,93,107,138,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[52,83,83,116,52,137,116,153,52,193,215,227,116,246,52,256,257,258,227,258,258,269,275,52,286,289,52,316,317,258,320,324,]),'then_clause':([66,251,],[134,288,]),'newmode_statement':([0,35,279,305,306,309,325,328,329,335,],[11,11,11,11,11,11,11,11,11,11,]),'while_control':([20,97,],[92,185,]),'assignment_action':([0,20,35,45,91,133,176,184,209,212,235,253,279,305,306,309,325,328,329,335,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'synonym_definition':([19,175,],[88,231,]),'arithmetic_additive_operator':([54,217,],[129,129,]),'list_index_mode':([224,],[262,]),'reference_mode':([87,99,167,198,242,294,307,],[164,164,164,164,164,164,164,]),'string_concatenation_operator':([54,217,],[131,131,]),'value_array_element':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'array_location':([0,6,14,20,35,39,44,45,50,69,71,76,82,85,91,93,107,124,129,131,133,138,141,169,176,184,200,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'character_string_literal':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'else_clause':([134,288,],[211,314,]),'return_action':([0,20,35,45,91,133,176,184,209,212,235,253,279,305,306,309,325,328,329,335,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'then_expression':([127,283,312,],[206,311,330,]),'iteration':([95,],[183,]),'step_enumeration':([95,],[180,]),'location':([0,6,14,20,35,39,44,45,50,69,71,76,82,85,91,93,107,124,129,131,133,138,141,169,176,184,200,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[28,63,63,28,28,63,63,28,63,135,63,63,63,63,28,63,63,63,63,63,28,63,63,63,28,28,63,63,28,63,28,63,63,63,63,63,63,63,28,63,63,63,28,63,28,63,63,63,63,63,63,28,28,28,28,28,28,28,]),'mode':([87,99,167,198,242,294,307,],[156,188,225,240,276,318,327,]),'parameter_spec':([242,],[277,]),'character_mode':([87,99,167,198,224,234,242,268,294,295,307,],[158,158,158,158,158,158,158,158,158,158,158,]),'start_value':([233,],[270,]),'boolean_expression':([6,50,93,210,247,284,],[66,127,179,251,283,312,]),'call_action':([0,6,14,20,35,39,44,45,50,69,71,76,82,85,91,93,107,124,129,131,133,138,141,169,176,184,200,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[31,68,68,31,31,68,68,31,68,68,68,68,68,68,31,68,68,68,68,68,31,68,68,68,31,31,68,68,31,68,31,68,68,68,68,68,68,68,31,68,68,68,31,68,31,68,68,68,68,68,68,31,31,31,31,31,31,31,]),'index_mode':([224,295,],[264,319,]),'initialization':([188,],[238,]),'expression_list':([85,138,],[154,216,]),'newmode_list':([36,],[112,]),'exit_action':([0,20,35,45,91,133,176,184,209,212,235,253,279,305,306,309,325,328,329,335,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'formal_parameter_list':([203,],[244,]),'boolean_literal':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'constant_expression':([169,223,],[228,260,]),'control_part':([20,],[96,]),'result_spec':([243,281,],[278,308,]),'synonym_statement':([0,35,279,305,306,309,325,328,329,335,],[41,41,41,41,41,41,41,41,41,41,]),'discrete_mode':([87,99,167,198,224,234,242,268,294,295,307,],[170,170,170,170,265,272,170,272,170,265,170,]),'empty_literal':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'discrete_range_mode':([87,99,167,198,224,234,242,268,294,295,307,],[162,162,162,162,162,273,162,298,162,162,162,]),'integer_literal':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,230,233,237,247,249,254,284,291,293,295,299,303,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,267,79,79,79,79,79,79,79,79,79,79,79,]),'operand4':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[46,46,46,46,46,136,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'if_action':([0,20,35,45,91,133,176,184,209,212,235,253,279,305,306,309,325,328,329,335,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'relational_operator':([80,],[143,]),'membership_operator':([80,],[139,]),'character_literal':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'do_action':([0,20,35,45,91,133,176,184,209,212,235,253,279,305,306,309,325,328,329,335,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'action':([0,20,35,45,91,133,176,184,209,212,235,253,279,305,306,309,325,328,329,335,],[8,8,8,121,8,8,121,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'operand1':([6,14,39,44,50,76,82,85,93,107,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[54,54,54,54,54,54,54,54,54,54,54,217,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'array_element':([0,6,14,20,35,39,44,45,50,69,71,76,82,85,91,93,107,124,129,131,133,138,141,169,176,184,200,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'else_expression':([206,248,],[250,285,]),'bracketed_action':([0,20,35,45,91,133,176,184,209,212,235,253,279,305,306,309,325,328,329,335,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'operator1':([80,],[141,]),'procedure_call':([0,6,14,20,35,39,44,45,50,69,71,76,82,85,91,93,107,124,129,131,133,138,141,169,176,184,200,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'program':([0,],[18,]),'composite_mode':([87,99,167,198,242,294,307,],[173,173,173,173,173,173,173,]),'procedure_statement':([0,35,279,305,306,309,325,328,329,335,],[23,23,23,23,23,23,23,23,23,23,]),'assigning_operator':([28,],[107,]),'action_statement':([0,20,35,91,133,184,209,212,235,253,279,305,306,309,325,328,329,335,],[25,94,25,178,94,94,178,94,178,178,25,25,25,25,25,25,25,25,]),'value_array_slice':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'dereferenced_reference':([0,6,14,20,35,39,44,45,50,69,71,76,82,85,91,93,107,124,129,131,133,138,141,169,176,184,200,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'builtin_call':([0,6,14,20,35,39,44,45,50,69,71,76,82,85,91,93,107,124,129,131,133,138,141,169,176,184,200,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'literal_range':([222,224,229,293,295,],[259,263,266,259,263,]),'end_value':([270,300,301,322,],[302,321,323,331,]),'synonym_list':([19,],[89,]),'integer_mode':([87,99,167,198,224,234,242,268,294,295,307,],[160,160,160,160,160,160,160,160,160,160,160,]),'boolean_mode':([87,99,167,198,224,234,242,268,294,295,307,],[161,161,161,161,161,161,161,161,161,161,161,]),'parameter_list':([44,82,293,],[118,152,118,]),'array_slice':([0,6,14,20,35,39,44,45,50,69,71,76,82,85,91,93,107,124,129,131,133,138,141,169,176,184,200,205,209,210,212,219,221,222,223,224,229,233,235,237,247,249,253,254,279,284,291,293,295,299,303,305,306,309,325,328,329,335,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'elsif_expression':([206,],[248,]),'string_mode':([87,99,167,198,242,294,307,],[163,163,163,163,163,163,163,]),'result':([14,39,],[84,115,]),'statement_list':([0,279,305,309,328,],[35,306,325,329,335,]),'monadic_operator':([6,14,39,44,50,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'literal':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'identifier_list':([19,24,36,175,187,197,203,282,],[87,99,113,87,99,113,242,242,]),'primitive_value':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'action_statement_list':([20,133,184,212,],[91,209,235,253,]),'parameter':([44,82,200,293,],[119,119,241,119,]),'step_value':([270,],[301,]),'array_mode':([87,99,167,198,242,294,307,],[171,171,171,171,171,171,171,]),'operand0':([6,14,39,44,50,76,82,85,93,107,138,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'operand3':([6,14,39,44,50,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[77,77,77,77,77,77,77,77,77,77,204,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'statement':([0,35,279,305,306,309,325,328,329,335,],[34,111,34,34,111,34,111,34,111,111,]),'declaration':([24,187,],[100,236,]),'array_primitive_value':([6,14,39,44,50,71,76,82,85,93,107,124,129,131,138,141,169,200,205,210,219,221,222,223,224,229,233,237,247,249,254,284,291,293,295,299,303,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'formal_parameter':([203,282,],[245,310,]),'for_control':([20,],[97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',18),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',23),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',36),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',41),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',46),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',47),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',56),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',57),
  ('initialization -> EQUALS expression','initialization',2,'p_initialization','parser.py',67),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',74),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',75),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',83),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',89),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',96),
  ('synonym_list -> synonym_list COMMA synonym_definition','synonym_list',3,'p_synonym_list','parser.py',97),
  ('synonym_definition -> identifier_list mode EQUALS constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list EQUALS constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',118),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',124),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',131),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',132),
  ('mode_definition -> identifier_list EQUALS mode','mode_definition',3,'p_mode_definition','parser.py',141),
  ('mode -> identifier','mode',1,'p_mode','parser.py',148),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',149),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',150),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',151),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',158),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',159),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',160),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',161),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',168),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',175),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',182),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',189),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',190),
  ('literal_range -> expression COLON expression','literal_range',3,'p_literal_range','parser.py',196),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',203),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',209),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',210),
  ('string_mode -> CHARS LBRACKET integer_literal RBRACKET','string_mode',4,'p_string_mode','parser.py',215),
  ('array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode','array_mode',5,'p_array_mode','parser.py',222),
  ('list_index_mode -> index_mode','list_index_mode',1,'p_list_index_mode','parser.py',228),
  ('list_index_mode -> list_index_mode COMMA index_mode','list_index_mode',3,'p_list_index_mode','parser.py',229),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',237),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',238),
  ('location -> identifier','location',1,'p_location','parser.py',244),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',245),
  ('location -> array_element','location',1,'p_location','parser.py',246),
  ('location -> array_slice','location',1,'p_location','parser.py',247),
  ('location -> call_action','location',1,'p_location','parser.py',248),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',258),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',297),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',304),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',305),
  ('array_slice -> array_location LBRACKET expression COLON expression RBRACKET','array_slice',6,'p_array_slice','parser.py',314),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',321),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',327),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',328),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',329),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',330),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',337),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',338),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',339),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',340),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',341),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',348),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',355),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',356),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',363),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',370),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',377),
  ('value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','parser.py',384),
  ('value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',391),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',398),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',404),
  ('expression -> operand0','expression',1,'p_expression','parser.py',411),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',412),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',419),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',420),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',430),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',437),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',444),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',451),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',452),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',463),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',464),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',475),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',476),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',483),
  ('relational_operator -> EQ','relational_operator',1,'p_relational_operator','parser.py',484),
  ('relational_operator -> NE','relational_operator',1,'p_relational_operator','parser.py',485),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','parser.py',486),
  ('relational_operator -> GEQ','relational_operator',1,'p_relational_operator','parser.py',487),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','parser.py',488),
  ('relational_operator -> LEQ','relational_operator',1,'p_relational_operator','parser.py',489),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',496),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',503),
  ('operand1 -> operand1 arithmetic_additive_operator operand2','operand1',3,'p_operand1','parser.py',504),
  ('operand1 -> operand1 string_concatenation_operator operand2','operand1',3,'p_operand1','parser.py',505),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',516),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',517),
  ('string_concatenation_operator -> LAND','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',524),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',531),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',532),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',543),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',544),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',545),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',551),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',552),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',563),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',564),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',571),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',572),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',573),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',580),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',587),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','parser.py',588),
  ('action -> bracketed_action','action',1,'p_action','parser.py',599),
  ('action -> assignment_action','action',1,'p_action','parser.py',600),
  ('action -> call_action','action',1,'p_action','parser.py',601),
  ('action -> exit_action','action',1,'p_action','parser.py',602),
  ('action -> return_action','action',1,'p_action','parser.py',603),
  ('action -> result_action','action',1,'p_action','parser.py',604),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',611),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',612),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',619),
  ('assigning_operator -> EQUALS','assigning_operator',1,'p_assigning_operator','parser.py',626),
  ('assigning_operator -> PLUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',627),
  ('assigning_operator -> MINUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',628),
  ('assigning_operator -> TIMES EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',629),
  ('assigning_operator -> DIVIDE EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',630),
  ('assigning_operator -> MODULO EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',631),
  ('assigning_operator -> LAND EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',632),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',641),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',642),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',652),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',658),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',659),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',667),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',668),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',669),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',681),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',682),
  ('control_part -> for_control','control_part',1,'p_control_part','parser.py',692),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','parser.py',693),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',694),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','parser.py',704),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',711),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',712),
  ('step_enumeration -> identifier EQUALS start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',720),
  ('step_enumeration -> identifier EQUALS start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',721),
  ('step_enumeration -> identifier EQUALS start_value DOWN end_value','step_enumeration',5,'p_step_enumeration','parser.py',722),
  ('step_enumeration -> identifier EQUALS start_value step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','parser.py',723),
  ('start_value -> expression','start_value',1,'p_start_value','parser.py',738),
  ('step_value -> BY expression','step_value',2,'p_step_value','parser.py',744),
  ('end_value -> TO expression','end_value',2,'p_end_value','parser.py',750),
  ('range_enumeration -> identifier IN discrete_range_mode','range_enumeration',3,'p_range_enumeration','parser.py',756),
  ('range_enumeration -> identifier DOWN IN discrete_range_mode','range_enumeration',4,'p_range_enumeration','parser.py',757),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',768),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',775),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',776),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',783),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',784),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',793),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',794),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',803),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','parser.py',809),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',816),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',817),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',826),
  ('result -> expression','result',1,'p_result','parser.py',833),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',839),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',840),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',851),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',852),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',853),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',854),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',855),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',856),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',857),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',858),
  ('procedure_statement -> identifier COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',864),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END','procedure_definition',6,'p_procedure_definition','parser.py',871),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',872),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',873),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END','procedure_definition',8,'p_procedure_definition','parser.py',874),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',889),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',890),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',899),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',906),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',907),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',917),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',918),
]
