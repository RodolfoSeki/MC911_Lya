
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '85727B0C6796F401B709C773BFB5625B'
    
_lr_action_items = {'DIVIDE':([26,27,28,35,],[31,-22,-24,-23,]),'ICONST':([23,31,32,33,34,],[28,-26,-27,28,-25,]),'COMMA':([6,7,8,9,10,14,15,16,18,19,20,21,22,24,25,26,27,28,29,30,35,],[13,-11,-6,-13,17,-17,-16,-18,-15,-14,-8,-7,-12,-9,-19,-21,-22,-24,-10,-20,-23,]),'INT':([7,9,10,22,],[-11,-13,15,-12,]),'MODULO':([26,27,28,35,],[32,-22,-24,-23,]),'CHAR':([7,9,10,22,],[-11,-13,16,-12,]),'$end':([1,3,4,5,11,12,],[-4,0,-1,-2,-3,-5,]),'DCL':([0,1,4,5,11,12,],[2,-4,2,-2,-3,-5,]),'EQUALS':([14,15,16,18,19,20,],[-17,-16,-18,-15,-14,23,]),'SEMI':([6,8,14,15,16,18,19,20,21,24,25,26,27,28,29,30,35,],[12,-6,-17,-16,-18,-15,-14,-8,-7,-9,-19,-21,-22,-24,-10,-20,-23,]),'TIMES':([26,27,28,35,],[34,-22,-24,-23,]),'ID':([2,13,17,],[9,9,9,]),'BOOL':([7,9,10,22,],[-11,-13,14,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'initialization':([20,],[24,]),'operand0':([23,],[25,]),'declaration_statement':([0,4,],[1,1,]),'declaration':([2,13,],[8,21,]),'statement_list':([0,],[4,]),'identifier':([2,13,17,],[7,7,22,]),'statement':([0,4,],[5,11,]),'operand1':([23,],[30,]),'identifier_list':([2,13,],[10,10,]),'primitive_mode':([10,],[18,]),'declaration_list':([2,],[6,]),'operand2':([23,],[26,]),'program':([0,],[3,]),'arithmetic_multiplicative_operator':([26,],[33,]),'expression':([23,],[29,]),'discrete_mode':([10,],[19,]),'operand3':([23,33,],[27,35,]),'mode':([10,],[20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',23),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',27),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',28),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',37),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',43),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',47),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',48),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',57),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',58),
  ('initialization -> EQUALS expression','initialization',2,'p_initialization','parser.py',67),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',73),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',74),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',82),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',86),
  ('discrete_mode -> primitive_mode','discrete_mode',1,'p_discrete_mode','parser.py',93),
  ('primitive_mode -> INT','primitive_mode',1,'p_primitive_mode','parser.py',99),
  ('primitive_mode -> BOOL','primitive_mode',1,'p_primitive_mode','parser.py',100),
  ('primitive_mode -> CHAR','primitive_mode',1,'p_primitive_mode','parser.py',101),
  ('expression -> operand0','expression',1,'p_expression','parser.py',107),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',113),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',118),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',124),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',125),
  ('operand3 -> ICONST','operand3',1,'p_operand3','parser.py',130),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',136),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',137),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',138),
]
