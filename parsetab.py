
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGEQLTLEQleftPLUSMINUSleftTIMESDIVIDEMODULOID ICONST CCONST SCONST PLUS MINUS TIMES DIVIDE MODULO EQUALS SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET AND LAND OR EQ NE GT GEQ LT LEQ COLON COMMA NOT DCL BY FOR CHARS DO TO LOWER SYN CHAR OD LENGTH BOOL UPPER END ASC TRUE NUM ABS PROC DOWN READ FALSE ELSE ELSIF INT FI ARRAY EXIT RETURNS THEN TYPE LOC WHILE PRINT IN REF RETURN NULL IF RESULTprogram : statement_liststatement_list : statement\n                          | statement_list statement\n        statement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statement\n        declaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declaration\n        declaration : identifier_list mode \n                       | identifier_list mode initialization\n        initialization : EQUALS expression\n        identifier_list : identifier\n                           | identifier_list COMMA identifier\n        identifier : ID  synonym_statement : SYN synonym_list SEMI\n         synonym_list : synonym_definition \n                         | synonym_list COMMA synonym_definition\n         synonym_definition : identifier_list mode EQUALS constant_expression\n                               | identifier_list EQUALS constant_expression\n         constant_expression : expression\n         newmode_statement : TYPE newmode_list SEMI\n         newmode_list : mode_definition \n                         | newmode_list COMMA mode_definition\n         mode_definition : identifier_list EQUALS mode\n         mode : identifier\n                 | discrete_mode\n                 | reference_mode\n                 | composite_mode\n         discrete_mode : integer_mode\n                          | boolean_mode\n                          | character_mode\n                          | discrete_range_mode\n         integer_mode : INT\n         boolean_mode : BOOL\n         character_mode : CHAR\n         discrete_range_mode : identifier LPAREN literal_range RPAREN\n                                | discrete_mode LPAREN literal_range RPAREN\n         literal_range : expression COLON expression\n         reference_mode : REF mode\n         composite_mode : string_mode\n                           | array_mode\n         string_mode : CHARS LBRACKET literal RBRACKET\n         array_mode : ARRAY LBRACKET list_index_mode RBRACKET mode\n         list_index_mode : index_mode\n                            | list_index_mode COMMA index_mode\n         index_mode : discrete_mode\n                       | literal_range\n         location : identifier\n                     | dereferenced_reference\n                     | array_element\n                     | array_slice\n                     | call_action\n         dereferenced_reference : location ARROW\n         array_element : array_location LBRACKET expression_list RBRACKET\n         expression_list : expression\n                            | expression_list COMMA expression\n         array_slice : array_location LBRACKET expression COLON expression RBRACKET\n         array_location : location\n         primitive_value : literal\n                            | value_array_element\n                            | value_array_slice\n                            | parenthesized_expression\n         literal : integer_literal\n                    | boolean_literal\n                    | character_literal\n                    | empty_literal\n                    | character_string_literal\n         integer_literal : ICONST\n         boolean_literal : FALSE\n                            | TRUE\n         character_literal : CCONST\n         empty_literal : NULL\n         character_string_literal : SCONST\n         value_array_element : array_primitive_value LBRACKET expression_list RBRACKET\n         value_array_slice : array_primitive_value LBRACKET expression COLON expression RBRACKET\n         array_primitive_value : primitive_value\n         parenthesized_expression : LPAREN expression RPAREN\n         expression : operand0\n                       | conditional_expression\n         conditional_expression : IF boolean_expression then_expression else_expression FI\n                                   | IF boolean_expression then_expression elsif_expression else_expression FI\n         boolean_expression : expression\n         then_expression : THEN expression\n         else_expression : ELSE expression\n         elsif_expression : ELSIF boolean_expression then_expression\n                             | elsif_expression ELSIF boolean_expression then_expression\n         operand0 : operand1\n                     | operand0 operator1 operand1\n         operator1 : relational_operator\n                      | membership_operator\n         relational_operator : AND\n                                | OR \n                                | EQ \n                                | NE\n                                | GT\n                                | GEQ\n                                | LT\n                                | LEQ\n         membership_operator : IN\n         operand1 : operand2\n                     | operand1 arithmetic_additive_operator operand2\n                     | operand1 string_concatenation_operator operand2\n         arithmetic_additive_operator : PLUS\n                                         | MINUS\n         string_concatenation_operator : LAND\n         operand2 : operand3 \n                     | operand2 arithmetic_multiplicative_operator operand3\n         arithmetic_multiplicative_operator : TIMES\n                                               | DIVIDE\n                                               | MODULO \n         operand3 : operand4\n                     | monadic_operator operand4\n         monadic_operator : MINUS\n                             | NOT \n         operand4 : location\n                     | referenced_location\n                     | primitive_value\n         referenced_location : ARROW location\n         action_statement : action SEMI\n                             | identifier COLON action SEMI\n         action : bracketed_action\n                   | assignment_action\n                   | call_action\n                   | exit_action\n                   | return_action\n                   | result_action\n         bracketed_action : if_action\n                             | do_action\n         assignment_action : location assigning_operator expression\n         assigning_operator : EQUALS\n                               | PLUS EQUALS\n                               | MINUS EQUALS\n                               | TIMES EQUALS\n                               | DIVIDE EQUALS\n                               | MODULO EQUALS\n                               | LAND EQUALS\n         if_action : IF boolean_expression then_clause FI\n                      | IF boolean_expression then_clause else_clause FI\n         then_clause : THEN action_statement_list\n        action_statement_list : action_statement\n                                 | action_statement_list action_statement\n         else_clause : ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause \n                        | ELSIF boolean_expression then_clause else_clause\n         do_action : DO action_statement_list OD\n                      | DO control_part SEMI action_statement_list OD\n         control_part : for_control \n                         | for_control while_control\n                         | while_control\n         for_control : FOR iteration\n         iteration : step_enumeration\n                      | range_enumeration\n         step_enumeration : identifier EQUALS start_value end_value\n                             | identifier EQUALS start_value step_value end_value\n                             | identifier EQUALS start_value DOWN end_value\n                             | identifier EQUALS start_value step_value DOWN end_value\n         start_value : expression\n         step_value : BY expression\n         end_value : TO expression\n         range_enumeration : identifier IN discrete_mode\n                              | identifier DOWN IN discrete_mode\n         while_control : WHILE boolean_expression\n         call_action : procedure_call\n                        | builtin_call\n         procedure_call : identifier LPAREN  RPAREN\n                           | identifier LPAREN parameter_list RPAREN\n         parameter_list : parameter\n                           | parameter_list COMMA parameter\n         parameter : expression\n         exit_action : EXIT identifier\n         return_action : RETURN \n                          | RETURN result\n         result_action : RESULT result\n         result : expression\n         builtin_call : builtin_name LPAREN RPAREN\n                         | builtin_name LPAREN parameter_list RPAREN\n         builtin_name : ABS\n                         | ASC\n                         | NUM\n                         | UPPER\n                         | LOWER\n                         | LENGTH\n                         | READ\n                         | PRINT\n         procedure_statement : identifier COLON procedure_definition SEMI\n         procedure_definition : PROC LPAREN RPAREN SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END\n                                 | PROC LPAREN RPAREN result_spec SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END\n         formal_parameter_list : formal_parameter \n                                  | formal_parameter_list COMMA formal_parameter\n         formal_parameter : identifier_list parameter_spec\n         parameter_spec : mode \n                           | mode LOC\n         result_spec : RETURNS LPAREN mode RPAREN\n                        | RETURNS LPAREN mode LOC RPAREN\n        '
    
_lr_action_items = {'BOOL':([17,92,93,115,169,183,212,215,223,261,271,282,283,317,],[-17,-15,168,168,168,168,-16,168,168,168,168,168,168,168,]),'RBRACKET':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,142,143,154,155,157,164,165,168,170,186,193,199,200,201,202,203,206,207,210,232,236,242,248,249,251,252,253,255,259,275,280,281,286,287,303,305,307,310,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-58,210,-38,-36,-34,-33,-35,-37,-32,-168,-178,-80,-91,-110,-58,242,-105,-104,-57,-169,-179,-77,281,-59,283,-50,-49,-47,288,303,-83,-60,-39,-40,-78,-84,-48,-41,]),'LOWER':([0,1,7,9,13,15,16,23,27,29,30,33,46,47,52,54,62,66,79,80,81,82,87,96,100,102,108,109,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,152,171,172,177,182,185,196,198,204,208,209,213,215,216,217,220,222,227,229,230,231,233,234,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[4,4,-4,4,-2,-5,4,-8,4,4,-7,-6,-116,4,4,-117,4,4,4,-122,-3,4,-133,-143,4,4,4,4,4,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,4,-112,4,-113,-111,4,-107,4,-108,-106,4,-135,-137,-139,-138,-134,-136,-9,4,4,-144,-24,4,-18,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-123,-188,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'COLON':([17,20,24,28,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,98,129,135,142,186,193,199,200,201,202,206,207,210,232,236,242,254,256,280,281,303,305,309,],[-17,-167,-166,109,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,172,-121,-115,208,-168,-178,-80,-91,-110,241,-105,-104,-57,-169,-179,-77,-51,285,-83,-60,-78,-84,285,]),'RETURN':([0,7,9,13,15,16,23,30,33,80,81,96,100,109,152,171,172,177,182,185,196,220,229,230,233,234,268,297,318,319,323,328,329,330,334,],[1,-4,1,-2,-5,1,-8,-7,-6,-122,-3,-143,1,1,-9,1,1,-144,-24,1,-18,1,1,1,-123,-188,1,1,1,1,1,1,1,1,1,]),'IN':([17,20,24,31,35,38,44,45,48,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,173,186,193,199,200,201,206,207,210,221,232,236,242,254,281,303,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,121,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,223,-168,-178,-80,-91,-110,-105,-104,-57,261,-169,-179,-77,-51,-60,-78,]),'SYN':([0,7,9,13,15,23,30,33,80,81,152,182,196,233,234,297,318,319,323,328,329,330,334,],[43,-4,43,-2,-5,-8,-7,-6,-122,-3,-9,-24,-18,-123,-188,43,43,43,43,43,43,43,43,]),'THEN':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,106,107,129,135,136,186,193,199,200,201,206,207,210,232,236,242,267,278,280,281,303,304,305,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,185,-85,-121,-115,204,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,185,204,-83,-60,-78,204,-84,]),'TRUE':([1,27,29,46,47,54,62,66,79,82,87,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[75,75,75,-116,75,-117,75,75,75,75,-133,75,75,75,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,75,-112,75,-113,-111,75,-107,75,-108,-106,75,-135,-137,-139,-138,-134,-136,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'INT':([17,92,93,115,169,183,212,215,223,261,271,282,283,317,],[-17,-15,155,155,155,155,-16,155,155,155,155,155,155,155,]),'FALSE':([1,27,29,46,47,54,62,66,79,82,87,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[45,45,45,-116,45,-117,45,45,45,45,-133,45,45,45,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,45,-112,45,-113,-111,45,-107,45,-108,-106,45,-135,-137,-139,-138,-134,-136,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'NULL':([1,27,29,46,47,54,62,66,79,82,87,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[76,76,76,-116,76,-117,76,76,76,76,-133,76,76,76,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,76,-112,76,-113,-111,76,-107,76,-108,-106,76,-135,-137,-139,-138,-134,-136,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'MODULO':([11,17,20,24,26,28,31,35,38,44,45,48,51,53,55,56,57,60,61,63,64,65,67,68,69,71,73,74,75,76,77,78,84,98,129,135,186,193,199,201,206,207,210,232,236,242,254,281,303,],[88,-17,-167,-166,-55,-51,-52,-54,-53,-68,-72,-74,-119,-66,-63,-76,132,-70,-109,-62,-69,-55,-67,-51,-114,-71,-65,-118,-73,-75,-120,-64,-56,-51,-121,-115,-168,-178,-80,-110,132,132,-57,-169,-179,-77,-51,-60,-78,]),'LAND':([11,17,20,24,26,28,31,35,38,44,45,48,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,98,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[86,-17,-167,-166,-55,-51,-52,-54,-53,-68,-72,-74,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,139,-71,-65,-118,-73,-75,-120,-64,-56,-51,-121,-115,-168,-178,-80,139,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'END':([7,13,15,23,30,33,80,81,152,182,196,233,234,318,328,330,334,],[-4,-2,-5,-8,-7,-6,-122,-3,-9,-24,-18,-123,-188,327,333,335,337,]),'LEQ':([17,20,24,31,35,38,44,45,48,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,118,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'DCL':([0,7,9,13,15,23,30,33,80,81,152,182,196,233,234,297,318,319,323,328,329,330,334,],[12,-4,12,-2,-5,-8,-7,-6,-122,-3,-9,-24,-18,-123,-188,12,12,12,12,12,12,12,12,]),'ARROW':([1,11,17,20,24,26,27,28,29,31,35,38,46,47,54,62,65,66,68,74,79,82,84,87,98,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,186,193,198,204,208,209,210,213,215,216,217,222,227,231,232,236,238,241,245,246,254,276,281,282,284,285,293,294,],[52,84,-17,-167,-166,-55,52,-51,52,-52,-54,-53,-116,52,-117,52,-55,52,-51,84,52,52,-56,-133,-51,52,52,52,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,52,84,-112,52,-113,-111,52,-107,52,-108,-106,52,-135,-137,-139,-138,-134,-136,-168,-178,52,52,52,52,-57,52,52,52,52,52,52,52,-169,-179,52,52,52,52,-51,52,-60,52,52,52,52,52,]),'CHARS':([17,92,93,115,169,183,212,271,283,317,],[-17,-15,166,166,166,166,-16,166,166,166,]),'TO':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,262,263,280,281,290,291,303,305,311,314,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-160,294,-83,-60,294,294,-78,-84,294,-161,]),'READ':([0,1,7,9,13,15,16,23,27,29,30,33,46,47,52,54,62,66,79,80,81,82,87,96,100,102,108,109,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,152,171,172,177,182,185,196,198,204,208,209,213,215,216,217,220,222,227,229,230,231,233,234,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[14,14,-4,14,-2,-5,14,-8,14,14,-7,-6,-116,14,14,-117,14,14,14,-122,-3,14,-133,-143,14,14,14,14,14,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,14,-112,14,-113,-111,14,-107,14,-108,-106,14,-135,-137,-139,-138,-134,-136,-9,14,14,-144,-24,14,-18,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-123,-188,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'EQ':([17,20,24,31,35,38,44,45,48,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,120,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'DO':([0,7,9,13,15,16,23,30,33,80,81,96,100,109,152,171,172,177,182,185,196,220,229,230,233,234,268,297,318,319,323,328,329,330,334,],[16,-4,16,-2,-5,16,-8,-7,-6,-122,-3,-143,16,16,-9,16,16,-144,-24,16,-18,16,16,16,-123,-188,16,16,16,16,16,16,16,16,16,]),'LT':([17,20,24,31,35,38,44,45,48,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,117,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'ID':([0,1,7,9,12,13,15,16,17,19,23,27,29,30,33,41,43,46,47,52,54,62,66,79,80,81,82,87,92,93,96,99,100,102,108,109,112,115,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,151,152,153,169,171,172,177,181,182,183,185,195,196,198,204,208,209,212,213,215,216,217,220,222,223,227,229,230,231,233,234,235,238,241,245,246,261,268,271,276,282,283,284,285,293,294,297,301,317,318,319,323,328,329,330,334,],[17,17,-4,17,17,-2,-5,17,-17,17,-8,17,17,-7,-6,17,17,-116,17,17,-117,17,17,17,-122,-3,17,-133,-15,17,-143,17,17,17,17,17,17,17,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,17,-112,17,-113,-111,17,-107,17,-108,-106,17,-135,-137,-139,-138,-134,-136,17,-9,17,17,17,17,-144,17,-24,17,17,17,-18,17,17,17,17,-16,17,17,17,17,17,17,17,17,17,17,17,-123,-188,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'REF':([17,92,93,115,169,183,212,271,283,317,],[-17,-15,169,169,169,169,-16,169,169,169,]),'CCONST':([1,27,29,46,47,54,62,66,79,82,87,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[48,48,48,-116,48,-117,48,48,48,48,-133,48,48,48,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,48,-112,48,-113,-111,48,-107,48,-108,-106,48,-135,-137,-139,-138,-134,-136,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TYPE':([0,7,9,13,15,23,30,33,80,81,152,182,196,233,234,297,318,319,323,328,329,330,334,],[19,-4,19,-2,-5,-8,-7,-6,-122,-3,-9,-24,-18,-123,-188,19,19,19,19,19,19,19,19,]),'TIMES':([11,17,20,24,26,28,31,35,38,44,45,48,51,53,55,56,57,60,61,63,64,65,67,68,69,71,73,74,75,76,77,78,84,98,129,135,186,193,199,201,206,207,210,232,236,242,254,281,303,],[90,-17,-167,-166,-55,-51,-52,-54,-53,-68,-72,-74,-119,-66,-63,-76,133,-70,-109,-62,-69,-55,-67,-51,-114,-71,-65,-118,-73,-75,-120,-64,-56,-51,-121,-115,-168,-178,-80,-110,133,133,-57,-169,-179,-77,-51,-60,-78,]),'COMMA':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,91,92,93,94,103,104,105,113,114,115,129,135,142,143,154,155,156,157,158,160,161,162,163,164,165,167,168,170,186,187,188,189,193,194,199,200,201,202,203,206,207,210,211,212,214,219,224,225,232,236,237,239,240,242,249,250,251,252,253,255,269,271,272,273,274,280,281,286,287,288,299,300,303,305,307,308,309,310,320,321,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,151,-15,153,-10,181,-25,153,-19,195,153,-121,-115,-58,209,-38,-36,-12,-34,-31,-28,-29,-30,-43,-33,-35,-44,-37,-32,-168,-170,231,-172,-178,231,-80,-91,-110,-58,209,-105,-104,-57,-11,-16,-13,-42,-26,-27,-169,-179,-20,-22,-23,-77,-59,-14,282,-50,-49,-47,-171,153,-193,301,-21,-83,-60,-39,-40,-45,-196,-195,-78,-84,-48,-46,-172,-41,-197,-194,]),'CHAR':([17,92,93,115,169,183,212,215,223,261,271,282,283,317,],[-17,-15,154,154,154,154,-16,154,154,154,154,154,154,154,]),'GEQ':([17,20,24,31,35,38,44,45,48,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,124,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'MINUS':([1,11,17,20,24,26,27,28,29,31,35,38,44,45,47,48,51,53,55,56,57,60,61,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,82,84,87,98,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,145,146,147,148,149,150,186,193,198,199,200,201,204,206,207,208,209,210,213,215,216,217,222,227,231,232,236,238,241,242,245,246,254,276,281,282,284,285,293,294,303,],[46,83,-17,-167,-166,-55,46,-51,46,-52,-54,-53,-68,-72,46,-74,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,46,-67,-51,-114,137,-71,-65,-118,-73,-75,-120,-64,46,46,-56,-133,-51,46,46,46,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,46,-121,-112,46,-113,-111,46,-115,-107,46,-108,-106,46,-135,-137,-139,-138,-134,-136,-168,-178,46,-80,137,-110,46,-105,-104,46,46,-57,46,46,46,46,46,46,46,-169,-179,46,46,-77,46,46,-51,46,-60,46,46,46,46,46,-78,]),'LPAREN':([1,4,8,14,17,18,25,27,28,29,34,37,39,42,46,47,54,62,66,68,79,82,87,98,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,154,155,157,160,161,164,165,168,170,192,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,253,254,264,265,276,282,284,285,286,287,289,293,294,296,],[47,-184,-182,-186,-17,-183,-185,47,108,47,-181,-187,-180,112,-116,47,-117,47,47,108,47,47,-133,108,47,47,47,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,47,-112,47,-113,-111,47,-107,47,-108,-106,47,-135,-137,-139,-138,-134,-136,-38,-36,-34,216,217,-33,-35,-37,-32,235,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,217,284,216,217,47,47,47,47,-39,-40,217,47,47,317,]),'ABS':([0,1,7,9,13,15,16,23,27,29,30,33,46,47,52,54,62,66,79,80,81,82,87,96,100,102,108,109,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,152,171,172,177,182,185,196,198,204,208,209,213,215,216,217,220,222,227,229,230,231,233,234,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[39,39,-4,39,-2,-5,39,-8,39,39,-7,-6,-116,39,39,-117,39,39,39,-122,-3,39,-133,-143,39,39,39,39,39,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,39,-112,39,-113,-111,39,-107,39,-108,-106,39,-135,-137,-139,-138,-134,-136,-9,39,39,-144,-24,39,-18,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-123,-188,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'LENGTH':([0,1,7,9,13,15,16,23,27,29,30,33,46,47,52,54,62,66,79,80,81,82,87,96,100,102,108,109,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,152,171,172,177,182,185,196,198,204,208,209,213,215,216,217,220,222,227,229,230,231,233,234,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[25,25,-4,25,-2,-5,25,-8,25,25,-7,-6,-116,25,25,-117,25,25,25,-122,-3,25,-133,-143,25,25,25,25,25,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,25,-112,25,-113,-111,25,-107,25,-108,-106,25,-135,-137,-139,-138,-134,-136,-9,25,25,-144,-24,25,-18,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-123,-188,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'BY':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,262,263,280,281,303,305,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-160,293,-83,-60,-78,-84,]),'NE':([17,20,24,31,35,38,44,45,48,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,122,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'GT':([17,20,24,31,35,38,44,45,48,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,119,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'OR':([17,20,24,31,35,38,44,45,48,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,125,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'ARRAY':([17,92,93,115,169,183,212,271,283,317,],[-17,-15,159,159,159,159,-16,159,159,159,]),'RESULT':([0,7,9,13,15,16,23,30,33,80,81,96,100,109,152,171,172,177,182,185,196,220,229,230,233,234,268,297,318,319,323,328,329,330,334,],[29,-4,29,-2,-5,29,-8,-7,-6,-122,-3,-143,29,29,-9,29,29,-144,-24,29,-18,29,29,29,-123,-188,29,29,29,29,29,29,29,29,29,]),'RETURNS':([270,302,],[296,296,]),'FI':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,80,84,96,129,135,177,184,186,193,199,200,201,206,207,210,226,230,232,233,236,242,247,268,277,279,280,281,295,303,305,316,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-122,-56,-143,-121,-115,-144,228,-168,-178,-80,-91,-110,-105,-104,-57,266,-142,-169,-123,-179,-77,280,-145,305,-87,-83,-60,-146,-78,-84,-147,]),'NUM':([0,1,7,9,13,15,16,23,27,29,30,33,46,47,52,54,62,66,79,80,81,82,87,96,100,102,108,109,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,152,171,172,177,182,185,196,198,204,208,209,213,215,216,217,220,222,227,229,230,231,233,234,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[8,8,-4,8,-2,-5,8,-8,8,8,-7,-6,-116,8,8,-117,8,8,8,-122,-3,8,-133,-143,8,8,8,8,8,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,8,-112,8,-113,-111,8,-107,8,-108,-106,8,-135,-137,-139,-138,-134,-136,-9,8,8,-144,-24,8,-18,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-123,-188,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'ELSIF':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,80,84,96,129,135,177,184,186,193,199,200,201,205,206,207,210,230,232,233,236,242,243,244,280,281,295,303,305,306,324,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-122,-56,-143,-121,-115,-144,227,-168,-178,-80,-91,-110,245,-105,-104,-57,-142,-169,-123,-179,-77,-86,276,-83,-60,227,-78,-84,-88,-89,]),'SEMI':([1,2,5,6,10,17,20,21,22,24,26,31,32,35,38,40,44,45,48,49,50,51,53,55,56,57,58,60,61,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,84,91,94,95,97,101,103,104,107,110,111,113,114,129,135,144,154,155,156,157,158,160,161,162,163,164,165,167,168,170,174,175,176,178,179,180,186,190,191,193,199,200,201,206,207,210,211,214,219,224,225,228,232,236,237,239,240,242,250,260,265,266,270,274,280,281,286,287,288,289,292,298,302,303,305,308,312,313,315,322,325,327,332,333,335,336,337,],[-174,-129,80,-131,-130,-17,-167,-128,-124,-166,-126,-52,-125,-54,-53,-127,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-175,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-177,-65,-118,-73,-75,-120,-64,-56,152,-10,-152,171,-150,182,-25,-85,-176,-173,-19,196,-121,-115,-132,-38,-36,-12,-34,-31,-28,-29,-30,-43,-33,-35,-44,-37,-32,-153,-154,-155,-148,-151,-165,-168,233,234,-178,-80,-91,-110,-105,-104,-57,-11,-13,-42,-26,-27,-140,-169,-179,-20,-22,-23,-77,-14,-149,-163,-141,297,-21,-83,-60,-39,-40,-45,-164,-156,319,323,-78,-84,-46,-157,-158,-162,329,-159,-189,-198,-191,-190,-199,-192,]),'OD':([80,96,100,177,220,233,],[-122,-143,178,-144,260,-123,]),'IF':([0,1,7,9,13,15,16,23,27,29,30,33,47,66,79,80,81,82,87,96,100,102,108,109,112,134,145,146,147,148,149,150,152,171,172,177,182,185,196,198,204,208,209,213,215,216,217,220,222,227,229,230,231,233,234,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[27,66,-4,27,-2,-5,27,-8,66,66,-7,-6,66,66,66,-122,-3,66,-133,-143,27,66,66,27,66,66,-135,-137,-139,-138,-134,-136,-9,27,27,-144,-24,27,-18,66,66,66,66,66,66,66,66,27,66,66,27,27,66,-123,-188,66,66,66,66,27,66,66,66,66,66,66,27,27,27,27,27,27,27,27,]),'ASC':([0,1,7,9,13,15,16,23,27,29,30,33,46,47,52,54,62,66,79,80,81,82,87,96,100,102,108,109,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,152,171,172,177,182,185,196,198,204,208,209,213,215,216,217,220,222,227,229,230,231,233,234,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[34,34,-4,34,-2,-5,34,-8,34,34,-7,-6,-116,34,34,-117,34,34,34,-122,-3,34,-133,-143,34,34,34,34,34,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,34,-112,34,-113,-111,34,-107,34,-108,-106,34,-135,-137,-139,-138,-134,-136,-9,34,34,-144,-24,34,-18,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-123,-188,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'LOC':([17,154,155,157,158,160,161,162,163,164,165,167,168,170,219,286,287,288,299,308,326,],[-17,-38,-36,-34,-31,-28,-29,-30,-43,-33,-35,-44,-37,-32,-42,-39,-40,-45,320,-46,331,]),'ICONST':([1,27,29,46,47,54,62,66,79,82,87,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[71,71,71,-116,71,-117,71,71,71,71,-133,71,71,71,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,71,-112,71,-113,-111,71,-107,71,-108,-106,71,-135,-137,-139,-138,-134,-136,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'UPPER':([0,1,7,9,13,15,16,23,27,29,30,33,46,47,52,54,62,66,79,80,81,82,87,96,100,102,108,109,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,152,171,172,177,182,185,196,198,204,208,209,213,215,216,217,220,222,227,229,230,231,233,234,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[18,18,-4,18,-2,-5,18,-8,18,18,-7,-6,-116,18,18,-117,18,18,18,-122,-3,18,-133,-143,18,18,18,18,18,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,18,-112,18,-113,-111,18,-107,18,-108,-106,18,-135,-137,-139,-138,-134,-136,-9,18,18,-144,-24,18,-18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-123,-188,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'$end':([7,9,13,15,23,30,33,36,80,81,152,182,196,233,234,],[-4,-1,-2,-5,-8,-7,-6,0,-122,-3,-9,-24,-18,-123,-188,]),'ELSE':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,80,84,96,129,135,177,184,186,193,199,200,201,205,206,207,210,230,232,233,236,242,243,244,280,281,295,303,305,306,324,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-122,-56,-143,-121,-115,-144,229,-168,-178,-80,-91,-110,246,-105,-104,-57,-142,-169,-123,-179,-77,-86,246,-83,-60,229,-78,-84,-88,-89,]),'RPAREN':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,108,112,116,129,135,154,155,157,158,160,161,162,163,164,165,167,168,170,186,187,188,189,193,194,199,200,201,206,207,210,219,232,235,236,242,257,258,269,272,273,280,281,284,286,287,288,299,300,303,305,308,309,310,320,321,326,331,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,186,193,199,-121,-115,-38,-36,-34,-31,-28,-29,-30,-43,-33,-35,-44,-37,-32,-168,-170,232,-172,-178,236,-80,-91,-110,-105,-104,-57,-42,-169,270,-179,-77,286,287,-171,-193,302,-83,-60,186,-39,-40,-45,-196,-195,-78,-84,-46,-172,-41,-197,-194,332,336,]),'PRINT':([0,1,7,9,13,15,16,23,27,29,30,33,46,47,52,54,62,66,79,80,81,82,87,96,100,102,108,109,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,152,171,172,177,182,185,196,198,204,208,209,213,215,216,217,220,222,227,229,230,231,233,234,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[37,37,-4,37,-2,-5,37,-8,37,37,-7,-6,-116,37,37,-117,37,37,37,-122,-3,37,-133,-143,37,37,37,37,37,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,37,-112,37,-113,-111,37,-107,37,-108,-106,37,-135,-137,-139,-138,-134,-136,-9,37,37,-144,-24,37,-18,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-123,-188,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'PROC':([109,],[192,]),'PLUS':([11,17,20,24,26,28,31,35,38,44,45,48,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,98,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[89,-17,-167,-166,-55,-51,-52,-54,-53,-68,-72,-74,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,140,-71,-65,-118,-73,-75,-120,-64,-56,-51,-121,-115,-168,-178,-80,140,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'SCONST':([1,27,29,46,47,54,62,66,79,82,87,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[56,56,56,-116,56,-117,56,56,56,56,-133,56,56,56,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,56,-112,56,-113,-111,56,-107,56,-108,-106,56,-135,-137,-139,-138,-134,-136,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'AND':([17,20,24,31,35,38,44,45,48,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,186,193,199,200,201,206,207,210,232,236,242,254,281,303,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,127,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-51,-60,-78,]),'DIVIDE':([11,17,20,24,26,28,31,35,38,44,45,48,51,53,55,56,57,60,61,63,64,65,67,68,69,71,73,74,75,76,77,78,84,98,129,135,186,193,199,201,206,207,210,232,236,242,254,281,303,],[85,-17,-167,-166,-55,-51,-52,-54,-53,-68,-72,-74,-119,-66,-63,-76,130,-70,-109,-62,-69,-55,-67,-51,-114,-71,-65,-118,-73,-75,-120,-64,-56,-51,-121,-115,-168,-178,-80,-110,130,130,-57,-169,-179,-77,-51,-60,-78,]),'DOWN':([17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,129,135,173,186,193,199,200,201,206,207,210,232,236,242,262,263,280,281,290,303,305,314,],[-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,-121,-115,221,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-160,291,-83,-60,311,-78,-84,-161,]),'EQUALS':([11,17,20,24,26,28,31,35,38,68,83,84,85,86,88,89,90,92,98,105,115,154,155,156,157,158,160,161,162,163,164,165,167,168,170,173,186,193,197,210,212,219,232,236,281,286,287,288,308,],[87,-17,-167,-166,-55,-51,-52,-54,-53,-51,145,-56,146,147,148,149,150,-15,-51,183,198,-38,-36,213,-34,-31,-28,-29,-30,-43,-33,-35,-44,-37,-32,222,-168,-178,238,-57,-16,-42,-169,-179,-60,-39,-40,-45,-46,]),'FOR':([16,],[99,]),'NOT':([1,27,29,47,66,79,82,87,102,108,112,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,137,138,139,140,141,145,146,147,148,149,150,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[54,54,54,54,54,54,54,-133,54,54,54,-100,-101,-98,-96,-102,-97,-93,-99,-95,-92,-94,54,-112,54,-113,-111,54,-107,54,-108,-106,54,-135,-137,-139,-138,-134,-136,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'EXIT':([0,7,9,13,15,16,23,30,33,80,81,96,100,109,152,171,172,177,182,185,196,220,229,230,233,234,268,297,318,319,323,328,329,330,334,],[41,-4,41,-2,-5,41,-8,-7,-6,-122,-3,-143,41,41,-9,41,41,-144,-24,41,-18,41,41,41,-123,-188,41,41,41,41,41,41,41,41,41,]),'WHILE':([16,17,20,24,31,35,38,44,45,48,49,50,51,53,55,56,57,60,61,63,64,65,67,68,69,70,71,73,74,75,76,77,78,84,101,129,135,154,155,157,164,165,168,170,174,175,176,186,193,199,200,201,206,207,210,232,236,242,265,280,281,286,287,289,292,303,305,312,313,315,325,],[102,-17,-167,-166,-52,-54,-53,-68,-72,-74,-82,-81,-119,-66,-63,-76,-103,-70,-109,-62,-69,-55,-67,-51,-114,-90,-71,-65,-118,-73,-75,-120,-64,-56,102,-121,-115,-38,-36,-34,-33,-35,-37,-32,-153,-154,-155,-168,-178,-80,-91,-110,-105,-104,-57,-169,-179,-77,-163,-83,-60,-39,-40,-164,-156,-78,-84,-157,-158,-162,-159,]),'LBRACKET':([3,11,17,20,24,26,28,31,35,38,44,45,48,53,55,56,59,60,63,64,65,67,68,71,73,74,75,76,77,78,84,98,129,159,166,186,193,199,210,232,236,242,254,281,303,],[79,-61,-17,-167,-166,-55,-51,-52,-54,-53,-68,-72,-74,-66,-63,-76,134,-70,-62,-69,-55,-67,-51,-71,-65,-61,-73,-75,-79,-64,-56,-51,-61,215,218,-168,-178,-80,-57,-169,-179,-77,-51,-60,-78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'string_mode':([93,115,169,183,271,283,317,],[163,163,163,163,163,163,163,]),'string_concatenation_operator':([70,200,],[138,138,]),'operand4':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[69,69,69,69,135,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'synonym_definition':([43,195,],[113,237,]),'location':([0,1,9,16,27,29,47,52,62,66,79,82,100,102,108,109,112,128,131,134,138,141,171,172,185,198,204,208,209,213,215,216,217,220,222,227,229,230,231,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[11,74,11,11,74,74,74,129,74,74,74,74,11,74,74,11,74,74,74,74,74,74,11,11,11,74,74,74,74,74,74,74,74,11,74,74,11,11,74,74,74,74,74,11,74,74,74,74,74,74,11,11,11,11,11,11,11,11,]),'operand3':([1,27,29,47,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[61,61,61,61,61,61,61,61,61,61,61,201,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'character_literal':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'action':([0,9,16,100,109,171,172,185,220,229,230,268,297,318,319,323,328,329,330,334,],[5,5,5,5,190,5,190,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'composite_mode':([93,115,169,183,271,283,317,],[158,158,158,158,158,158,158,]),'newmode_list':([19,],[103,]),'discrete_mode':([93,115,169,183,215,223,261,271,282,283,317,],[161,161,161,161,253,265,289,161,253,161,161,]),'then_clause':([106,267,],[184,295,]),'declaration_statement':([0,9,297,318,319,323,328,329,330,334,],[7,7,7,7,7,7,7,7,7,7,]),'range_enumeration':([99,],[176,]),'if_action':([0,9,16,100,109,171,172,185,220,229,230,268,297,318,319,323,328,329,330,334,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'referenced_location':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'statement':([0,9,297,318,319,323,328,329,330,334,],[13,81,13,81,13,13,81,13,81,81,]),'while_control':([16,101,],[95,179,]),'elsif_expression':([205,],[244,]),'formal_parameter':([235,301,],[272,321,]),'else_expression':([205,244,],[247,277,]),'operand2':([1,27,29,47,66,79,82,102,108,112,128,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[57,57,57,57,57,57,57,57,57,57,57,57,206,207,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'result':([1,29,],[58,110,]),'array_primitive_value':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'character_string_literal':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'monadic_operator':([1,27,29,47,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'membership_operator':([50,],[123,]),'boolean_literal':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'control_part':([16,],[97,]),'procedure_statement':([0,9,297,318,319,323,328,329,330,334,],[30,30,30,30,30,30,30,30,30,30,]),'dereferenced_reference':([0,1,9,16,27,29,47,52,62,66,79,82,100,102,108,109,112,128,131,134,138,141,171,172,185,198,204,208,209,213,215,216,217,220,222,227,229,230,231,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'assignment_action':([0,9,16,100,109,171,172,185,220,229,230,268,297,318,319,323,328,329,330,334,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'iteration':([99,],[174,]),'parameter':([108,112,231,284,],[187,187,269,187,]),'operand0':([1,27,29,47,66,79,82,102,108,112,134,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'index_mode':([215,282,],[255,307,]),'parameter_list':([108,112,284,],[188,194,188,]),'newmode_statement':([0,9,297,318,319,323,328,329,330,334,],[33,33,33,33,33,33,33,33,33,33,]),'end_value':([263,290,291,311,],[292,312,313,325,]),'action_statement_list':([16,171,185,229,],[100,220,230,268,]),'program':([0,],[36,]),'array_mode':([93,115,169,183,271,283,317,],[167,167,167,167,167,167,167,]),'parenthesized_expression':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'assigning_operator':([11,],[82,]),'relational_operator':([50,],[126,]),'start_value':([222,],[263,]),'integer_mode':([93,115,169,183,215,223,261,271,282,283,317,],[170,170,170,170,170,170,170,170,170,170,170,]),'procedure_call':([0,1,9,16,27,29,47,52,62,66,79,82,100,102,108,109,112,128,131,134,138,141,171,172,185,198,204,208,209,213,215,216,217,220,222,227,229,230,231,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'value_array_slice':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'then_expression':([136,278,304,],[205,306,324,]),'exit_action':([0,9,16,100,109,171,172,185,220,229,230,268,297,318,319,323,328,329,330,334,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'for_control':([16,],[101,]),'formal_parameter_list':([235,],[273,]),'expression_list':([79,134,],[143,203,]),'list_index_mode':([215,],[251,]),'literal_range':([215,216,217,282,284,],[252,257,258,252,257,]),'character_mode':([93,115,169,183,215,223,261,271,282,283,317,],[157,157,157,157,157,157,157,157,157,157,157,]),'result_action':([0,9,16,100,109,171,172,185,220,229,230,268,297,318,319,323,328,329,330,334,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'arithmetic_additive_operator':([70,200,],[141,141,]),'empty_literal':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'do_action':([0,9,16,100,109,171,172,185,220,229,230,268,297,318,319,323,328,329,330,334,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'parameter_spec':([271,],[300,]),'procedure_definition':([109,],[191,]),'constant_expression':([198,238,],[239,274,]),'primitive_value':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'statement_list':([0,297,319,323,329,],[9,318,328,330,334,]),'result_spec':([270,302,],[298,322,]),'boolean_mode':([93,115,169,183,215,223,261,271,282,283,317,],[164,164,164,164,164,164,164,164,164,164,164,]),'mode_definition':([19,181,],[104,224,]),'arithmetic_multiplicative_operator':([57,206,207,],[131,131,131,]),'integer_literal':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'conditional_expression':([1,27,29,47,66,79,82,102,108,112,134,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'synonym_statement':([0,9,297,318,319,323,328,329,330,334,],[15,15,15,15,15,15,15,15,15,15,]),'declaration':([12,151,],[94,211,]),'initialization':([156,],[214,]),'value_array_element':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'builtin_call':([0,1,9,16,27,29,47,52,62,66,79,82,100,102,108,109,112,128,131,134,138,141,171,172,185,198,204,208,209,213,215,216,217,220,222,227,229,230,231,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'return_action':([0,9,16,100,109,171,172,185,220,229,230,268,297,318,319,323,328,329,330,334,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'bracketed_action':([0,9,16,100,109,171,172,185,220,229,230,268,297,318,319,323,328,329,330,334,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'action_statement':([0,9,16,100,171,185,220,229,230,268,297,318,319,323,328,329,330,334,],[23,23,96,177,96,96,177,96,177,177,23,23,23,23,23,23,23,23,]),'else_clause':([184,295,],[226,316,]),'mode':([93,115,169,183,271,283,317,],[156,197,219,225,299,308,326,]),'declaration_list':([12,],[91,]),'call_action':([0,1,9,16,27,29,47,52,62,66,79,82,100,102,108,109,112,128,131,134,138,141,171,172,185,198,204,208,209,213,215,216,217,220,222,227,229,230,231,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[26,65,26,26,65,65,65,65,65,65,65,65,26,65,65,26,65,65,65,65,65,65,26,26,26,65,65,65,65,65,65,65,65,26,65,65,26,26,65,65,65,65,65,26,65,65,65,65,65,65,26,26,26,26,26,26,26,26,]),'identifier_list':([12,19,43,151,181,195,235,301,],[93,105,115,93,105,115,271,271,]),'identifier':([0,1,9,12,16,19,27,29,41,43,47,52,62,66,79,82,93,99,100,102,108,109,112,115,128,131,134,138,141,151,153,169,171,172,181,183,185,195,198,204,208,209,213,215,216,217,220,222,223,227,229,230,231,235,238,241,245,246,261,268,271,276,282,283,284,285,293,294,297,301,317,318,319,323,328,329,330,334,],[28,68,28,92,98,92,68,68,111,92,68,68,68,68,68,68,160,173,98,68,68,68,68,160,68,68,68,68,68,92,212,160,98,68,92,160,98,92,68,68,68,68,68,254,68,68,98,68,264,68,98,98,68,92,68,68,68,68,264,98,160,68,254,160,68,68,68,68,28,92,160,28,28,28,28,28,28,28,]),'array_location':([0,1,9,16,27,29,47,52,62,66,79,82,100,102,108,109,112,128,131,134,138,141,171,172,185,198,204,208,209,213,215,216,217,220,222,227,229,230,231,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'reference_mode':([93,115,169,183,271,283,317,],[162,162,162,162,162,162,162,]),'operator1':([50,],[128,]),'operand1':([1,27,29,47,66,79,82,102,108,112,128,134,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[70,70,70,70,70,70,70,70,70,70,200,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'discrete_range_mode':([93,115,169,183,215,223,261,271,282,283,317,],[165,165,165,165,165,165,165,165,165,165,165,]),'boolean_expression':([27,66,102,227,245,276,],[106,136,180,267,278,304,]),'array_slice':([0,1,9,16,27,29,47,52,62,66,79,82,100,102,108,109,112,128,131,134,138,141,171,172,185,198,204,208,209,213,215,216,217,220,222,227,229,230,231,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'expression':([1,27,29,47,66,79,82,102,108,112,134,198,204,208,209,213,215,216,217,222,227,231,238,241,245,246,276,282,284,285,293,294,],[72,107,72,116,107,142,144,107,189,189,202,240,243,248,249,250,256,256,256,262,107,189,240,275,107,279,107,256,309,310,314,315,]),'synonym_list':([43,],[114,]),'array_element':([0,1,9,16,27,29,47,52,62,66,79,82,100,102,108,109,112,128,131,134,138,141,171,172,185,198,204,208,209,213,215,216,217,220,222,227,229,230,231,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'step_value':([263,],[290,]),'literal':([1,27,29,47,62,66,79,82,102,108,112,128,131,134,138,141,198,204,208,209,213,215,216,217,218,222,227,231,238,241,245,246,276,282,284,285,293,294,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,259,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'step_enumeration':([99,],[175,]),'builtin_name':([0,1,9,16,27,29,47,52,62,66,79,82,100,102,108,109,112,128,131,134,138,141,171,172,185,198,204,208,209,213,215,216,217,220,222,227,229,230,231,238,241,245,246,268,276,282,284,285,293,294,297,318,319,323,328,329,330,334,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',18),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',23),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',36),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',41),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',45),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',46),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',55),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',56),
  ('initialization -> EQUALS expression','initialization',2,'p_initialization','parser.py',65),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',71),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',72),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',80),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',85),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',91),
  ('synonym_list -> synonym_list COMMA synonym_definition','synonym_list',3,'p_synonym_list','parser.py',92),
  ('synonym_definition -> identifier_list mode EQUALS constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',101),
  ('synonym_definition -> identifier_list EQUALS constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',102),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',111),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',117),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',123),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',124),
  ('mode_definition -> identifier_list EQUALS mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> identifier','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',151),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',157),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',163),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',169),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',175),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',176),
  ('literal_range -> expression COLON expression','literal_range',3,'p_literal_range','parser.py',181),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',187),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',192),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',193),
  ('string_mode -> CHARS LBRACKET literal RBRACKET','string_mode',4,'p_string_mode','parser.py',198),
  ('array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode','array_mode',5,'p_array_mode','parser.py',204),
  ('list_index_mode -> index_mode','list_index_mode',1,'p_list_index_mode','parser.py',209),
  ('list_index_mode -> list_index_mode COMMA index_mode','list_index_mode',3,'p_list_index_mode','parser.py',210),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',218),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',219),
  ('location -> identifier','location',1,'p_location','parser.py',225),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',226),
  ('location -> array_element','location',1,'p_location','parser.py',227),
  ('location -> array_slice','location',1,'p_location','parser.py',228),
  ('location -> call_action','location',1,'p_location','parser.py',229),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',238),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',274),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',280),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',281),
  ('array_slice -> array_location LBRACKET expression COLON expression RBRACKET','array_slice',6,'p_array_slice','parser.py',290),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',296),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',302),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',303),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',304),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',305),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',311),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',312),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',313),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',314),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',315),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',321),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',327),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',328),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',334),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',340),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',346),
  ('value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','parser.py',352),
  ('value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',358),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',364),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',370),
  ('expression -> operand0','expression',1,'p_expression','parser.py',376),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',377),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',383),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',384),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',393),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',399),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',405),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',411),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',412),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',421),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',422),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',432),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',433),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',439),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',440),
  ('relational_operator -> EQ','relational_operator',1,'p_relational_operator','parser.py',441),
  ('relational_operator -> NE','relational_operator',1,'p_relational_operator','parser.py',442),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','parser.py',443),
  ('relational_operator -> GEQ','relational_operator',1,'p_relational_operator','parser.py',444),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','parser.py',445),
  ('relational_operator -> LEQ','relational_operator',1,'p_relational_operator','parser.py',446),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',452),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',458),
  ('operand1 -> operand1 arithmetic_additive_operator operand2','operand1',3,'p_operand1','parser.py',459),
  ('operand1 -> operand1 string_concatenation_operator operand2','operand1',3,'p_operand1','parser.py',460),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',470),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',471),
  ('string_concatenation_operator -> LAND','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',477),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',483),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',484),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',494),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',495),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',496),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',501),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',502),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',512),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',513),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',519),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',520),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',521),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',528),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',534),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','parser.py',535),
  ('action -> bracketed_action','action',1,'p_action','parser.py',544),
  ('action -> assignment_action','action',1,'p_action','parser.py',545),
  ('action -> call_action','action',1,'p_action','parser.py',546),
  ('action -> exit_action','action',1,'p_action','parser.py',547),
  ('action -> return_action','action',1,'p_action','parser.py',548),
  ('action -> result_action','action',1,'p_action','parser.py',549),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',555),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',556),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',562),
  ('assigning_operator -> EQUALS','assigning_operator',1,'p_assigning_operator','parser.py',568),
  ('assigning_operator -> PLUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',569),
  ('assigning_operator -> MINUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',570),
  ('assigning_operator -> TIMES EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',571),
  ('assigning_operator -> DIVIDE EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',572),
  ('assigning_operator -> MODULO EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',573),
  ('assigning_operator -> LAND EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',574),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',582),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',583),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',592),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',597),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',598),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',606),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',607),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',608),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',619),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',620),
  ('control_part -> for_control','control_part',1,'p_control_part','parser.py',629),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','parser.py',630),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',631),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','parser.py',640),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',646),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',647),
  ('step_enumeration -> identifier EQUALS start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',653),
  ('step_enumeration -> identifier EQUALS start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',654),
  ('step_enumeration -> identifier EQUALS start_value DOWN end_value','step_enumeration',5,'p_step_enumeration','parser.py',655),
  ('step_enumeration -> identifier EQUALS start_value step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','parser.py',656),
  ('start_value -> expression','start_value',1,'p_start_value','parser.py',670),
  ('step_value -> BY expression','step_value',2,'p_step_value','parser.py',676),
  ('end_value -> TO expression','end_value',2,'p_end_value','parser.py',682),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',688),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',689),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',698),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',704),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',705),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',711),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',712),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',720),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',721),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',730),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','parser.py',736),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',742),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',743),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',751),
  ('result -> expression','result',1,'p_result','parser.py',757),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',763),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',764),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',774),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',775),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',776),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',777),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',778),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',779),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',780),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',781),
  ('procedure_statement -> identifier COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',787),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END','procedure_definition',6,'p_procedure_definition','parser.py',793),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',794),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',795),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END','procedure_definition',8,'p_procedure_definition','parser.py',796),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',810),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',811),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',820),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',826),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',827),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',836),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',837),
]
