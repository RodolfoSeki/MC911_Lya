
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGEQLTLEQleftPLUSMINUSleftTIMESDIVIDEMODULOID ICONST CCONST SCONST PLUS MINUS TIMES DIVIDE MODULO EQUALS SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET AND LAND OR EQ NE GT GEQ LT LEQ COLON COMMA NOT NULL EXIT IF UPPER LOC WHILE ASC OD INT ABS REF DCL NUM ELSE RETURNS DOWN TO DO BY READ THEN LENGTH RESULT RETURN ARRAY ELSIF BOOL SYN FALSE TYPE CHAR FI TRUE LOWER END FOR PRINT IN CHARS PROCprogram : statement_liststatement_list : statement\n                          | statement_list statement\n        statement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statement\n        declaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declaration\n        declaration : identifier_list mode \n                       | identifier_list mode initialization\n        initialization : EQUALS expression\n        identifier_list : identifier\n                           | identifier_list COMMA identifier\n        identifier : ID  synonym_statement : SYN synonym_list SEMI\n         synonym_list : synonym_definition \n                         | synonym_list COMMA synonym_definition\n         synonym_definition : identifier_list mode EQUALS constant_expression\n                               | identifier_list EQUALS constant_expression\n         constant_expression : expression\n         newmode_statement : TYPE newmode_list SEMI\n         newmode_list : mode_definition \n                         | newmode_list COMMA mode_definition\n         mode_definition : identifier_list EQUALS mode\n         mode : identifier\n                 | discrete_mode\n                 | reference_mode\n                 | composite_mode\n         discrete_mode : integer_mode\n                          | boolean_mode\n                          | character_mode\n                          | discrete_range_mode\n         integer_mode : INT\n         boolean_mode : BOOL\n         character_mode : CHAR\n         discrete_range_mode : identifier LPAREN literal_range RPAREN\n                                | discrete_mode LPAREN literal_range RPAREN\n         literal_range : expression COLON expression\n         reference_mode : REF mode\n         composite_mode : string_mode\n                           | array_mode\n         string_mode : CHARS LBRACKET literal RBRACKET\n         array_mode : ARRAY LBRACKET list_index_mode RBRACKET mode\n         list_index_mode : index_mode\n                            | list_index_mode COMMA index_mode\n         index_mode : discrete_mode\n                       | literal_range\n         location : identifier\n                     | dereferenced_reference\n                     | array_element\n                     | array_slice\n                     | call_action\n         dereferenced_reference : location ARROW\n         array_element : array_location LBRACKET expression_list RBRACKET\n         expression_list : expression\n                            | expression_list COMMA expression\n         array_slice : array_location LBRACKET expression COLON expression RBRACKET\n         array_location : location\n         primitive_value : literal\n                            | value_array_element\n                            | value_array_slice\n                            | parenthesized_expression\n         literal : integer_literal\n                    | boolean_literal\n                    | character_literal\n                    | empty_literal\n                    | character_string_literal\n         integer_literal : ICONST\n         boolean_literal : FALSE\n                            | TRUE\n         character_literal : CCONST\n         empty_literal : NULL\n         character_string_literal : SCONST\n         value_array_element : array_primitive_value LBRACKET expression_list RBRACKET\n         value_array_slice : array_primitive_value LBRACKET expression COLON expression RBRACKET\n         array_primitive_value : primitive_value\n         parenthesized_expression : LPAREN expression RPAREN\n         expression : operand0\n                       | conditional_expression\n         conditional_expression : IF boolean_expression then_expression else_expression FI\n                                   | IF boolean_expression then_expression elsif_expression else_expression FI\n         boolean_expression : expression\n         then_expression : THEN expression\n         else_expression : ELSE expression\n         elsif_expression : ELSIF boolean_expression then_expression\n                             | elsif_expression ELSIF boolean_expression then_expression\n         operand0 : operand1\n                     | operand0 operator1 operand1\n         operator1 : relational_operator\n                      | membership_operator\n         relational_operator : AND\n                                | OR \n                                | EQ \n                                | NE\n                                | GT\n                                | GEQ\n                                | LT\n                                | LEQ\n         membership_operator : IN\n         operand1 : operand2\n                     | operand1 arithmetic_additive_operator operand2\n                     | operand1 string_concatenation_operator operand2\n         arithmetic_additive_operator : PLUS\n                                         | MINUS\n         string_concatenation_operator : LAND\n         operand2 : operand3 \n                     | operand2 arithmetic_multiplicative_operator operand3\n         arithmetic_multiplicative_operator : TIMES\n                                               | DIVIDE\n                                               | MODULO \n         operand3 : operand4\n                     | monadic_operator operand4\n         monadic_operator : MINUS\n                             | NOT \n         operand4 : location\n                     | referenced_location\n                     | primitive_value\n         referenced_location : ARROW location\n         action_statement : action SEMI\n                             | identifier COLON action SEMI\n         action : bracketed_action\n                   | assignment_action\n                   | call_action\n                   | exit_action\n                   | return_action\n                   | result_action\n         bracketed_action : if_action\n                             | do_action\n         assignment_action : location assigning_operator expression\n         assigning_operator : EQUALS\n                               | PLUS EQUALS\n                               | MINUS EQUALS\n                               | TIMES EQUALS\n                               | DIVIDE EQUALS\n                               | MODULO EQUALS\n                               | LAND EQUALS\n         if_action : IF boolean_expression then_clause FI\n                      | IF boolean_expression then_clause else_clause FI\n         then_clause : THEN action_statement_list\n        action_statement_list : action_statement\n                                 | action_statement_list action_statement\n         else_clause : ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause \n                        | ELSIF boolean_expression then_clause else_clause\n         do_action : DO action_statement_list OD\n                      | DO control_part SEMI action_statement_list OD\n         control_part : for_control \n                         | for_control while_control\n                         | while_control\n         for_control : FOR iteration\n         iteration : step_enumeration\n                      | range_enumeration\n         step_enumeration : identifier EQUALS start_value end_value\n                             | identifier EQUALS start_value step_value end_value\n                             | identifier EQUALS start_value DOWN end_value\n                             | identifier EQUALS start_value step_value DOWN end_value\n         start_value : expression\n         step_value : BY expression\n         end_value : TO expression\n         range_enumeration : identifier IN discrete_mode\n                              | identifier DOWN IN discrete_mode\n         while_control : WHILE boolean_expression\n         call_action : procedure_call\n                        | builtin_call\n         procedure_call : identifier LPAREN  RPAREN\n                           | identifier LPAREN parameter_list RPAREN\n         parameter_list : parameter\n                           | parameter_list COMMA parameter\n         parameter : expression\n         exit_action : EXIT identifier\n         return_action : RETURN \n                          | RETURN result\n         result_action : RESULT result\n         result : expression\n         builtin_call : builtin_name LPAREN RPAREN\n                         | builtin_name LPAREN parameter_list RPAREN\n         builtin_name : ABS\n                         | ASC\n                         | NUM\n                         | UPPER\n                         | LOWER\n                         | LENGTH\n                         | READ\n                         | PRINT\n         procedure_statement : identifier COLON procedure_definition SEMI\n         procedure_definition : PROC LPAREN RPAREN SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END\n                                 | PROC LPAREN RPAREN result_spec SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END\n         formal_parameter_list : formal_parameter \n                                  | formal_parameter_list COMMA formal_parameter\n         formal_parameter : identifier_list parameter_spec\n         parameter_spec : mode \n                           | mode LOC\n         result_spec : RETURNS LPAREN mode RPAREN\n                        | RETURNS LPAREN mode LOC RPAREN\n        '
    
_lr_action_items = {'IN':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,186,202,213,214,217,225,226,227,234,238,250,264,302,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,150,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,233,-169,-179,-110,-91,-80,-105,-104,270,-57,-51,-77,-60,-78,]),'UPPER':([0,6,8,9,11,17,19,21,28,29,35,36,44,45,50,59,68,73,81,82,83,89,95,97,99,102,106,114,115,141,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,163,165,168,169,170,171,172,173,176,177,178,179,180,181,182,184,190,192,196,200,201,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[2,-8,-2,-7,-5,2,-4,2,2,2,-6,2,2,2,2,2,2,2,-117,2,-116,-3,-133,2,-143,2,2,-122,2,-9,2,-112,-113,-111,-102,2,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,2,2,-107,-106,2,-108,2,2,-18,-136,-134,-138,-137,-135,-139,2,2,-144,-24,-188,-123,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'SCONST':([17,29,36,45,50,59,73,81,82,83,95,97,102,115,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,165,168,169,170,171,172,173,177,178,179,180,181,182,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[57,57,57,57,57,57,57,-117,57,-116,-133,57,57,57,57,-112,-113,-111,-102,57,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,57,-107,-106,57,-108,57,57,-136,-134,-138,-137,-135,-139,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'RBRACKET':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,119,124,125,126,129,131,133,138,143,164,166,197,198,202,213,214,217,223,224,225,226,227,238,246,251,252,253,254,264,273,274,283,288,291,295,302,310,313,314,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-34,-35,-36,-33,-38,-32,-37,-178,-121,-115,238,-58,-169,-179,-110,-91,264,-58,-80,-105,-104,-57,282,-49,-47,-50,286,-77,-59,302,-39,-40,-83,318,-60,-41,-48,-84,-78,]),'BY':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,264,271,272,291,302,314,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-77,300,-160,-83,-60,-84,-78,]),'FALSE':([17,29,36,45,50,59,73,81,82,83,95,97,102,115,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,165,168,169,170,171,172,173,177,178,179,180,181,182,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[52,52,52,52,52,52,52,-117,52,-116,-133,52,52,52,52,-112,-113,-111,-102,52,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,52,-107,-106,52,-108,52,52,-136,-134,-138,-137,-135,-139,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'THEN':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,70,71,72,74,75,76,77,78,79,80,84,85,98,119,143,149,164,166,202,213,214,217,225,226,227,238,262,264,291,292,302,314,315,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,163,-70,-82,-71,-109,-118,-65,-66,-75,-120,-85,-68,-69,-90,-62,-56,-168,-178,216,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,163,-77,-83,216,-60,-84,216,-78,]),'INT':([22,47,48,87,128,194,205,210,233,244,270,286,287,303,],[-17,-15,126,126,126,126,-16,126,126,126,126,126,126,126,]),'END':([6,8,9,11,19,35,89,114,141,176,196,200,201,304,326,327,335,],[-8,-2,-7,-5,-4,-6,-3,-122,-9,-18,-24,-188,-123,325,333,334,337,]),'ELSE':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,99,114,119,143,162,164,166,192,201,202,213,214,215,217,222,225,226,227,238,256,260,264,291,294,302,314,316,318,329,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-143,-122,-168,-178,221,-121,-115,-144,-123,-169,-179,-110,259,-91,-142,-80,-105,-104,-57,259,-86,-77,-83,221,-60,-84,-88,-78,-89,]),'CHARS':([22,47,48,87,128,194,205,244,286,303,],[-17,-15,123,123,123,123,-16,123,123,123,]),'GT':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,160,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-51,-77,-60,-78,]),'LOC':([22,124,125,126,129,131,132,133,134,135,137,138,139,140,206,281,282,283,288,312,324,],[-17,-34,-35,-36,-33,-38,-28,-32,-44,-30,-43,-37,-31,-29,-42,309,-45,-39,-40,-46,332,]),'COMMA':([3,5,22,34,37,41,46,47,48,49,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,86,87,88,98,110,111,112,119,120,121,122,124,125,126,129,130,131,132,133,134,135,137,138,139,140,143,144,164,166,197,198,202,205,206,208,212,213,214,217,223,224,225,226,227,228,229,231,236,237,238,242,243,244,245,247,251,252,253,254,264,266,273,280,281,282,283,288,291,302,308,309,310,311,312,313,314,318,],[-167,-53,-17,-166,-54,-52,-10,-15,127,142,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-19,127,175,-56,127,-25,195,-168,-170,203,-172,-34,-35,-36,-33,-12,-38,-28,-32,-44,-30,-43,-37,-31,-29,-178,203,-121,-115,239,-58,-169,-16,-42,-13,-11,-179,-110,-91,239,-58,-80,-105,-104,-22,-23,-20,-27,-26,-57,-193,279,127,-171,-14,-49,-47,-50,287,-77,-21,-59,-195,-196,-45,-39,-40,-83,-60,-194,-197,-41,-172,-46,-48,-84,-78,]),'REF':([22,47,48,87,128,194,205,244,286,303,],[-17,-15,128,128,128,128,-16,128,128,128,]),'DCL':([0,6,8,9,11,19,21,35,89,114,141,176,196,200,201,276,304,305,306,326,327,328,335,],[12,-8,-2,-7,-5,-4,12,-6,-3,-122,-9,-18,-24,-188,-123,12,12,12,12,12,12,12,12,]),'WHILE':([3,5,22,28,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,105,119,124,125,126,129,131,133,138,143,164,166,187,188,189,202,213,214,217,225,226,227,238,264,269,283,288,291,296,301,302,314,318,320,321,322,330,],[-167,-53,-17,102,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,102,-168,-34,-35,-36,-33,-38,-32,-37,-178,-121,-115,-154,-153,-155,-169,-179,-110,-91,-80,-105,-104,-57,-77,-163,-39,-40,-83,-164,-156,-60,-84,-78,-157,-158,-162,-159,]),'EQUALS':([3,5,7,10,22,23,34,37,41,47,53,87,90,91,92,93,94,96,98,104,110,119,124,125,126,129,130,131,132,133,134,135,137,138,139,140,143,174,186,202,205,206,213,238,282,283,288,302,312,],[-167,-53,-51,-55,-17,95,-166,-54,-52,-15,-51,173,177,178,179,180,181,182,-56,-51,194,-168,-34,-35,-36,-33,207,-38,-28,-32,-44,-30,-43,-37,-31,-29,-178,230,235,-169,-16,-42,-179,-57,-45,-39,-40,-60,-46,]),'OD':([99,106,114,192,201,232,],[-143,193,-122,-144,-123,267,]),'CCONST':([17,29,36,45,50,59,73,81,82,83,95,97,102,115,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,165,168,169,170,171,172,173,177,178,179,180,181,182,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[56,56,56,56,56,56,56,-117,56,-116,-133,56,56,56,56,-112,-113,-111,-102,56,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,56,-107,-106,56,-108,56,56,-136,-134,-138,-137,-135,-139,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'ASC':([0,6,8,9,11,17,19,21,28,29,35,36,44,45,50,59,68,73,81,82,83,89,95,97,99,102,106,114,115,141,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,163,165,168,169,170,171,172,173,176,177,178,179,180,181,182,184,190,192,196,200,201,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[27,-8,-2,-7,-5,27,-4,27,27,27,-6,27,27,27,27,27,27,27,-117,27,-116,-3,-133,27,-143,27,27,-122,27,-9,27,-112,-113,-111,-102,27,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,27,27,-107,-106,27,-108,27,27,-18,-136,-134,-138,-137,-135,-139,27,27,-144,-24,-188,-123,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'IF':([0,6,8,9,11,17,19,21,28,29,35,36,44,45,50,59,82,89,95,97,99,102,106,114,115,141,163,165,173,176,177,178,179,180,181,182,184,190,192,196,200,201,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[17,-8,-2,-7,-5,59,-4,17,17,59,-6,59,17,59,59,59,59,-3,-133,59,-143,59,17,-122,59,-9,17,59,59,-18,-136,-134,-138,-137,-135,-139,17,17,-144,-24,-188,-123,59,59,59,59,59,59,59,17,17,59,17,59,59,59,59,59,17,59,17,59,59,59,59,59,59,17,17,17,17,17,17,17,]),'SYN':([0,6,8,9,11,19,21,35,89,114,141,176,196,200,201,276,304,305,306,326,327,328,335,],[18,-8,-2,-7,-5,-4,18,-6,-3,-122,-9,-18,-24,-188,-123,18,18,18,18,18,18,18,18,]),'PLUS':([3,5,7,10,22,23,34,37,41,51,52,53,54,55,56,57,58,60,61,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,104,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-51,-55,-17,91,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,169,-62,-56,-51,-168,-178,-121,-115,-169,-179,-110,169,-80,-105,-104,-57,-51,-77,-60,-78,]),'MODULO':([3,5,7,10,22,23,34,37,41,51,52,53,54,55,56,57,58,60,61,63,64,66,70,71,72,74,75,76,77,79,80,85,98,104,119,143,164,166,202,213,214,225,226,227,238,250,264,302,318,],[-167,-53,-51,-55,-17,92,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,147,-119,-67,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-62,-56,-51,-168,-178,-121,-115,-169,-179,-110,-80,147,147,-57,-51,-77,-60,-78,]),'NUM':([0,6,8,9,11,17,19,21,28,29,35,36,44,45,50,59,68,73,81,82,83,89,95,97,99,102,106,114,115,141,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,163,165,168,169,170,171,172,173,176,177,178,179,180,181,182,184,190,192,196,200,201,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[1,-8,-2,-7,-5,1,-4,1,1,1,-6,1,1,1,1,1,1,1,-117,1,-116,-3,-133,1,-143,1,1,-122,1,-9,1,-112,-113,-111,-102,1,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,1,1,-107,-106,1,-108,1,1,-18,-136,-134,-138,-137,-135,-139,1,1,-144,-24,-188,-123,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'LAND':([3,5,7,10,22,23,34,37,41,51,52,53,54,55,56,57,58,60,61,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,104,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-51,-55,-17,96,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,171,-62,-56,-51,-168,-178,-121,-115,-169,-179,-110,171,-80,-105,-104,-57,-51,-77,-60,-78,]),'ID':([0,6,8,9,11,12,17,18,19,21,22,28,29,30,31,35,36,44,45,47,48,50,59,68,73,81,82,83,87,89,95,97,99,102,103,106,114,115,127,128,141,142,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,163,165,168,169,170,171,172,173,175,176,177,178,179,180,181,182,184,190,192,194,195,196,199,200,201,203,205,207,209,210,211,216,219,221,222,230,232,233,235,239,240,244,258,259,263,265,270,276,279,284,285,286,287,290,299,300,303,304,305,306,326,327,328,335,],[22,-8,-2,-7,-5,22,22,22,-4,22,-17,22,22,22,22,-6,22,22,22,-15,22,22,22,22,22,-117,22,-116,22,-3,-133,22,-143,22,22,22,-122,22,22,22,-9,22,22,-112,-113,-111,-102,22,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,22,22,-107,-106,22,-108,22,22,22,-18,-136,-134,-138,-137,-135,-139,22,22,-144,22,22,-24,22,-188,-123,22,-16,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'TRUE':([17,29,36,45,50,59,73,81,82,83,95,97,102,115,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,165,168,169,170,171,172,173,177,178,179,180,181,182,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[64,64,64,64,64,64,64,-117,64,-116,-133,64,64,64,64,-112,-113,-111,-102,64,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,64,-107,-106,64,-108,64,64,-136,-134,-138,-137,-135,-139,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'COLON':([3,5,7,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,104,119,143,164,166,198,202,213,214,217,224,225,226,227,238,249,250,264,291,302,311,314,318,],[-167,-53,44,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,190,-168,-178,-121,-115,240,-169,-179,-110,-91,265,-80,-105,-104,-57,284,-51,-77,-83,-60,284,-84,-78,]),'ARRAY':([22,47,48,87,128,194,205,244,286,303,],[-17,-15,136,136,136,136,-16,136,136,136,]),'EQ':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,158,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-51,-77,-60,-78,]),'READ':([0,6,8,9,11,17,19,21,28,29,35,36,44,45,50,59,68,73,81,82,83,89,95,97,99,102,106,114,115,141,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,163,165,168,169,170,171,172,173,176,177,178,179,180,181,182,184,190,192,196,200,201,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[24,-8,-2,-7,-5,24,-4,24,24,24,-6,24,24,24,24,24,24,24,-117,24,-116,-3,-133,24,-143,24,24,-122,24,-9,24,-112,-113,-111,-102,24,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,24,24,-107,-106,24,-108,24,24,-18,-136,-134,-138,-137,-135,-139,24,24,-144,-24,-188,-123,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'ELSIF':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,99,114,119,143,162,164,166,192,201,202,213,214,215,217,222,225,226,227,238,256,260,264,291,294,302,314,316,318,329,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-143,-122,-168,-178,219,-121,-115,-144,-123,-169,-179,-110,258,-91,-142,-80,-105,-104,-57,290,-86,-77,-83,219,-60,-84,-88,-78,-89,]),'PRINT':([0,6,8,9,11,17,19,21,28,29,35,36,44,45,50,59,68,73,81,82,83,89,95,97,99,102,106,114,115,141,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,163,165,168,169,170,171,172,173,176,177,178,179,180,181,182,184,190,192,196,200,201,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[26,-8,-2,-7,-5,26,-4,26,26,26,-6,26,26,26,26,26,26,26,-117,26,-116,-3,-133,26,-143,26,26,-122,26,-9,26,-112,-113,-111,-102,26,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,26,26,-107,-106,26,-108,26,26,-18,-136,-134,-138,-137,-135,-139,26,26,-144,-24,-188,-123,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'CHAR':([22,47,48,87,128,194,205,210,233,244,270,286,287,303,],[-17,-15,131,131,131,131,-16,131,131,131,131,131,131,131,]),'ARROW':([3,5,7,10,17,22,23,29,34,36,37,41,45,50,53,54,59,72,73,81,82,83,95,97,98,102,104,115,119,143,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,164,165,168,169,170,171,172,173,177,178,179,180,181,182,202,203,207,209,210,211,213,216,219,230,235,238,239,240,250,258,259,265,284,285,287,290,299,300,302,],[-167,-53,-51,-55,68,-17,98,68,-166,68,-54,-52,68,68,-51,-55,68,98,68,-117,68,-116,-133,68,-56,68,-51,68,-168,-178,68,-112,-113,-111,-102,68,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,98,68,-107,-106,68,-108,68,68,-136,-134,-138,-137,-135,-139,-169,68,68,68,68,68,-179,68,68,68,68,-57,68,68,-51,68,68,68,68,68,68,68,68,68,-60,]),'LOWER':([0,6,8,9,11,17,19,21,28,29,35,36,44,45,50,59,68,73,81,82,83,89,95,97,99,102,106,114,115,141,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,163,165,168,169,170,171,172,173,176,177,178,179,180,181,182,184,190,192,196,200,201,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[15,-8,-2,-7,-5,15,-4,15,15,15,-6,15,15,15,15,15,15,15,-117,15,-116,-3,-133,15,-143,15,15,-122,15,-9,15,-112,-113,-111,-102,15,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,15,15,-107,-106,15,-108,15,15,-18,-136,-134,-138,-137,-135,-139,15,15,-144,-24,-188,-123,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'NE':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,156,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-51,-77,-60,-78,]),'RETURNS':([241,278,],[275,275,]),'PROC':([44,],[116,]),'RPAREN':([3,5,22,34,37,41,45,50,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,119,120,121,122,124,125,126,129,131,132,133,134,135,137,138,139,140,143,144,164,166,167,199,202,206,213,214,217,225,226,227,238,242,243,245,248,255,264,280,281,282,283,285,288,291,302,308,309,310,311,312,314,318,324,332,],[-167,-53,-17,-166,-54,-52,119,143,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-170,202,-172,-34,-35,-36,-33,-38,-28,-32,-44,-30,-43,-37,-31,-29,-178,213,-121,-115,225,241,-169,-42,-179,-110,-91,-80,-105,-104,-57,-193,278,-171,283,288,-77,-195,-196,-45,-39,119,-40,-83,-60,-194,-197,-41,-172,-46,-84,-78,331,336,]),'TO':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,264,271,272,291,297,298,302,314,318,319,323,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-77,299,-160,-83,299,299,-60,-84,-78,299,-161,]),'SEMI':([3,4,5,10,14,16,20,22,25,29,32,34,37,40,41,42,46,49,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,78,79,80,84,85,86,88,98,100,101,105,107,108,109,111,112,113,117,118,119,124,125,126,129,130,131,132,133,134,135,137,138,139,140,143,164,166,183,185,187,188,189,191,193,202,206,208,212,213,214,217,220,225,226,227,228,229,231,236,237,238,241,247,261,264,266,267,269,277,278,282,283,288,291,296,301,302,307,312,314,318,320,321,322,325,330,331,333,334,336,337,],[-167,-131,-53,-126,-128,-124,-129,-17,-130,-174,-127,-166,-54,114,-52,-125,-10,141,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-85,-68,-69,-90,-62,-19,176,-56,184,-152,-150,-175,-177,-173,-25,196,-176,200,201,-168,-34,-35,-36,-33,-12,-38,-28,-32,-44,-30,-43,-37,-31,-29,-178,-121,-115,-132,-165,-154,-153,-155,-151,-148,-169,-42,-13,-11,-179,-110,-91,-140,-80,-105,-104,-22,-23,-20,-27,-26,-57,276,-14,-141,-77,-21,-149,-163,305,306,-45,-39,-40,-83,-164,-156,-60,328,-46,-84,-78,-157,-158,-162,-189,-159,-198,-191,-190,-199,-192,]),'DO':([0,6,8,9,11,19,21,28,35,44,89,99,106,114,141,163,176,184,190,192,196,200,201,221,222,232,263,276,304,305,306,326,327,328,335,],[28,-8,-2,-7,-5,-4,28,28,-6,28,-3,-143,28,-122,-9,28,-18,28,28,-144,-24,-188,-123,28,28,28,28,28,28,28,28,28,28,28,28,]),'FI':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,99,114,119,143,162,164,166,192,201,202,213,214,217,218,222,225,226,227,238,257,263,264,289,291,293,294,302,314,317,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-143,-122,-168,-178,220,-121,-115,-144,-123,-169,-179,-110,-91,261,-142,-80,-105,-104,-57,291,-145,-77,314,-83,-87,-146,-60,-84,-147,-78,]),'GEQ':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,153,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-51,-77,-60,-78,]),'LBRACKET':([3,5,7,10,22,23,34,37,41,43,51,52,53,54,56,57,61,63,64,66,69,70,72,74,75,76,77,79,80,85,98,104,119,123,136,143,164,202,213,225,238,250,264,302,318,],[-167,-53,-51,-55,-17,-61,-166,-54,-52,115,-63,-72,-51,-55,-74,-76,-67,-64,-73,-70,165,-71,-61,-65,-66,-75,-79,-68,-69,-62,-56,-51,-168,204,210,-178,-61,-169,-179,-80,-57,-51,-77,-60,-78,]),'LEQ':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,154,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-51,-77,-60,-78,]),'AND':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,155,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-51,-77,-60,-78,]),'RETURN':([0,6,8,9,11,19,21,28,35,44,89,99,106,114,141,163,176,184,190,192,196,200,201,221,222,232,263,276,304,305,306,326,327,328,335,],[29,-8,-2,-7,-5,-4,29,29,-6,29,-3,-143,29,-122,-9,29,-18,29,29,-144,-24,-188,-123,29,29,29,29,29,29,29,29,29,29,29,29,]),'EXIT':([0,6,8,9,11,19,21,28,35,44,89,99,106,114,141,163,176,184,190,192,196,200,201,221,222,232,263,276,304,305,306,326,327,328,335,],[30,-8,-2,-7,-5,-4,30,30,-6,30,-3,-143,30,-122,-9,30,-18,30,30,-144,-24,-188,-123,30,30,30,30,30,30,30,30,30,30,30,30,]),'TYPE':([0,6,8,9,11,19,21,35,89,114,141,176,196,200,201,276,304,305,306,326,327,328,335,],[31,-8,-2,-7,-5,-4,31,-6,-3,-122,-9,-18,-24,-188,-123,31,31,31,31,31,31,31,31,]),'DOWN':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,186,202,213,214,217,225,226,227,238,264,271,272,291,297,302,314,318,323,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,-81,-64,-73,-70,-82,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,234,-169,-179,-110,-91,-80,-105,-104,-57,-77,298,-160,-83,319,-60,-84,-78,-161,]),'DIVIDE':([3,5,7,10,22,23,34,37,41,51,52,53,54,55,56,57,58,60,61,63,64,66,70,71,72,74,75,76,77,79,80,85,98,104,119,143,164,166,202,213,214,225,226,227,238,250,264,302,318,],[-167,-53,-51,-55,-17,93,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,146,-119,-67,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-62,-56,-51,-168,-178,-121,-115,-169,-179,-110,-80,146,146,-57,-51,-77,-60,-78,]),'NULL':([17,29,36,45,50,59,73,81,82,83,95,97,102,115,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,165,168,169,170,171,172,173,177,178,179,180,181,182,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[76,76,76,76,76,76,76,-117,76,-116,-133,76,76,76,76,-112,-113,-111,-102,76,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,76,-107,-106,76,-108,76,76,-136,-134,-138,-137,-135,-139,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'BOOL':([22,47,48,87,128,194,205,210,233,244,270,286,287,303,],[-17,-15,138,138,138,138,-16,138,138,138,138,138,138,138,]),'$end':([6,8,9,11,19,21,35,39,89,114,141,176,196,200,201,],[-8,-2,-7,-5,-4,-1,-6,0,-3,-122,-9,-18,-24,-188,-123,]),'ABS':([0,6,8,9,11,17,19,21,28,29,35,36,44,45,50,59,68,73,81,82,83,89,95,97,99,102,106,114,115,141,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,163,165,168,169,170,171,172,173,176,177,178,179,180,181,182,184,190,192,196,200,201,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[33,-8,-2,-7,-5,33,-4,33,33,33,-6,33,33,33,33,33,33,33,-117,33,-116,-3,-133,33,-143,33,33,-122,33,-9,33,-112,-113,-111,-102,33,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,33,33,-107,-106,33,-108,33,33,-18,-136,-134,-138,-137,-135,-139,33,33,-144,-24,-188,-123,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'LT':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,152,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-51,-77,-60,-78,]),'RESULT':([0,6,8,9,11,19,21,28,35,44,89,99,106,114,141,163,176,184,190,192,196,200,201,221,222,232,263,276,304,305,306,326,327,328,335,],[36,-8,-2,-7,-5,-4,36,36,-6,36,-3,-143,36,-122,-9,36,-18,36,36,-144,-24,-188,-123,36,36,36,36,36,36,36,36,36,36,36,36,]),'TIMES':([3,5,7,10,22,23,34,37,41,51,52,53,54,55,56,57,58,60,61,63,64,66,70,71,72,74,75,76,77,79,80,85,98,104,119,143,164,166,202,213,214,225,226,227,238,250,264,302,318,],[-167,-53,-51,-55,-17,90,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,148,-119,-67,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-62,-56,-51,-168,-178,-121,-115,-169,-179,-110,-80,148,148,-57,-51,-77,-60,-78,]),'NOT':([17,29,36,45,50,59,82,95,97,102,115,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,165,168,169,170,171,172,173,177,178,179,180,181,182,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[81,81,81,81,81,81,81,-133,81,81,81,81,-112,-113,-111,-102,81,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,81,-107,-106,81,-108,81,81,-136,-134,-138,-137,-135,-139,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'LPAREN':([1,2,7,13,15,17,22,24,26,27,29,33,36,38,45,50,53,59,73,81,82,83,95,97,102,104,115,116,124,125,126,129,131,132,133,138,140,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,165,168,169,170,171,172,173,177,178,179,180,181,182,203,207,209,210,211,216,219,230,235,239,240,250,251,258,259,265,268,269,275,283,284,285,287,288,290,296,299,300,],[-182,-183,45,50,-184,82,-17,-186,-187,-181,82,-180,82,-185,82,82,45,82,82,-117,82,-116,-133,82,82,45,82,199,-34,-35,-36,-33,-38,209,-32,-37,211,82,-112,-113,-111,-102,82,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,82,-107,-106,82,-108,82,82,-136,-134,-138,-137,-135,-139,82,82,82,82,82,82,82,82,82,82,82,285,211,82,82,82,209,211,303,-39,82,82,82,-40,82,211,82,82,]),'FOR':([28,],[103,]),'ICONST':([17,29,36,45,50,59,73,81,82,83,95,97,102,115,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,165,168,169,170,171,172,173,177,178,179,180,181,182,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[70,70,70,70,70,70,70,-117,70,-116,-133,70,70,70,70,-112,-113,-111,-102,70,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,70,-107,-106,70,-108,70,70,-136,-134,-138,-137,-135,-139,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'MINUS':([3,5,7,10,17,22,23,29,34,36,37,41,45,50,51,52,53,54,55,56,57,58,59,60,61,63,64,66,70,71,72,74,75,76,77,79,80,82,84,85,95,97,98,102,104,115,119,143,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,164,165,166,168,169,170,171,172,173,177,178,179,180,181,182,202,203,207,209,210,211,213,214,216,217,219,225,226,227,230,235,238,239,240,250,258,259,264,265,284,285,287,290,299,300,302,318,],[-167,-53,-51,-55,83,-17,94,83,-166,83,-54,-52,83,83,-63,-72,-51,-55,-114,-74,-76,-103,83,-119,-67,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,83,168,-62,-133,83,-56,83,-51,83,-168,-178,83,-112,-113,-111,-102,83,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,-121,83,-115,-107,-106,83,-108,83,83,-136,-134,-138,-137,-135,-139,-169,83,83,83,83,83,-179,-110,83,168,83,-80,-105,-104,83,83,-57,83,83,-51,83,83,-77,83,83,83,83,83,83,83,-60,-78,]),'OR':([3,5,22,34,37,41,51,52,53,54,55,56,57,58,60,61,62,63,64,66,70,71,72,74,75,76,77,79,80,84,85,98,119,143,164,166,202,213,214,217,225,226,227,238,250,264,302,318,],[-167,-53,-17,-166,-54,-52,-63,-72,-51,-55,-114,-74,-76,-103,-119,-67,157,-64,-73,-70,-71,-109,-118,-65,-66,-75,-120,-68,-69,-90,-62,-56,-168,-178,-121,-115,-169,-179,-110,-91,-80,-105,-104,-57,-51,-77,-60,-78,]),'LENGTH':([0,6,8,9,11,17,19,21,28,29,35,36,44,45,50,59,68,73,81,82,83,89,95,97,99,102,106,114,115,141,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,163,165,168,169,170,171,172,173,176,177,178,179,180,181,182,184,190,192,196,200,201,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[38,-8,-2,-7,-5,38,-4,38,38,38,-6,38,38,38,38,38,38,38,-117,38,-116,-3,-133,38,-143,38,38,-122,38,-9,38,-112,-113,-111,-102,38,-100,-99,-101,-94,-97,-95,-96,-92,-98,-93,38,38,-107,-106,38,-108,38,38,-18,-136,-134,-138,-137,-135,-139,38,38,-144,-24,-188,-123,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'constant_expression':([173,230,],[228,266,]),'assignment_action':([0,21,28,44,106,163,184,190,221,222,232,263,276,304,305,306,326,327,328,335,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'do_action':([0,21,28,44,106,163,184,190,221,222,232,263,276,304,305,306,326,327,328,335,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'result_action':([0,21,28,44,106,163,184,190,221,222,232,263,276,304,305,306,326,327,328,335,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'array_element':([0,17,21,28,29,36,44,45,50,59,68,73,82,97,102,106,115,145,151,163,165,170,172,173,184,190,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'character_mode':([48,87,128,194,210,233,244,270,286,287,303,],[124,124,124,124,124,124,124,124,124,124,124,]),'identifier':([0,12,17,18,21,28,29,30,31,36,44,45,48,50,59,68,73,82,87,97,102,103,106,115,127,128,142,145,151,163,165,170,172,173,175,184,190,194,195,199,203,207,209,210,211,216,219,221,222,230,232,233,235,239,240,244,258,259,263,265,270,276,279,284,285,286,287,290,299,300,303,304,305,306,326,327,328,335,],[7,47,53,47,7,104,53,109,47,53,53,53,132,53,53,53,53,53,132,53,53,186,104,53,205,132,47,53,53,104,53,53,53,53,47,104,53,132,47,47,53,53,53,250,53,53,53,104,104,53,104,268,53,53,53,132,53,53,104,53,268,7,47,53,53,132,250,53,53,53,132,7,7,7,7,7,7,7,]),'statement':([0,21,276,304,305,306,326,327,328,335,],[8,89,8,89,8,8,89,89,8,89,]),'elsif_expression':([215,],[256,]),'array_location':([0,17,21,28,29,36,44,45,50,59,68,73,82,97,102,106,115,145,151,163,165,170,172,173,184,190,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'call_action':([0,17,21,28,29,36,44,45,50,59,68,73,82,97,102,106,115,145,151,163,165,170,172,173,184,190,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[10,54,10,10,54,54,10,54,54,54,54,54,54,54,54,10,54,54,54,10,54,54,54,54,10,10,54,54,54,54,54,54,54,10,10,54,10,54,54,54,54,54,10,54,10,54,54,54,54,54,54,10,10,10,10,10,10,10,]),'synonym_statement':([0,21,276,304,305,306,326,327,328,335,],[11,11,11,11,11,11,11,11,11,11,]),'membership_operator':([62,],[161,]),'bracketed_action':([0,21,28,44,106,163,184,190,221,222,232,263,276,304,305,306,326,327,328,335,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'mode':([48,87,128,194,244,286,303,],[130,174,206,236,281,312,324,]),'boolean_literal':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'declaration_statement':([0,21,276,304,305,306,326,327,328,335,],[19,19,19,19,19,19,19,19,19,19,]),'operand0':([17,29,36,45,50,59,82,97,102,115,165,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'operator1':([62,],[151,]),'builtin_name':([0,17,21,28,29,36,44,45,50,59,68,73,82,97,102,106,115,145,151,163,165,170,172,173,184,190,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'monadic_operator':([17,29,36,45,50,59,82,97,102,115,145,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'parameter':([45,50,203,285,],[120,120,245,120,]),'builtin_call':([0,17,21,28,29,36,44,45,50,59,68,73,82,97,102,106,115,145,151,163,165,170,172,173,184,190,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'expression_list':([115,165,],[197,223,]),'else_clause':([162,294,],[218,317,]),'array_primitive_value':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'iteration':([103,],[188,]),'string_mode':([48,87,128,194,244,286,303,],[137,137,137,137,137,137,137,]),'dereferenced_reference':([0,17,21,28,29,36,44,45,50,59,68,73,82,97,102,106,115,145,151,163,165,170,172,173,184,190,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'statement_list':([0,276,305,306,328,],[21,304,326,327,335,]),'parameter_list':([45,50,285,],[121,144,121,]),'if_action':([0,21,28,44,106,163,184,190,221,222,232,263,276,304,305,306,326,327,328,335,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'parenthesized_expression':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'parameter_spec':([244,],[280,]),'character_literal':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'relational_operator':([62,],[159,]),'step_enumeration':([103,],[187,]),'primitive_value':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'program':([0,],[39,]),'expression':([17,29,36,45,50,59,82,97,102,115,165,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[78,108,108,122,122,78,167,183,78,198,224,229,122,247,249,249,249,260,78,229,272,273,274,78,293,295,310,311,249,78,322,323,]),'newmode_statement':([0,21,276,304,305,306,326,327,328,335,],[35,35,35,35,35,35,35,35,35,35,]),'discrete_range_mode':([48,87,128,194,210,233,244,270,286,287,303,],[125,125,125,125,125,125,125,125,125,125,125,]),'for_control':([28,],[105,]),'integer_mode':([48,87,128,194,210,233,244,270,286,287,303,],[133,133,133,133,133,133,133,133,133,133,133,]),'empty_literal':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'then_clause':([65,262,],[162,294,]),'synonym_definition':([18,175,],[86,231,]),'arithmetic_multiplicative_operator':([58,226,227,],[145,145,145,]),'then_expression':([149,292,315,],[215,316,329,]),'range_enumeration':([103,],[189,]),'literal':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,246,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'conditional_expression':([17,29,36,45,50,59,82,97,102,115,165,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'else_expression':([215,256,],[257,289,]),'value_array_element':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'identifier_list':([12,18,31,142,175,195,199,279,],[48,87,110,48,87,110,244,244,]),'synonym_list':([18,],[88,]),'action_statement':([0,21,28,106,163,184,221,222,232,263,276,304,305,306,326,327,328,335,],[6,6,99,192,99,99,99,192,192,192,6,6,6,6,6,6,6,6,]),'procedure_statement':([0,21,276,304,305,306,326,327,328,335,],[9,9,9,9,9,9,9,9,9,9,]),'control_part':([28,],[100,]),'mode_definition':([31,195,],[111,237,]),'while_control':([28,105,],[101,191,]),'return_action':([0,21,28,44,106,163,184,190,221,222,232,263,276,304,305,306,326,327,328,335,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'formal_parameter':([199,279,],[242,308,]),'operand2':([17,29,36,45,50,59,82,97,102,115,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[58,58,58,58,58,58,58,58,58,58,58,58,226,227,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'operand4':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[55,55,55,55,55,55,166,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'array_slice':([0,17,21,28,29,36,44,45,50,59,68,73,82,97,102,106,115,145,151,163,165,170,172,173,184,190,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'referenced_location':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'value_array_slice':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'array_mode':([48,87,128,194,244,286,303,],[134,134,134,134,134,134,134,]),'declaration_list':([12,],[49,]),'formal_parameter_list':([199,],[243,]),'boolean_expression':([17,59,102,219,258,290,],[65,149,185,262,292,315,]),'start_value':([235,],[271,]),'character_string_literal':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'operand1':([17,29,36,45,50,59,82,97,102,115,151,165,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[84,84,84,84,84,84,84,84,84,84,217,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'discrete_mode':([48,87,128,194,210,233,244,270,286,287,303,],[140,140,140,140,251,269,140,296,140,251,140,]),'operand3':([17,29,36,45,50,59,82,97,102,115,145,151,165,170,172,173,203,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[71,71,71,71,71,71,71,71,71,71,214,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'index_mode':([210,287,],[252,313,]),'location':([0,17,21,28,29,36,44,45,50,59,68,73,82,97,102,106,115,145,151,163,165,170,172,173,184,190,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[23,72,23,23,72,72,23,72,72,72,164,72,72,72,72,23,72,72,72,23,72,72,72,72,23,23,72,72,72,72,72,72,72,23,23,72,23,72,72,72,72,72,23,72,23,72,72,72,72,72,72,23,23,23,23,23,23,23,]),'exit_action':([0,21,28,44,106,163,184,190,221,222,232,263,276,304,305,306,326,327,328,335,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'procedure_definition':([44,],[117,]),'list_index_mode':([210,],[254,]),'integer_literal':([17,29,36,45,50,59,73,82,97,102,115,145,151,165,170,172,173,203,204,207,209,210,211,216,219,230,235,239,240,258,259,265,284,285,287,290,299,300,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'literal_range':([209,210,211,285,287,],[248,253,255,248,253,]),'boolean_mode':([48,87,128,194,210,233,244,270,286,287,303,],[129,129,129,129,129,129,129,129,129,129,129,]),'reference_mode':([48,87,128,194,244,286,303,],[135,135,135,135,135,135,135,]),'result':([29,36,],[107,113,]),'procedure_call':([0,17,21,28,29,36,44,45,50,59,68,73,82,97,102,106,115,145,151,163,165,170,172,173,184,190,203,207,209,210,211,216,219,221,222,230,232,235,239,240,258,259,263,265,276,284,285,287,290,299,300,304,305,306,326,327,328,335,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'step_value':([271,],[297,]),'result_spec':([241,278,],[277,307,]),'composite_mode':([48,87,128,194,244,286,303,],[139,139,139,139,139,139,139,]),'newmode_list':([31,],[112,]),'initialization':([130,],[208,]),'declaration':([12,142,],[46,212,]),'action':([0,21,28,44,106,163,184,190,221,222,232,263,276,304,305,306,326,327,328,335,],[40,40,40,118,40,40,40,118,40,40,40,40,40,40,40,40,40,40,40,40,]),'action_statement_list':([28,163,184,221,],[106,222,232,263,]),'string_concatenation_operator':([84,217,],[170,170,]),'end_value':([271,297,298,319,],[301,320,321,330,]),'assigning_operator':([23,],[97,]),'arithmetic_additive_operator':([84,217,],[172,172,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',18),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',23),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',36),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',41),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',45),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',46),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',55),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',56),
  ('initialization -> EQUALS expression','initialization',2,'p_initialization','parser.py',65),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',71),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',72),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',80),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',85),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',91),
  ('synonym_list -> synonym_list COMMA synonym_definition','synonym_list',3,'p_synonym_list','parser.py',92),
  ('synonym_definition -> identifier_list mode EQUALS constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',101),
  ('synonym_definition -> identifier_list EQUALS constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',102),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',111),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',117),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',123),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',124),
  ('mode_definition -> identifier_list EQUALS mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> identifier','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',151),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',157),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',163),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',169),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',175),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',176),
  ('literal_range -> expression COLON expression','literal_range',3,'p_literal_range','parser.py',181),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',187),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',192),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',193),
  ('string_mode -> CHARS LBRACKET literal RBRACKET','string_mode',4,'p_string_mode','parser.py',198),
  ('array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode','array_mode',5,'p_array_mode','parser.py',204),
  ('list_index_mode -> index_mode','list_index_mode',1,'p_list_index_mode','parser.py',209),
  ('list_index_mode -> list_index_mode COMMA index_mode','list_index_mode',3,'p_list_index_mode','parser.py',210),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',218),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',219),
  ('location -> identifier','location',1,'p_location','parser.py',225),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',226),
  ('location -> array_element','location',1,'p_location','parser.py',227),
  ('location -> array_slice','location',1,'p_location','parser.py',228),
  ('location -> call_action','location',1,'p_location','parser.py',229),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',238),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',274),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',280),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',281),
  ('array_slice -> array_location LBRACKET expression COLON expression RBRACKET','array_slice',6,'p_array_slice','parser.py',290),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',296),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',302),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',303),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',304),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',305),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',311),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',312),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',313),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',314),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',315),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',321),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',327),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',328),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',334),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',340),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',346),
  ('value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','parser.py',352),
  ('value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',358),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',364),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',370),
  ('expression -> operand0','expression',1,'p_expression','parser.py',376),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',377),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',383),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',384),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',393),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',399),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',405),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',411),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',412),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',421),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',422),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',432),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',433),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',439),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',440),
  ('relational_operator -> EQ','relational_operator',1,'p_relational_operator','parser.py',441),
  ('relational_operator -> NE','relational_operator',1,'p_relational_operator','parser.py',442),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','parser.py',443),
  ('relational_operator -> GEQ','relational_operator',1,'p_relational_operator','parser.py',444),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','parser.py',445),
  ('relational_operator -> LEQ','relational_operator',1,'p_relational_operator','parser.py',446),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',452),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',458),
  ('operand1 -> operand1 arithmetic_additive_operator operand2','operand1',3,'p_operand1','parser.py',459),
  ('operand1 -> operand1 string_concatenation_operator operand2','operand1',3,'p_operand1','parser.py',460),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',470),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',471),
  ('string_concatenation_operator -> LAND','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',477),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',483),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',484),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',494),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',495),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',496),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',501),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',502),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',512),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',513),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',519),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',520),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',521),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',528),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',534),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','parser.py',535),
  ('action -> bracketed_action','action',1,'p_action','parser.py',544),
  ('action -> assignment_action','action',1,'p_action','parser.py',545),
  ('action -> call_action','action',1,'p_action','parser.py',546),
  ('action -> exit_action','action',1,'p_action','parser.py',547),
  ('action -> return_action','action',1,'p_action','parser.py',548),
  ('action -> result_action','action',1,'p_action','parser.py',549),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',555),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',556),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',562),
  ('assigning_operator -> EQUALS','assigning_operator',1,'p_assigning_operator','parser.py',568),
  ('assigning_operator -> PLUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',569),
  ('assigning_operator -> MINUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',570),
  ('assigning_operator -> TIMES EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',571),
  ('assigning_operator -> DIVIDE EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',572),
  ('assigning_operator -> MODULO EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',573),
  ('assigning_operator -> LAND EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',574),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',582),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',583),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',592),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',597),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',598),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',606),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',607),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',608),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',619),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',620),
  ('control_part -> for_control','control_part',1,'p_control_part','parser.py',629),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','parser.py',630),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',631),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','parser.py',640),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',646),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',647),
  ('step_enumeration -> identifier EQUALS start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',653),
  ('step_enumeration -> identifier EQUALS start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',654),
  ('step_enumeration -> identifier EQUALS start_value DOWN end_value','step_enumeration',5,'p_step_enumeration','parser.py',655),
  ('step_enumeration -> identifier EQUALS start_value step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','parser.py',656),
  ('start_value -> expression','start_value',1,'p_start_value','parser.py',670),
  ('step_value -> BY expression','step_value',2,'p_step_value','parser.py',676),
  ('end_value -> TO expression','end_value',2,'p_end_value','parser.py',682),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',688),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',689),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',698),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',704),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',705),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',711),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',712),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',720),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',721),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',730),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','parser.py',736),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',742),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',743),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',751),
  ('result -> expression','result',1,'p_result','parser.py',757),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',763),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',764),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',774),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',775),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',776),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',777),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',778),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',779),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',780),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',781),
  ('procedure_statement -> identifier COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',787),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END','procedure_definition',6,'p_procedure_definition','parser.py',793),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',794),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',795),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END','procedure_definition',8,'p_procedure_definition','parser.py',796),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',810),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',811),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',820),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',826),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',827),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',836),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',837),
]
