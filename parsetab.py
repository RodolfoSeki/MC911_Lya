
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGEQLTLEQleftPLUSMINUSleftTIMESDIVIDEMODULOID ICONST CCONST SCONST PLUS MINUS TIMES DIVIDE MODULO EQUALS SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET AND LAND OR EQ NE GT GEQ LT LEQ COLON COMMA NOT UPPER LOWER TRUE PROC DCL OD THEN BY REF ELSE CHAR ABS IN NULL ELSIF END FI SYN READ RESULT NUM BOOL INT FALSE LENGTH RETURN RETURNS CHARS ASC IF DOWN TO LOC FOR TYPE DO WHILE PRINT EXIT ARRAYprogram : statement_liststatement_list : statement\n                          | statement_list statement\n        statement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statement\n        declaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declaration\n        declaration : identifier_list mode \n                       | identifier_list mode initialization\n        initialization : EQUALS expression\n        identifier_list : identifier\n                           | identifier_list COMMA identifier\n        identifier : ID  synonym_statement : SYN synonym_list SEMI\n         synonym_list : synonym_definition \n                         | synonym_list COMMA synonym_definition\n         synonym_definition : identifier_list mode EQUALS constant_expression\n                               | identifier_list EQUALS constant_expression\n         constant_expression : expression\n         newmode_statement : TYPE newmode_list SEMI\n         newmode_list : mode_definition \n                         | newmode_list COMMA mode_definition\n         mode_definition : identifier_list EQUALS mode\n         mode : identifier\n                 | discrete_mode\n                 | reference_mode\n                 | composite_mode\n         discrete_mode : integer_mode\n                          | boolean_mode\n                          | character_mode\n                          | discrete_range_mode\n         integer_mode : INT\n         boolean_mode : BOOL\n         character_mode : CHAR\n         discrete_range_mode : identifier LPAREN literal_range RPAREN\n                                | discrete_mode LPAREN literal_range RPAREN\n         literal_range : expression COLON expression\n         reference_mode : REF mode\n         composite_mode : string_mode\n                           | array_mode\n         string_mode : CHARS LBRACKET integer_literal RBRACKET\n         array_mode : ARRAY LBRACKET list_index_mode RBRACKET mode\n         list_index_mode : index_mode\n                            | list_index_mode COMMA index_mode\n         index_mode : discrete_mode\n                       | literal_range\n         location : identifier\n                     | dereferenced_reference\n                     | array_element\n                     | array_slice\n                     | call_action\n         dereferenced_reference : location ARROW\n         array_element : array_location LBRACKET expression_list RBRACKET\n         expression_list : expression\n                            | expression_list COMMA expression\n         array_slice : array_location LBRACKET expression COLON expression RBRACKET\n         array_location : location\n         primitive_value : literal\n                            | value_array_element\n                            | value_array_slice\n                            | parenthesized_expression\n         literal : integer_literal\n                    | boolean_literal\n                    | character_literal\n                    | empty_literal\n                    | character_string_literal\n         integer_literal : ICONST\n         boolean_literal : FALSE\n                            | TRUE\n         character_literal : CCONST\n         empty_literal : NULL\n         character_string_literal : SCONST\n         value_array_element : array_primitive_value LBRACKET expression_list RBRACKET\n         value_array_slice : array_primitive_value LBRACKET expression COLON expression RBRACKET\n         array_primitive_value : primitive_value\n         parenthesized_expression : LPAREN expression RPAREN\n         expression : operand0\n                       | conditional_expression\n         conditional_expression : IF boolean_expression then_expression else_expression FI\n                                   | IF boolean_expression then_expression elsif_expression else_expression FI\n         boolean_expression : expression\n         then_expression : THEN expression\n         else_expression : ELSE expression\n         elsif_expression : ELSIF boolean_expression then_expression\n                             | elsif_expression ELSIF boolean_expression then_expression\n         operand0 : operand1\n                     | operand0 operator1 operand1\n         operator1 : relational_operator\n                      | membership_operator\n         relational_operator : AND\n                                | OR \n                                | EQ \n                                | NE\n                                | GT\n                                | GEQ\n                                | LT\n                                | LEQ\n         membership_operator : IN\n         operand1 : operand2\n                     | operand1 arithmetic_additive_operator operand2\n                     | operand1 string_concatenation_operator operand2\n         arithmetic_additive_operator : PLUS\n                                         | MINUS\n         string_concatenation_operator : LAND\n         operand2 : operand3 \n                     | operand2 arithmetic_multiplicative_operator operand3\n         arithmetic_multiplicative_operator : TIMES\n                                               | DIVIDE\n                                               | MODULO \n         operand3 : operand4\n                     | monadic_operator operand4\n         monadic_operator : MINUS\n                             | NOT \n         operand4 : location\n                     | referenced_location\n                     | primitive_value\n         referenced_location : ARROW location\n         action_statement : action SEMI\n                             | identifier COLON action SEMI\n         action : bracketed_action\n                   | assignment_action\n                   | call_action\n                   | exit_action\n                   | return_action\n                   | result_action\n         bracketed_action : if_action\n                             | do_action\n         assignment_action : location assigning_operator expression\n         assigning_operator : EQUALS\n                               | PLUS EQUALS\n                               | MINUS EQUALS\n                               | TIMES EQUALS\n                               | DIVIDE EQUALS\n                               | MODULO EQUALS\n                               | LAND EQUALS\n         if_action : IF boolean_expression then_clause FI\n                      | IF boolean_expression then_clause else_clause FI\n         then_clause : THEN action_statement_list\n        action_statement_list : action_statement\n                                 | action_statement_list action_statement\n         else_clause : ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause \n                        | ELSIF boolean_expression then_clause else_clause\n         do_action : DO action_statement_list OD\n                      | DO control_part SEMI action_statement_list OD\n         control_part : for_control \n                         | for_control while_control\n                         | while_control\n         for_control : FOR iteration\n         iteration : step_enumeration\n                      | range_enumeration\n         step_enumeration : identifier EQUALS start_value end_value\n                             | identifier EQUALS start_value step_value end_value\n                             | identifier EQUALS start_value DOWN end_value\n                             | identifier EQUALS start_value step_value DOWN end_value\n         start_value : expression\n         step_value : BY expression\n         end_value : TO expression\n         range_enumeration : identifier IN discrete_mode\n                              | identifier DOWN IN discrete_mode\n         while_control : WHILE boolean_expression\n         call_action : procedure_call\n                        | builtin_call\n         procedure_call : identifier LPAREN  RPAREN\n                           | identifier LPAREN parameter_list RPAREN\n         parameter_list : parameter\n                           | parameter_list COMMA parameter\n         parameter : expression\n         exit_action : EXIT identifier\n         return_action : RETURN \n                          | RETURN result\n         result_action : RESULT result\n         result : expression\n         builtin_call : builtin_name LPAREN RPAREN\n                         | builtin_name LPAREN parameter_list RPAREN\n         builtin_name : ABS\n                         | ASC\n                         | NUM\n                         | UPPER\n                         | LOWER\n                         | LENGTH\n                         | READ\n                         | PRINT\n         procedure_statement : identifier COLON procedure_definition SEMI\n         procedure_definition : PROC LPAREN RPAREN SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END\n                                 | PROC LPAREN RPAREN result_spec SEMI statement_list END\n                                 | PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END\n         formal_parameter_list : formal_parameter \n                                  | formal_parameter_list COMMA formal_parameter\n         formal_parameter : identifier_list parameter_spec\n         parameter_spec : mode \n                           | mode LOC\n         result_spec : RETURNS LPAREN mode RPAREN\n                        | RETURNS LPAREN mode LOC RPAREN\n        '
    
_lr_action_items = {'RETURNS':([261,295,],[292,292,]),'CHARS':([43,57,61,111,127,142,202,260,280,314,],[-17,-15,136,136,136,136,-16,136,136,136,]),'UPPER':([0,1,8,10,17,25,28,30,34,37,41,42,47,50,53,54,59,63,64,69,71,72,73,74,85,91,102,104,108,116,117,118,120,121,122,130,134,138,153,155,160,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,196,198,200,204,206,211,212,214,215,216,218,220,221,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[38,-5,-8,38,38,-7,38,38,38,-4,-6,-2,38,-133,38,-3,38,-143,38,38,-122,38,38,38,38,38,38,-117,-116,-139,-136,-135,-138,-137,-134,-24,-18,38,-144,38,38,-108,-107,38,-106,38,-111,-113,38,-112,38,-97,38,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-9,38,38,38,38,38,38,38,38,38,38,-188,-123,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'ARROW':([2,3,4,5,6,9,26,27,28,30,34,43,47,49,50,53,59,68,69,73,74,76,85,93,97,102,104,108,116,117,118,120,121,122,126,138,167,169,170,171,172,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,199,200,204,205,206,211,212,214,215,218,223,232,233,236,250,264,267,269,275,277,279,281,284,287,297,],[-167,49,-52,-55,-54,-166,-51,-53,91,91,91,-17,91,-56,-133,91,91,-51,91,91,91,49,91,-55,-51,91,-117,-116,-139,-136,-135,-138,-137,-134,-178,91,-168,-108,-107,91,-106,91,-111,-113,91,-112,49,91,-97,91,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-179,91,91,-57,91,91,91,91,91,91,-169,91,91,91,-51,91,91,91,-60,91,91,91,91,91,91,]),'NULL':([28,30,34,47,50,53,59,69,73,74,85,102,104,108,116,117,118,120,121,122,138,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[88,88,88,88,-133,88,88,88,88,88,88,88,-117,-116,-139,-136,-135,-138,-137,-134,88,-108,-107,88,-106,88,-111,-113,88,-112,88,-97,88,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'FI':([2,4,6,9,27,43,49,63,71,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,126,153,167,168,179,197,199,205,221,223,224,225,226,227,230,237,240,265,268,274,275,298,300,301,302,319,321,323,],[-167,-52,-54,-166,-53,-17,-56,-143,-122,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-178,-144,-168,-115,-121,238,-179,-57,-123,-169,-104,-105,-80,-110,-91,273,-142,-77,300,-145,-60,321,-83,-87,-146,-78,-84,-147,]),'ICONST':([28,30,34,47,50,53,59,69,73,74,85,102,104,108,116,117,118,120,121,122,138,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,200,204,206,208,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[78,78,78,78,-133,78,78,78,78,78,78,78,-117,-116,-139,-136,-135,-138,-137,-134,78,-108,-107,78,-106,78,-111,-113,78,-112,78,-97,78,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'ARRAY':([43,57,61,111,127,142,202,260,280,314,],[-17,-15,140,140,140,140,-16,140,140,140,]),'THEN':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,113,114,126,167,168,179,193,199,205,223,224,225,226,227,230,265,272,275,299,300,319,320,321,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-85,198,-178,-168,-115,-121,232,-179,-57,-169,-104,-105,-80,-110,-91,-77,198,-60,232,-83,-78,232,-84,]),'OR':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,190,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-51,-77,-60,-78,]),'NE':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,181,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-51,-77,-60,-78,]),'GEQ':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,188,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-51,-77,-60,-78,]),'INT':([43,57,61,111,127,142,202,212,217,259,260,280,281,314,],[-17,-15,141,141,141,141,-16,141,141,141,141,141,141,141,]),'TRUE':([28,30,34,47,50,53,59,69,73,74,85,102,104,108,116,117,118,120,121,122,138,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[81,81,81,81,-133,81,81,81,81,81,81,81,-117,-116,-139,-136,-135,-138,-137,-134,81,-108,-107,81,-106,81,-111,-113,81,-112,81,-97,81,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'TYPE':([0,1,8,10,25,37,41,42,54,71,130,134,196,220,221,293,313,315,318,325,328,329,334,],[11,-5,-8,11,-7,-4,-6,-2,-3,-122,-24,-18,-9,-188,-123,11,11,11,11,11,11,11,11,]),'$end':([1,8,10,24,25,37,41,42,54,71,130,134,196,220,221,],[-5,-8,-1,0,-7,-4,-6,-2,-3,-122,-24,-18,-9,-188,-123,]),'TIMES':([2,3,4,5,6,9,26,27,43,49,68,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,105,106,107,126,167,168,179,199,205,223,224,225,226,227,250,265,275,319,],[-167,45,-52,-55,-54,-166,-51,-53,-17,-56,-51,-118,-71,-109,-67,-73,-120,-68,-63,-65,175,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,175,175,-80,-110,-51,-77,-60,-78,]),'MODULO':([2,3,4,5,6,9,26,27,43,49,68,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,105,106,107,126,167,168,179,199,205,223,224,225,226,227,250,265,275,319,],[-167,48,-52,-55,-54,-166,-51,-53,-17,-56,-51,-118,-71,-109,-67,-73,-120,-68,-63,-65,176,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,176,176,-80,-110,-51,-77,-60,-78,]),'LPAREN':([7,16,19,20,26,28,29,30,31,34,36,38,40,43,47,50,53,59,68,69,73,74,85,97,102,104,108,116,117,118,120,121,122,137,138,139,141,144,145,146,147,149,151,165,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,200,204,206,211,212,214,215,218,232,233,236,247,250,255,256,264,267,269,277,278,279,281,282,284,287,288,292,297,],[53,-181,-180,-186,73,85,-185,85,-184,85,-187,-183,-182,-17,85,-133,85,85,73,85,85,85,85,73,85,-117,-116,-139,-136,-135,-138,-137,-134,-32,85,211,-36,-35,-34,-38,-37,215,-33,222,-108,-107,85,-106,85,-111,-113,85,-112,85,-97,85,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,85,85,85,85,85,85,85,85,85,85,85,215,279,215,211,85,85,85,85,-39,85,85,-40,85,85,215,314,85,]),'DCL':([0,1,8,10,25,37,41,42,54,71,130,134,196,220,221,293,313,315,318,325,328,329,334,],[33,-5,-8,33,-7,-4,-6,-2,-3,-122,-24,-18,-9,-188,-123,33,33,33,33,33,33,33,33,]),'RBRACKET':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,126,131,132,137,141,144,145,146,147,151,167,168,179,199,205,223,224,225,226,227,228,229,230,242,243,244,247,248,249,251,265,275,278,282,296,300,303,306,319,321,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-178,-58,205,-32,-36,-35,-34,-38,-37,-33,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-58,265,-91,275,-59,276,-49,-47,-50,280,-77,-60,-39,-40,319,-83,-41,-48,-78,-84,]),'ASC':([0,1,8,10,17,25,28,30,34,37,41,42,47,50,53,54,59,63,64,69,71,72,73,74,85,91,102,104,108,116,117,118,120,121,122,130,134,138,153,155,160,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,196,198,200,204,206,211,212,214,215,216,218,220,221,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[16,-5,-8,16,16,-7,16,16,16,-4,-6,-2,16,-133,16,-3,16,-143,16,16,-122,16,16,16,16,16,16,-117,-116,-139,-136,-135,-138,-137,-134,-24,-18,16,-144,16,16,-108,-107,16,-106,16,-111,-113,16,-112,16,-97,16,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-9,16,16,16,16,16,16,16,16,16,16,-188,-123,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'DO':([0,1,8,10,17,25,37,41,42,54,63,64,71,72,130,134,153,155,160,196,198,216,220,221,239,240,274,293,313,315,318,325,328,329,334,],[17,-5,-8,17,17,-7,-4,-6,-2,-3,-143,17,-122,17,-24,-18,-144,17,17,-9,17,17,-188,-123,17,17,17,17,17,17,17,17,17,17,17,]),'FOR':([17,],[67,]),'IN':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,101,105,106,107,126,159,167,168,179,199,205,219,223,224,225,226,227,230,250,265,275,319,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,183,-66,-74,-76,-178,217,-168,-115,-121,-179,-57,259,-169,-104,-105,-80,-110,-91,-51,-77,-60,-78,]),'BY':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,257,258,265,275,300,319,321,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-160,284,-77,-60,-83,-78,-84,]),'ABS':([0,1,8,10,17,25,28,30,34,37,41,42,47,50,53,54,59,63,64,69,71,72,73,74,85,91,102,104,108,116,117,118,120,121,122,130,134,138,153,155,160,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,196,198,200,204,206,211,212,214,215,216,218,220,221,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[19,-5,-8,19,19,-7,19,19,19,-4,-6,-2,19,-133,19,-3,19,-143,19,19,-122,19,19,19,19,19,19,-117,-116,-139,-136,-135,-138,-137,-134,-24,-18,19,-144,19,19,-108,-107,19,-106,19,-111,-113,19,-112,19,-97,19,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-9,19,19,19,19,19,19,19,19,19,19,-188,-123,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EQ':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,189,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-51,-77,-60,-78,]),'READ':([0,1,8,10,17,25,28,30,34,37,41,42,47,50,53,54,59,63,64,69,71,72,73,74,85,91,102,104,108,116,117,118,120,121,122,130,134,138,153,155,160,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,196,198,200,204,206,211,212,214,215,216,218,220,221,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[20,-5,-8,20,20,-7,20,20,20,-4,-6,-2,20,-133,20,-3,20,-143,20,20,-122,20,20,20,20,20,20,-117,-116,-139,-136,-135,-138,-137,-134,-24,-18,20,-144,20,20,-108,-107,20,-106,20,-111,-113,20,-112,20,-97,20,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-9,20,20,20,20,20,20,20,20,20,20,-188,-123,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'LBRACKET':([2,3,4,5,6,9,12,26,27,43,49,68,76,78,80,81,82,83,84,86,88,90,93,94,95,96,97,99,100,105,106,107,126,136,140,167,179,199,205,223,226,250,265,275,319,],[-167,-61,-52,-55,-54,-166,59,-51,-53,-17,-56,-51,-61,-71,-67,-73,-79,-68,-63,-65,-75,-69,-55,-72,-70,-64,-51,180,-62,-66,-74,-76,-178,208,212,-168,-61,-179,-57,-169,-80,-51,-77,-60,-78,]),'OD':([63,64,71,153,216,221,],[-143,154,-122,-144,254,-123,]),'END':([1,8,25,37,41,42,54,71,130,134,196,220,221,315,325,329,334,],[-5,-8,-7,-4,-6,-2,-3,-122,-24,-18,-9,-188,-123,327,331,335,337,]),'AND':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,192,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-51,-77,-60,-78,]),'RESULT':([0,1,8,10,17,25,37,41,42,54,63,64,71,72,130,134,153,155,160,196,198,216,220,221,239,240,274,293,313,315,318,325,328,329,334,],[28,-5,-8,28,28,-7,-4,-6,-2,-3,-143,28,-122,28,-24,-18,-144,28,28,-9,28,28,-188,-123,28,28,28,28,28,28,28,28,28,28,28,]),'SEMI':([2,4,5,6,9,14,15,18,21,22,23,27,30,32,35,43,49,55,58,60,62,65,66,70,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,103,105,106,107,109,110,112,113,115,119,126,135,137,139,141,143,144,145,146,147,149,150,151,152,154,156,157,158,161,162,163,164,167,168,179,194,199,201,203,205,207,209,210,213,223,224,225,226,227,230,234,235,238,252,254,255,261,265,271,273,275,276,278,282,283,288,291,295,300,305,308,310,311,317,319,321,324,327,331,333,335,336,337,],[-167,-52,-126,-54,-166,-124,-125,-130,-131,71,-129,-53,-174,-128,-127,-17,-56,-25,130,134,-19,155,-152,-150,-90,-118,-177,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-176,-66,-74,-76,-175,-10,196,-85,-173,-132,-178,-44,-32,-28,-36,-30,-35,-34,-38,-37,-29,-43,-33,-31,-148,-154,-153,-155,-165,-151,220,221,-168,-115,-121,-12,-179,-27,-26,-57,-20,-23,-22,-42,-169,-104,-105,-80,-110,-91,-13,-11,-140,-21,-149,-163,293,-77,-14,-141,-60,-45,-39,-40,-156,-164,313,318,-83,-46,-157,-158,-162,328,-78,-84,-159,-189,-191,-198,-190,-199,-192,]),'LEQ':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,185,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-51,-77,-60,-78,]),'EQUALS':([2,3,4,5,6,9,26,27,43,44,45,46,48,49,51,52,56,57,61,68,97,126,135,137,139,141,143,144,145,146,147,148,149,150,151,152,159,167,194,199,202,205,213,223,275,276,278,282,305,],[-167,50,-52,-55,-54,-166,-51,-53,-17,116,117,118,120,-56,121,122,127,-15,138,-51,-51,-178,-44,-32,-28,-36,-30,-35,-34,-38,-37,214,-29,-43,-33,-31,218,-168,233,-179,-16,-57,-42,-169,-60,-45,-39,-40,-46,]),'GT':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,184,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-51,-77,-60,-78,]),'FALSE':([28,30,34,47,50,53,59,69,73,74,85,102,104,108,116,117,118,120,121,122,138,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[94,94,94,94,-133,94,94,94,94,94,94,94,-117,-116,-139,-136,-135,-138,-137,-134,94,-108,-107,94,-106,94,-111,-113,94,-112,94,-97,94,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'MINUS':([2,3,4,5,6,9,26,27,28,30,34,43,47,49,50,53,59,68,69,73,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,100,102,105,106,107,116,117,118,120,121,122,126,138,167,168,169,170,171,172,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,199,200,204,205,206,211,212,214,215,218,223,224,225,226,227,230,232,233,236,250,264,265,267,269,275,277,279,281,284,287,297,319,],[-167,46,-52,-55,-54,-166,-51,-53,108,108,108,-17,108,-56,-133,108,108,-51,108,108,170,-118,-71,-109,-67,-73,-120,-68,-63,108,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,108,-66,-74,-76,-139,-136,-135,-138,-137,-134,-178,108,-168,-115,-108,-107,108,-106,108,-111,-113,108,-112,-121,108,-97,108,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-179,108,108,-57,108,108,108,108,108,108,-169,-104,-105,-80,-110,170,108,108,108,-51,108,-77,108,108,-60,108,108,108,108,108,108,-78,]),'REF':([43,57,61,111,127,142,202,260,280,314,],[-17,-15,142,142,142,142,-16,142,142,142,]),'LENGTH':([0,1,8,10,17,25,28,30,34,37,41,42,47,50,53,54,59,63,64,69,71,72,73,74,85,91,102,104,108,116,117,118,120,121,122,130,134,138,153,155,160,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,196,198,200,204,206,211,212,214,215,216,218,220,221,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[29,-5,-8,29,29,-7,29,29,29,-4,-6,-2,29,-133,29,-3,29,-143,29,29,-122,29,29,29,29,29,29,-117,-116,-139,-136,-135,-138,-137,-134,-24,-18,29,-144,29,29,-108,-107,29,-106,29,-111,-113,29,-112,29,-97,29,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-9,29,29,29,29,29,29,29,29,29,29,-188,-123,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'COLON':([2,4,6,9,26,27,43,49,68,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,126,131,167,168,179,199,205,223,224,225,226,227,228,230,245,250,265,275,300,304,319,321,],[-167,-52,-54,-166,72,-53,-17,-56,160,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-178,204,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,264,-91,277,-51,-77,-60,-83,277,-78,-84,]),'DIVIDE':([2,3,4,5,6,9,26,27,43,49,68,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,105,106,107,126,167,168,179,199,205,223,224,225,226,227,250,265,275,319,],[-167,51,-52,-55,-54,-166,-51,-53,-17,-56,-51,-118,-71,-109,-67,-73,-120,-68,-63,-65,178,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,178,178,-80,-110,-51,-77,-60,-78,]),'LOC':([43,135,137,139,141,143,144,145,146,147,149,150,151,152,213,276,278,282,289,305,326,],[-17,-44,-32,-28,-36,-30,-35,-34,-38,-37,-29,-43,-33,-31,-42,-45,-39,-40,312,-46,332,]),'COMMA':([2,4,6,9,27,43,49,55,56,57,58,60,61,62,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,110,111,112,123,124,125,126,131,132,135,137,139,141,143,144,145,146,147,149,150,151,152,166,167,168,179,194,199,201,202,203,205,207,209,210,213,223,224,225,226,227,228,229,230,234,235,241,243,247,248,249,251,252,260,262,263,265,271,275,276,278,282,289,290,300,303,304,305,306,312,316,319,321,],[-167,-52,-54,-166,-53,-17,-56,-25,128,-15,129,133,128,-19,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-10,128,195,-170,-172,200,-178,-58,206,-44,-32,-28,-36,-30,-35,-34,-38,-37,-29,-43,-33,-31,200,-168,-115,-121,-12,-179,-27,-16,-26,-57,-20,-23,-22,-42,-169,-104,-105,-80,-110,-58,206,-91,-13,-11,-171,-59,-49,-47,-50,281,-21,128,294,-193,-77,-14,-60,-45,-39,-40,-196,-195,-83,-41,-172,-46,-48,-197,-194,-78,-84,]),'DOWN':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,126,159,167,168,179,199,205,223,224,225,226,227,230,257,258,265,275,285,300,307,319,321,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-178,219,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-160,286,-77,-60,309,-83,-161,-78,-84,]),'LOWER':([0,1,8,10,17,25,28,30,34,37,41,42,47,50,53,54,59,63,64,69,71,72,73,74,85,91,102,104,108,116,117,118,120,121,122,130,134,138,153,155,160,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,196,198,200,204,206,211,212,214,215,216,218,220,221,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[31,-5,-8,31,31,-7,31,31,31,-4,-6,-2,31,-133,31,-3,31,-143,31,31,-122,31,31,31,31,31,31,-117,-116,-139,-136,-135,-138,-137,-134,-24,-18,31,-144,31,31,-108,-107,31,-106,31,-111,-113,31,-112,31,-97,31,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-9,31,31,31,31,31,31,31,31,31,31,-188,-123,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'TO':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,257,258,265,275,285,286,300,307,309,319,321,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-160,287,-77,-60,287,287,-83,-161,287,-78,-84,]),'WHILE':([2,4,6,9,17,27,43,49,70,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,126,137,141,144,145,146,147,151,156,157,158,167,168,179,199,205,223,224,225,226,227,230,255,265,275,278,282,283,288,300,308,310,311,319,321,324,],[-167,-52,-54,-166,69,-53,-17,-56,69,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-178,-32,-36,-35,-34,-38,-37,-33,-154,-153,-155,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-163,-77,-60,-39,-40,-156,-164,-83,-157,-158,-162,-78,-84,-159,]),'IF':([0,1,8,10,17,25,28,30,34,37,41,42,47,50,53,54,59,63,64,69,71,72,73,85,102,116,117,118,120,121,122,130,134,138,153,155,160,180,196,198,200,204,206,211,212,214,215,216,218,220,221,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[34,-5,-8,34,34,-7,102,102,102,-4,-6,-2,102,-133,102,-3,102,-143,34,102,-122,34,102,102,102,-139,-136,-135,-138,-137,-134,-24,-18,102,-144,34,34,102,-9,34,102,102,102,102,102,102,102,34,102,-188,-123,102,102,102,34,34,102,102,102,34,102,102,102,102,102,34,102,34,34,34,34,34,34,34,]),'BOOL':([43,57,61,111,127,142,202,212,217,259,260,280,281,314,],[-17,-15,147,147,147,147,-16,147,147,147,147,147,147,147,]),'NOT':([28,30,34,47,50,53,59,69,73,85,102,116,117,118,120,121,122,138,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[104,104,104,104,-133,104,104,104,104,104,104,-139,-136,-135,-138,-137,-134,104,-108,-107,104,-106,104,-111,-113,104,-112,104,-97,104,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'CHAR':([43,57,61,111,127,142,202,212,217,259,260,280,281,314,],[-17,-15,146,146,146,146,-16,146,146,146,146,146,146,146,]),'PROC':([72,],[165,]),'ELSIF':([2,4,6,9,27,43,49,63,71,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,126,153,167,168,179,197,199,205,221,223,224,225,226,227,230,231,240,265,266,270,275,300,302,319,321,322,330,],[-167,-52,-54,-166,-53,-17,-56,-143,-122,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-178,-144,-168,-115,-121,236,-179,-57,-123,-169,-104,-105,-80,-110,-91,267,-142,-77,297,-86,-60,-83,236,-78,-84,-88,-89,]),'PRINT':([0,1,8,10,17,25,28,30,34,37,41,42,47,50,53,54,59,63,64,69,71,72,73,74,85,91,102,104,108,116,117,118,120,121,122,130,134,138,153,155,160,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,196,198,200,204,206,211,212,214,215,216,218,220,221,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[36,-5,-8,36,36,-7,36,36,36,-4,-6,-2,36,-133,36,-3,36,-143,36,36,-122,36,36,36,36,36,36,-117,-116,-139,-136,-135,-138,-137,-134,-24,-18,36,-144,36,36,-108,-107,36,-106,36,-111,-113,36,-112,36,-97,36,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-9,36,36,36,36,36,36,36,36,36,36,-188,-123,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'PLUS':([2,3,4,5,6,9,26,27,43,49,68,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,52,-52,-55,-54,-166,-51,-53,-17,-56,-51,172,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,172,-51,-77,-60,-78,]),'ELSE':([2,4,6,9,27,43,49,63,71,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,126,153,167,168,179,197,199,205,221,223,224,225,226,227,230,231,240,265,266,270,275,300,302,319,321,322,330,],[-167,-52,-54,-166,-53,-17,-56,-143,-122,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-178,-144,-168,-115,-121,239,-179,-57,-123,-169,-104,-105,-80,-110,-91,269,-142,-77,269,-86,-60,-83,239,-78,-84,-88,-89,]),'CCONST':([28,30,34,47,50,53,59,69,73,74,85,102,104,108,116,117,118,120,121,122,138,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[106,106,106,106,-133,106,106,106,106,106,106,106,-117,-116,-139,-136,-135,-138,-137,-134,106,-108,-107,106,-106,106,-111,-113,106,-112,106,-97,106,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'SCONST':([28,30,34,47,50,53,59,69,73,74,85,102,104,108,116,117,118,120,121,122,138,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[107,107,107,107,-133,107,107,107,107,107,107,107,-117,-116,-139,-136,-135,-138,-137,-134,107,-108,-107,107,-106,107,-111,-113,107,-112,107,-97,107,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'LAND':([2,3,4,5,6,9,26,27,43,49,68,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,44,-52,-55,-54,-166,-51,-53,-17,-56,-51,169,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,169,-51,-77,-60,-78,]),'RPAREN':([2,4,6,9,27,43,49,53,73,75,76,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,100,101,105,106,107,123,124,125,126,135,137,139,141,143,144,145,146,147,149,150,151,152,166,167,168,174,179,199,205,213,222,223,224,225,226,227,230,241,246,253,262,263,265,275,276,278,279,282,289,290,300,303,304,305,312,316,319,321,326,332,],[-167,-52,-54,-166,-53,-17,-56,126,167,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-82,-55,-72,-70,-64,-51,-119,-62,-81,-66,-74,-76,-170,-172,199,-178,-44,-32,-28,-36,-30,-35,-34,-38,-37,-29,-43,-33,-31,223,-168,-115,226,-121,-179,-57,-42,261,-169,-104,-105,-80,-110,-91,-171,278,282,295,-193,-77,-60,-45,-39,167,-40,-196,-195,-83,-41,-172,-46,-197,-194,-78,-84,333,336,]),'EXIT':([0,1,8,10,17,25,37,41,42,54,63,64,71,72,130,134,153,155,160,196,198,216,220,221,239,240,274,293,313,315,318,325,328,329,334,],[39,-5,-8,39,39,-7,-4,-6,-2,-3,-143,39,-122,39,-24,-18,-144,39,39,-9,39,39,-188,-123,39,39,39,39,39,39,39,39,39,39,39,]),'LT':([2,4,6,9,27,43,49,75,76,78,79,80,81,82,83,84,86,87,88,89,90,93,94,95,96,97,98,100,101,105,106,107,126,167,168,179,199,205,223,224,225,226,227,230,250,265,275,319,],[-167,-52,-54,-166,-53,-17,-56,-90,-118,-71,-109,-67,-73,-120,-68,-63,-65,-103,-75,-114,-69,-55,-72,-70,-64,-51,-119,-62,191,-66,-74,-76,-178,-168,-115,-121,-179,-57,-169,-104,-105,-80,-110,-91,-51,-77,-60,-78,]),'SYN':([0,1,8,10,25,37,41,42,54,71,130,134,196,220,221,293,313,315,318,325,328,329,334,],[13,-5,-8,13,-7,-4,-6,-2,-3,-122,-24,-18,-9,-188,-123,13,13,13,13,13,13,13,13,]),'NUM':([0,1,8,10,17,25,28,30,34,37,41,42,47,50,53,54,59,63,64,69,71,72,73,74,85,91,102,104,108,116,117,118,120,121,122,130,134,138,153,155,160,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,196,198,200,204,206,211,212,214,215,216,218,220,221,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[40,-5,-8,40,40,-7,40,40,40,-4,-6,-2,40,-133,40,-3,40,-143,40,40,-122,40,40,40,40,40,40,-117,-116,-139,-136,-135,-138,-137,-134,-24,-18,40,-144,40,40,-108,-107,40,-106,40,-111,-113,40,-112,40,-97,40,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,-9,40,40,40,40,40,40,40,40,40,40,-188,-123,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ID':([0,1,8,10,11,13,17,25,28,30,33,34,37,39,41,42,43,47,50,53,54,57,59,61,63,64,67,69,71,72,73,74,85,91,102,104,108,111,116,117,118,120,121,122,127,128,129,130,133,134,138,142,153,155,160,169,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,198,200,202,204,206,211,212,214,215,216,217,218,220,221,222,232,233,236,239,240,259,260,264,267,269,274,277,279,280,281,284,287,293,294,297,313,314,315,318,325,328,329,334,],[43,-5,-8,43,43,43,43,-7,43,43,43,43,-4,43,-6,-2,-17,43,-133,43,-3,-15,43,43,-143,43,43,43,-122,43,43,43,43,43,43,-117,-116,43,-139,-136,-135,-138,-137,-134,43,43,43,-24,43,-18,43,43,-144,43,43,-108,-107,43,-106,43,-111,-113,43,-112,43,-97,43,-102,-98,-101,-93,-92,-99,-96,-95,-100,-94,43,-9,43,43,-16,43,43,43,43,43,43,43,43,43,-188,-123,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'RETURN':([0,1,8,10,17,25,37,41,42,54,63,64,71,72,130,134,153,155,160,196,198,216,220,221,239,240,274,293,313,315,318,325,328,329,334,],[30,-5,-8,30,30,-7,-4,-6,-2,-3,-143,30,-122,30,-24,-18,-144,30,30,-9,30,30,-188,-123,30,30,30,30,30,30,30,30,30,30,30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'control_part':([17,],[65,]),'operator1':([101,],[182,]),'declaration':([33,195,],[110,235,]),'builtin_call':([0,10,17,28,30,34,47,53,59,64,69,72,73,74,85,91,102,138,155,160,171,173,177,180,182,198,200,204,206,211,212,214,215,216,218,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'location':([0,10,17,28,30,34,47,53,59,64,69,72,73,74,85,91,102,138,155,160,171,173,177,180,182,198,200,204,206,211,212,214,215,216,218,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[3,3,3,76,76,76,76,76,76,3,76,3,76,76,76,179,76,76,3,3,76,76,76,76,76,3,76,76,76,76,76,76,76,3,76,76,76,76,3,3,76,76,76,3,76,76,76,76,76,3,76,3,3,3,3,3,3,3,]),'call_action':([0,10,17,28,30,34,47,53,59,64,69,72,73,74,85,91,102,138,155,160,171,173,177,180,182,198,200,204,206,211,212,214,215,216,218,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[5,5,5,93,93,93,93,93,93,5,93,5,93,93,93,93,93,93,5,5,93,93,93,93,93,5,93,93,93,93,93,93,93,5,93,93,93,93,5,5,93,93,93,5,93,93,93,93,93,5,93,5,5,5,5,5,5,5,]),'start_value':([218,],[258,]),'formal_parameter_list':([222,],[262,]),'index_mode':([212,281,],[248,306,]),'parameter':([53,73,200,279,],[123,123,241,123,]),'action_statement':([0,10,17,64,155,198,216,239,240,274,293,313,315,318,325,328,329,334,],[8,8,63,153,63,63,153,63,153,153,8,8,8,8,8,8,8,8,]),'result_spec':([261,295,],[291,317,]),'boolean_literal':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'discrete_range_mode':([61,111,127,142,212,217,259,260,280,281,314,],[144,144,144,144,144,144,144,144,144,144,144,]),'character_literal':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'assigning_operator':([3,],[47,]),'expression_list':([59,180,],[132,229,]),'range_enumeration':([67,],[158,]),'bracketed_action':([0,10,17,64,72,155,160,198,216,239,240,274,293,313,315,318,325,328,329,334,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'assignment_action':([0,10,17,64,72,155,160,198,216,239,240,274,293,313,315,318,325,328,329,334,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'list_index_mode':([212,],[251,]),'literal_range':([211,212,215,279,281,],[246,249,253,246,249,]),'empty_literal':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'while_control':([17,70,],[66,162,]),'boolean_mode':([61,111,127,142,212,217,259,260,280,281,314,],[151,151,151,151,151,151,151,151,151,151,151,]),'arithmetic_multiplicative_operator':([87,224,225,],[177,177,177,]),'character_string_literal':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'program':([0,],[24,]),'step_enumeration':([67,],[156,]),'procedure_statement':([0,10,293,313,315,318,325,328,329,334,],[25,25,25,25,25,25,25,25,25,25,]),'array_element':([0,10,17,28,30,34,47,53,59,64,69,72,73,74,85,91,102,138,155,160,171,173,177,180,182,198,200,204,206,211,212,214,215,216,218,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'string_concatenation_operator':([75,230,],[173,173,]),'referenced_location':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'monadic_operator':([28,30,34,47,53,59,69,73,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'operand0':([28,30,34,47,53,59,69,73,85,102,138,180,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'result':([28,30,],[103,109,]),'end_value':([258,285,286,309,],[283,308,310,324,]),'elsif_expression':([231,],[266,]),'exit_action':([0,10,17,64,72,155,160,198,216,239,240,274,293,313,315,318,325,328,329,334,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'for_control':([17,],[70,]),'then_clause':([114,272,],[197,302,]),'mode_definition':([11,129,],[55,203,]),'discrete_mode':([61,111,127,142,212,217,259,260,280,281,314,],[149,149,149,149,247,255,288,149,149,247,149,]),'arithmetic_additive_operator':([75,230,],[171,171,]),'synonym_list':([13,],[60,]),'statement':([0,10,293,313,315,318,325,328,329,334,],[42,54,42,42,54,42,54,42,54,54,]),'composite_mode':([61,111,127,142,260,280,314,],[152,152,152,152,152,152,152,]),'result_action':([0,10,17,64,72,155,160,198,216,239,240,274,293,313,315,318,325,328,329,334,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'synonym_statement':([0,10,293,313,315,318,325,328,329,334,],[1,1,1,1,1,1,1,1,1,1,]),'operand1':([28,30,34,47,53,59,69,73,85,102,138,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[75,75,75,75,75,75,75,75,75,75,75,75,230,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'operand2':([28,30,34,47,53,59,69,73,85,102,138,171,173,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[87,87,87,87,87,87,87,87,87,87,87,224,225,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'dereferenced_reference':([0,10,17,28,30,34,47,53,59,64,69,72,73,74,85,91,102,138,155,160,171,173,177,180,182,198,200,204,206,211,212,214,215,216,218,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'expression':([28,30,34,47,53,59,69,73,85,102,138,180,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[77,77,113,119,124,131,113,124,174,113,209,228,124,242,243,245,245,209,245,257,270,271,113,296,113,301,303,304,245,307,311,113,]),'synonym_definition':([13,133,],[62,207,]),'procedure_definition':([72,],[163,]),'builtin_name':([0,10,17,28,30,34,47,53,59,64,69,72,73,74,85,91,102,138,155,160,171,173,177,180,182,198,200,204,206,211,212,214,215,216,218,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operand3':([28,30,34,47,53,59,69,73,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[79,79,79,79,79,79,79,79,79,79,79,79,79,227,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'procedure_call':([0,10,17,28,30,34,47,53,59,64,69,72,73,74,85,91,102,138,155,160,171,173,177,180,182,198,200,204,206,211,212,214,215,216,218,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'statement_list':([0,293,313,318,328,],[10,315,325,329,334,]),'reference_mode':([61,111,127,142,260,280,314,],[143,143,143,143,143,143,143,]),'primitive_value':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'value_array_element':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'array_location':([0,10,17,28,30,34,47,53,59,64,69,72,73,74,85,91,102,138,155,160,171,173,177,180,182,198,200,204,206,211,212,214,215,216,218,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'parameter_spec':([260,],[290,]),'mode':([61,111,127,142,260,280,314,],[148,194,201,213,289,305,326,]),'boolean_expression':([34,69,102,236,267,297,],[114,161,193,272,299,320,]),'identifier_list':([11,13,33,129,133,195,222,294,],[56,61,111,56,61,111,260,260,]),'action_statement_list':([17,155,198,239,],[64,216,240,274,]),'iteration':([67,],[157,]),'membership_operator':([101,],[186,]),'operand4':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[89,89,89,89,89,89,89,89,168,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'parameter_list':([53,73,279,],[125,166,166,]),'if_action':([0,10,17,64,72,155,160,198,216,239,240,274,293,313,315,318,325,328,329,334,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'conditional_expression':([28,30,34,47,53,59,69,73,85,102,138,180,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'constant_expression':([138,214,],[210,252,]),'action':([0,10,17,64,72,155,160,198,216,239,240,274,293,313,315,318,325,328,329,334,],[22,22,22,22,164,22,164,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'initialization':([194,],[234,]),'array_mode':([61,111,127,142,260,280,314,],[135,135,135,135,135,135,135,]),'array_slice':([0,10,17,28,30,34,47,53,59,64,69,72,73,74,85,91,102,138,155,160,171,173,177,180,182,198,200,204,206,211,212,214,215,216,218,232,233,236,239,240,264,267,269,274,277,279,281,284,287,293,297,313,315,318,325,328,329,334,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'value_array_slice':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'integer_mode':([61,111,127,142,212,217,259,260,280,281,314,],[137,137,137,137,137,137,137,137,137,137,137,]),'identifier':([0,10,11,13,17,28,30,33,34,39,47,53,59,61,64,67,69,72,73,74,85,91,102,111,127,128,129,133,138,142,155,160,171,173,177,180,182,195,198,200,204,206,211,212,214,215,216,217,218,222,232,233,236,239,240,259,260,264,267,269,274,277,279,280,281,284,287,293,294,297,313,314,315,318,325,328,329,334,],[26,26,57,57,68,97,97,57,97,115,97,97,97,139,68,159,97,97,97,97,97,97,97,139,139,202,57,57,97,139,68,97,97,97,97,97,97,57,68,97,97,97,97,250,97,97,68,256,97,57,97,97,97,68,68,256,139,97,97,97,68,97,97,139,250,97,97,26,57,97,26,139,26,26,26,26,26,26,]),'else_clause':([197,302,],[237,323,]),'newmode_list':([11,],[58,]),'relational_operator':([101,],[187,]),'step_value':([258,],[285,]),'array_primitive_value':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'literal':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'return_action':([0,10,17,64,72,155,160,198,216,239,240,274,293,313,315,318,325,328,329,334,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'declaration_list':([33,],[112,]),'do_action':([0,10,17,64,72,155,160,198,216,239,240,274,293,313,315,318,325,328,329,334,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'character_mode':([61,111,127,142,212,217,259,260,280,281,314,],[145,145,145,145,145,145,145,145,145,145,145,]),'integer_literal':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,208,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,244,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'declaration_statement':([0,10,293,313,315,318,325,328,329,334,],[37,37,37,37,37,37,37,37,37,37,]),'else_expression':([231,266,],[268,298,]),'then_expression':([193,299,320,],[231,322,330,]),'string_mode':([61,111,127,142,260,280,314,],[150,150,150,150,150,150,150,]),'newmode_statement':([0,10,293,313,315,318,325,328,329,334,],[41,41,41,41,41,41,41,41,41,41,]),'parenthesized_expression':([28,30,34,47,53,59,69,73,74,85,102,138,171,173,177,180,182,200,204,206,211,212,214,215,218,232,233,236,264,267,269,277,279,281,284,287,297,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'formal_parameter':([222,294,],[263,316,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',18),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',23),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',36),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',41),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',46),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',47),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',56),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',57),
  ('initialization -> EQUALS expression','initialization',2,'p_initialization','parser.py',67),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',74),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',75),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',83),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',89),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',96),
  ('synonym_list -> synonym_list COMMA synonym_definition','synonym_list',3,'p_synonym_list','parser.py',97),
  ('synonym_definition -> identifier_list mode EQUALS constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list EQUALS constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',118),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',124),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',131),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',132),
  ('mode_definition -> identifier_list EQUALS mode','mode_definition',3,'p_mode_definition','parser.py',141),
  ('mode -> identifier','mode',1,'p_mode','parser.py',148),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',149),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',150),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',151),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',158),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',159),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',160),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',161),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',168),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',175),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',182),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',189),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',190),
  ('literal_range -> expression COLON expression','literal_range',3,'p_literal_range','parser.py',196),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',203),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',209),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',210),
  ('string_mode -> CHARS LBRACKET integer_literal RBRACKET','string_mode',4,'p_string_mode','parser.py',215),
  ('array_mode -> ARRAY LBRACKET list_index_mode RBRACKET mode','array_mode',5,'p_array_mode','parser.py',222),
  ('list_index_mode -> index_mode','list_index_mode',1,'p_list_index_mode','parser.py',228),
  ('list_index_mode -> list_index_mode COMMA index_mode','list_index_mode',3,'p_list_index_mode','parser.py',229),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',237),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',238),
  ('location -> identifier','location',1,'p_location','parser.py',244),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',245),
  ('location -> array_element','location',1,'p_location','parser.py',246),
  ('location -> array_slice','location',1,'p_location','parser.py',247),
  ('location -> call_action','location',1,'p_location','parser.py',248),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',258),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',295),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',302),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',303),
  ('array_slice -> array_location LBRACKET expression COLON expression RBRACKET','array_slice',6,'p_array_slice','parser.py',312),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',319),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',325),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',326),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',327),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',328),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',335),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',336),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',337),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',338),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',339),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',346),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',353),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',354),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',361),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',368),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',375),
  ('value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','parser.py',382),
  ('value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',389),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',396),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',402),
  ('expression -> operand0','expression',1,'p_expression','parser.py',409),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',410),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',417),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',418),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',428),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',435),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',442),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',449),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',450),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',461),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',462),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',473),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',474),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> EQ','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> NE','relational_operator',1,'p_relational_operator','parser.py',483),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','parser.py',484),
  ('relational_operator -> GEQ','relational_operator',1,'p_relational_operator','parser.py',485),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','parser.py',486),
  ('relational_operator -> LEQ','relational_operator',1,'p_relational_operator','parser.py',487),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',494),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',501),
  ('operand1 -> operand1 arithmetic_additive_operator operand2','operand1',3,'p_operand1','parser.py',502),
  ('operand1 -> operand1 string_concatenation_operator operand2','operand1',3,'p_operand1','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',514),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',515),
  ('string_concatenation_operator -> LAND','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',522),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',529),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',530),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',541),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',542),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',543),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',549),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',550),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',561),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',562),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',569),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',570),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',571),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',578),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',585),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','parser.py',586),
  ('action -> bracketed_action','action',1,'p_action','parser.py',597),
  ('action -> assignment_action','action',1,'p_action','parser.py',598),
  ('action -> call_action','action',1,'p_action','parser.py',599),
  ('action -> exit_action','action',1,'p_action','parser.py',600),
  ('action -> return_action','action',1,'p_action','parser.py',601),
  ('action -> result_action','action',1,'p_action','parser.py',602),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',609),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',610),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',617),
  ('assigning_operator -> EQUALS','assigning_operator',1,'p_assigning_operator','parser.py',624),
  ('assigning_operator -> PLUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',625),
  ('assigning_operator -> MINUS EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',626),
  ('assigning_operator -> TIMES EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',627),
  ('assigning_operator -> DIVIDE EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',628),
  ('assigning_operator -> MODULO EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',629),
  ('assigning_operator -> LAND EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',630),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',639),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',640),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',650),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',656),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',657),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',665),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',666),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',667),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',679),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',680),
  ('control_part -> for_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',692),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','parser.py',702),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',709),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',710),
  ('step_enumeration -> identifier EQUALS start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',717),
  ('step_enumeration -> identifier EQUALS start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',718),
  ('step_enumeration -> identifier EQUALS start_value DOWN end_value','step_enumeration',5,'p_step_enumeration','parser.py',719),
  ('step_enumeration -> identifier EQUALS start_value step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','parser.py',720),
  ('start_value -> expression','start_value',1,'p_start_value','parser.py',735),
  ('step_value -> BY expression','step_value',2,'p_step_value','parser.py',741),
  ('end_value -> TO expression','end_value',2,'p_end_value','parser.py',747),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',753),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',754),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',764),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',771),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',772),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',779),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',780),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',789),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',790),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',799),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','parser.py',805),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',812),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',813),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',822),
  ('result -> expression','result',1,'p_result','parser.py',829),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',835),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',836),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',847),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',848),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',849),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',850),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',851),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',852),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',853),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',854),
  ('procedure_statement -> identifier COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',860),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END','procedure_definition',6,'p_procedure_definition','parser.py',867),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',868),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',869),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END','procedure_definition',8,'p_procedure_definition','parser.py',870),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',885),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',886),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',895),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',902),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',903),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',913),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',914),
]
